<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="26:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0xb7212500"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0xb73154a0"/></to>
    </wire>
    <wire loc="72:../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0xb73154a0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0xb7316a18"/></to>
    </wire>
    <wire loc="27:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb71a08e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb7151b60"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb7151b60"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0xb714ad20"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="28:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Read" scoped="" ref="0xb719e010"/></from>
      <to><interface-ref name="Read" scoped="" ref="0xb704bea0"/></to>
    </wire>
    <wire loc="29:../../tos/sensorboards/mts300/AccelXC.nc">
      <from><interface-ref name="Read" scoped="" ref="0xb704bea0"/></from>
      <to><interface-ref name="ReadX" scoped="" ref="0xb7048920"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="29:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb7195b70"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb716c8a8"/></to>
    </wire>
    <wire loc="51:../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb716c8a8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb7166010"/></to>
    </wire>
    <wire loc="30:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="RadioAMPacket" scoped="" ref="0xb71c7a48"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb63d24d0"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb63d24d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb65fbb68"/></to>
    </wire>
    <wire loc="41:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0xb720ea30"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6e5c3b8"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6e5c3b8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6e3d3d8"/></to>
    </wire>
    <wire loc="42:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0xb7211188"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6609e68"/></to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6609e68"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb65c11d0"/></to>
    </wire>
    <wire loc="43:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="RoutingControl" scoped="" ref="0xb720c880"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb6e91708"/></to>
    </wire>
    <wire loc="72:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb6e91708"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb6e69240"/></to>
    </wire>
    <wire loc="45:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb71c0548"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb660a6a8"/></to>
    </wire>
    <wire loc="51:../../tos/lib/net/ctp/CollectionSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb660a6a8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb5e2b6b0"/></to>
    </wire>
    <wire loc="46:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="SerialSend" scoped="" ref="0xb71b9e20"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb63e2760"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb63e2760"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb5dca9f8"/></to>
    </wire>
    <wire loc="47:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb71bd698"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6e8e010"/>
      <arguments>
        <value cst="I:147">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="48:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb71bd9f8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6e8f888"/>
      <arguments>
        <value cst="I:147">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="RootControl" scoped="" ref="0xb71b1620"/></from>
      <to><interface-ref name="RootControl" scoped="" ref="0xb6e73b90"/></to>
    </wire>
    <wire loc="84:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="RootControl" scoped="" ref="0xb6e73b90"/></from>
      <to><interface-ref name="RootControl" scoped="" ref="0xb6e632a0"/></to>
    </wire>
    <wire loc="54:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="UARTMessagePool" scoped="" ref="0xb71a7910"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb63cd540"/></to>
    </wire>
    <wire loc="49:../../tos/system/PoolC.nc">
      <from><interface-ref name="Pool" scoped="" ref="0xb63cd540"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb5da0b10"/></to>
    </wire>
    <wire loc="55:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="UARTQueue" scoped="" ref="0xb71ab3b0"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0xb63cb8a8"/></to>
    </wire>
    <wire loc="62:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0xb63bdd58"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0xb73154a0"/></to>
    </wire>
    <wire loc="63:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="UARTSend" scoped="" ref="0xb63b67c0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb63c19e0"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb63c19e0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb5d82e80"/></to>
    </wire>
    <wire loc="64:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="MessagePool" scoped="" ref="0xb63ba300"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb63c7bf8"/></to>
    </wire>
    <wire loc="49:../../tos/system/PoolC.nc">
      <from><interface-ref name="Pool" scoped="" ref="0xb63c7bf8"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb5d91f00"/></to>
    </wire>
    <wire loc="65:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="SendQueue" scoped="" ref="0xb63b9928"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0xb63c4f10"/></to>
    </wire>
    <wire loc="66:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="CollectionDebug" scoped="" ref="0xb6e6b550"/></from>
      <to><interface-ref name="CollectionDebug" scoped="" ref="0xb63bd650"/></to>
    </wire>
    <wire loc="48:../../tos/system/PoolC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5d91b58"/></to>
    </wire>
    <wire loc="48:../../tos/system/PoolC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5da0768"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0xb6499d70"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0xb6495920"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb64d76d8"/></to>
    </wire>
    <wire loc="59:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb65c4df0"/></to>
    </wire>
    <wire loc="46:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5ecf6d0"/></to>
    </wire>
    <wire loc="48:../../tos/system/PoolC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5edf550"/></to>
    </wire>
    <wire loc="48:../../tos/system/PoolC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5eead88"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5f89948"/></to>
    </wire>
    <wire loc="120:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0xb6ac14d8"/></to>
    </wire>
    <wire loc="52:../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6b6c0e8"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0xb60014e0"/></to>
    </wire>
    <wire loc="45:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6c11bd0"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb601d408"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb608adc0"/></to>
    </wire>
    <wire loc="153:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb66374d0"/></to>
    </wire>
    <wire loc="178:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb68063d0"/></to>
    </wire>
    <wire loc="229:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6792500"/></to>
    </wire>
    <wire loc="103:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb611f640"/></to>
    </wire>
    <wire loc="103:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb615a7c0"/></to>
    </wire>
    <wire loc="53:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb7144618"/></to>
    </wire>
    <wire loc="67:../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0xb7316db0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0xb73b4528"/></to>
    </wire>
    <wire loc="53:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0xb73b4528"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0xb733b8a8"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0xb721d400"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0xb6a27858"/></to>
    </wire>
    <wire loc="123:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0xb721d400"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0xb6ac2e40"/></to>
    </wire>
    <wire loc="68:../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0xb721d400"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb73179d8"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb73179d8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb7313d48"/></to>
    </wire>
    <wire loc="71:../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb721d808"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0xb730c9c8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb63fa670"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0xb730c9c8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb69372b0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0xb730c9c8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6f23d68"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0xb730c268"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0xb722e010"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0xb730a548"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb722fbf8"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0xb730a140"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb7153ba8"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0xb730a140"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0xb7312620"/></to>
    </wire>
    <wire loc="46:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0xb7312620"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0xb7307590"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0xb73129f0"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0xb730c9c8"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0xb7300ad0"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0xb72fbdc8"/></to>
    </wire>
    <wire loc="141:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0xb72fbdc8"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0xb72af170"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0xb7303588"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0xb73129f0"/></to>
    </wire>
    <wire loc="191:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0xb72dd210"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb725b0b0"/></to>
    </wire>
    <wire loc="165:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0xb72ed750"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0xb7298090"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0xb7298090"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62c3de0"/></to>
    </wire>
    <wire loc="176:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0xb72e6ce8"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0xb728fd68"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0xb728fd68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6287538"/></to>
    </wire>
    <wire loc="185:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0xb72e1ea8"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0xb72867d0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0xb72867d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb624e228"/></to>
    </wire>
    <wire loc="196:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG5" scoped="" ref="0xb72da750"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb724d880"/></to>
    </wire>
    <wire loc="143:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0xb72f92f0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0xb72ae4f0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0xb72ae4f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6367a88"/></to>
    </wire>
    <wire loc="183:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0xb72e2a98"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0xb72874f0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0xb72874f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6252de0"/></to>
    </wire>
    <wire loc="146:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0xb72f8750"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0xb72a93d8"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0xb72a93d8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6335938"/></to>
    </wire>
    <wire loc="157:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0xb72f2ea8"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0xb729f170"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0xb729f170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62fa9e8"/></to>
    </wire>
    <wire loc="168:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0xb72ea670"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0xb7296d68"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0xb7296d68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62bec08"/></to>
    </wire>
    <wire loc="179:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0xb72e4c08"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0xb728dac8"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0xb728dac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6281538"/></to>
    </wire>
    <wire loc="138:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0xb7306f10"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0xb72b1410"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0xb72b1410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb636f7f8"/></to>
    </wire>
    <wire loc="149:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0xb72f6670"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0xb72a7030"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0xb72a7030"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb63307f8"/></to>
    </wire>
    <wire loc="160:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0xb72f0ce8"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0xb729ee48"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0xb729ee48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62f59e8"/></to>
    </wire>
    <wire loc="171:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0xb72e84b0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0xb7294ac8"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0xb7294ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62b9a88"/></to>
    </wire>
    <wire loc="188:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0xb72dfce8"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0xb72844f0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0xb72844f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62490b0"/></to>
    </wire>
    <wire loc="194:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0xb72db2f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb7252880"/></to>
    </wire>
    <wire loc="174:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0xb72e78e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0xb7290a80"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0xb7290a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb628a0b0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0xb72af170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb636a6c0"/></to>
    </wire>
    <wire loc="152:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0xb72f4590"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0xb72a6c88"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0xb72a6c88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb632b6c0"/></to>
    </wire>
    <wire loc="192:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0xb72dde08"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb7258880"/></to>
    </wire>
    <wire loc="155:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0xb72f3a08"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0xb72a1dc8"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0xb72a1dc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62fd538"/></to>
    </wire>
    <wire loc="166:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0xb72ec210"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0xb72989e8"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0xb72989e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62c17f8"/></to>
    </wire>
    <wire loc="177:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0xb72e5750"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0xb728e790"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0xb728e790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6285010"/></to>
    </wire>
    <wire loc="186:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0xb72e08e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0xb7285170"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0xb7285170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb624dc08"/></to>
    </wire>
    <wire loc="144:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0xb72f9ce8"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0xb72aee48"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0xb72aee48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6365538"/></to>
    </wire>
    <wire loc="147:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0xb72f7210"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0xb72a9d30"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0xb72a9d30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb63333b0"/></to>
    </wire>
    <wire loc="158:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0xb72f18e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0xb729fac8"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0xb729fac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62f8538"/></to>
    </wire>
    <wire loc="169:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0xb72e90a0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0xb7295790"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0xb7295790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62bc6c0"/></to>
    </wire>
    <wire loc="180:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0xb72e3670"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0xb728b4f0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0xb728b4f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb627f010"/></to>
    </wire>
    <wire loc="139:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0xb72fc928"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0xb72b1d68"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0xb72b1d68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb636d228"/></to>
    </wire>
    <wire loc="150:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0xb72f50a0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0xb72a7988"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0xb72a7988"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb632e228"/></to>
    </wire>
    <wire loc="161:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0xb72ef750"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0xb729d7d0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0xb729d7d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62f3538"/></to>
    </wire>
    <wire loc="189:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0xb72de750"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0xb7284e48"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0xb7284e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6248a88"/></to>
    </wire>
    <wire loc="164:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0xb72eec08"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0xb72996f8"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0xb72996f8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62c4418"/></to>
    </wire>
    <wire loc="175:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0xb72e62f0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0xb728f410"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0xb728f410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6289a88"/></to>
    </wire>
    <wire loc="184:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0xb72e14b0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0xb7287e48"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0xb7287e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62507f8"/></to>
    </wire>
    <wire loc="195:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0xb72dbce8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb724f0b0"/></to>
    </wire>
    <wire loc="142:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0xb72fa830"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0xb72afac8"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0xb72afac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb63680b0"/></to>
    </wire>
    <wire loc="153:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0xb72f3010"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0xb72a56b0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0xb72a56b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb63290b0"/></to>
    </wire>
    <wire loc="182:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0xb72e20a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0xb7288b00"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0xb7288b00"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6253418"/></to>
    </wire>
    <wire loc="156:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0xb72f24b0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0xb72a0790"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0xb72a0790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62fb010"/></to>
    </wire>
    <wire loc="167:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0xb72ecc08"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0xb7296410"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0xb7296410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62bf228"/></to>
    </wire>
    <wire loc="178:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0xb72e4210"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0xb728d170"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0xb728d170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62849e8"/></to>
    </wire>
    <wire loc="187:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0xb72df2f0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0xb7285ac8"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0xb7285ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb624b6c0"/></to>
    </wire>
    <wire loc="137:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0xb7306518"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0xb72b2a28"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0xb72b2a28"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6374dd0"/></to>
    </wire>
    <wire loc="148:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0xb72f7c08"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0xb72a86b0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0xb72a86b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6332d70"/></to>
    </wire>
    <wire loc="159:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0xb72f02f0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0xb729e4f0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0xb729e4f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62f6010"/></to>
    </wire>
    <wire loc="170:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0xb72e9a98"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0xb7294170"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0xb7294170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62ba0b0"/></to>
    </wire>
    <wire loc="193:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0xb72dc830"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb72550b0"/></to>
    </wire>
    <wire loc="173:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0xb72e8ea8"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0xb7290128"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0xb7290128"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb628c6c0"/></to>
    </wire>
    <wire loc="162:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0xb72ee210"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0xb729c170"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0xb729c170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62f0010"/></to>
    </wire>
    <wire loc="140:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0xb72fb3d0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0xb72b0790"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0xb72b0790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb636cc08"/></to>
    </wire>
    <wire loc="151:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0xb72f5b18"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0xb72a6330"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0xb72a6330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb632dc08"/></to>
    </wire>
    <wire loc="54:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb733a100"/></to>
    </wire>
    <wire loc="55:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0xb733ad58"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0xb73b5718"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0xb7326218"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0xb70d47b8"/></to>
    </wire>
    <wire loc="51:MultihopOscilloscopeC.nc">
      <from><interface-ref name="uartSendTask" scoped="" ref="0xb719bc88"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb7153ba8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb7169c08"/></to>
    </wire>
    <wire loc="54:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0xb7166cd8"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0xb7168c80"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0xb7168c80"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0xb72fc928"/></to>
    </wire>
    <wire loc="55:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0xb7165740"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0xb7154760"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0xb7154760"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0xb7306f10"/></to>
    </wire>
    <wire loc="56:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0xb7164200"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0xb7153220"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0xb7153220"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0xb7306518"/></to>
    </wire>
    <wire loc="54:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0xb714ad20"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0xb7144dc8"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0xb7144dc8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb7082f00"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb7144618"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb713c458"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0xb713eda8"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0xb7055940"/></to>
    </wire>
    <wire loc="35:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb713c458"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb712dbb8"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0xb705a338"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb713af08"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb7086248"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0xb7133c78"/></to>
    </wire>
    <wire loc="36:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0xb7133c78"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb70a2010"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb7054360"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0xb712e5c8"/></to>
    </wire>
    <wire loc="37:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0xb712e5c8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb70a1a88"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb70a1a88"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb61d15b8"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb712dbb8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb61d3660"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb70a2010"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb61d3a98"/></to>
    </wire>
    <wire loc="74:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb61d07f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb70e5e68"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb70e5e68"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb70dcdd0"/></to>
    </wire>
    <wire loc="75:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0xb61cd9d0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0xb70e01a0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0xb70e01a0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0xb70d61a0"/></to>
    </wire>
    <wire loc="76:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb61cc3c8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0xb70e0cc0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb70e0cc0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0xb70d6cc0"/></to>
    </wire>
    <wire loc="77:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0xb61cbdc0"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0xb70dd858"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0xb70dd858"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0xb70d4c18"/></to>
    </wire>
    <wire loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0xb7085bd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0xb7058560"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="30:../../tos/sensorboards/mts300/AccelXC.nc">
      <from><interface-ref name="ActualX" scoped="" ref="0xb7043a18"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Read" scoped="" ref="0xb6198e38"/></to>
    </wire>
    <wire loc="36:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0xb6198e38"/></from>
      <to><interface-ref name="Read" scoped="" ref="0xb6f2fbc8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="31:../../tos/sensorboards/mts300/AccelXC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb61979d8"/></from>
      <to><interface-ref name="ConfigX" scoped="" ref="0xb7038988"/></to>
    </wire>
    <wire loc="30:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="ConfigX" scoped="" ref="0xb7038988"/></from>
      <to><interface-ref name="ConfigX" scoped="" ref="0xb7036160"/></to>
    </wire>
    <wire loc="24:../../tos/sensorboards/mts300/AccelReadP.nc">
      <from><interface-ref name="ReadX" scoped="" ref="0xb7048920"/></from>
      <to><interface-ref name="Read" scoped="" ref="0xb6f472f8"/></to>
    </wire>
    <wire loc="29:../../tos/sensorboards/mts300/AccelReadP.nc">
      <from><interface-ref name="ReadY" scoped="" ref="0xb70459b8"/></from>
      <to><interface-ref name="Read" scoped="" ref="0xb6f371b8"/></to>
    </wire>
    <wire loc="25:../../tos/sensorboards/mts300/AccelReadP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6f39c30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb703aec8"/></to>
    </wire>
    <wire loc="29:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb703aec8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6faf4e8"/></to>
    </wire>
    <wire loc="26:../../tos/sensorboards/mts300/AccelReadP.nc">
      <from><interface-ref name="Service" scoped="" ref="0xb6f39010"/></from>
      <to><interface-ref name="ActualX" scoped="" ref="0xb7043a18"/></to>
    </wire>
    <wire loc="30:../../tos/sensorboards/mts300/AccelReadP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6f35b40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb703aec8"/></to>
    </wire>
    <wire loc="31:../../tos/sensorboards/mts300/AccelReadP.nc">
      <from><interface-ref name="Service" scoped="" ref="0xb6f37eb8"/></from>
      <to><interface-ref name="ActualY" scoped="" ref="0xb7042a20"/></to>
    </wire>
    <wire loc="31:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="ConfigY" scoped="" ref="0xb703c010"/></from>
      <to><interface-ref name="ConfigY" scoped="" ref="0xb7036738"/></to>
    </wire>
    <wire loc="105:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6faf4e8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6159ce8"/></to>
    </wire>
    <wire loc="33:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6f65550"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6f68070"/></to>
    </wire>
    <wire loc="107:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6f68070"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6157890"/></to>
    </wire>
    <wire loc="34:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb6f65be8"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb6f68708"/></to>
    </wire>
    <wire loc="108:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb6f68708"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb6157f28"/></to>
    </wire>
    <wire loc="35:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6f66c68"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb703ca70"/></to>
    </wire>
    <wire loc="37:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb7036d58"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb6fb47e8"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb6fb47e8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0xb714ad20"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="38:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="AccelPin" scoped="" ref="0xb7032088"/></from>
      <to><interface-ref name="PW4" scoped="" ref="0xb70221f8"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW4" scoped="" ref="0xb70221f8"/></from>
      <to><interface-ref name="PortC4" scoped="" ref="0xb72f02f0"/></to>
    </wire>
    <wire loc="39:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="AccelAdcX" scoped="" ref="0xb702f2b0"/></from>
      <to><interface-ref name="Adc3" scoped="" ref="0xb7017128"/></to>
    </wire>
    <wire loc="95:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc3" scoped="" ref="0xb7017128"/></from>
      <to><interface-ref name="Adc3" scoped="" ref="0xb70128b8"/></to>
    </wire>
    <wire loc="40:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="AccelAdcY" scoped="" ref="0xb702f6b0"/></from>
      <to><interface-ref name="Adc4" scoped="" ref="0xb70174f8"/></to>
    </wire>
    <wire loc="96:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc4" scoped="" ref="0xb70174f8"/></from>
      <to><interface-ref name="Adc4" scoped="" ref="0xb7012c88"/></to>
    </wire>
    <wire loc="67:../../tos/sensorboards/mts300/AccelP.nc">
      <from><interface-ref name="stopDone" scoped="" ref="0xb70296c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int1_Interrupt" scoped="" ref="0xb701c198"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0xb6fc2638"/></to>
    </wire>
    <wire loc="92:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc0" scoped="" ref="0xb7018598"/></from>
      <to><interface-ref name="Adc0" scoped="" ref="0xb7016d28"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW3" scoped="" ref="0xb7023810"/></from>
      <to><interface-ref name="PortC3" scoped="" ref="0xb72f18e0"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW6" scoped="" ref="0xb7021650"/></from>
      <to><interface-ref name="PortC6" scoped="" ref="0xb72ef750"/></to>
    </wire>
    <wire loc="97:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc5" scoped="" ref="0xb70178c8"/></from>
      <to><interface-ref name="Adc5" scoped="" ref="0xb7011090"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int1" scoped="" ref="0xb701f4a0"/></from>
      <to><interface-ref name="PortE5" scoped="" ref="0xb72e4210"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="USART1_TXD" scoped="" ref="0xb7019b08"/></from>
      <to><interface-ref name="PortD3" scoped="" ref="0xb72ecc08"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW1" scoped="" ref="0xb70253b0"/></from>
      <to><interface-ref name="PortC1" scoped="" ref="0xb72f24b0"/></to>
    </wire>
    <wire loc="90:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int3_Interrupt" scoped="" ref="0xb701b010"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0xb6fbe808"/></to>
    </wire>
    <wire loc="93:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc1" scoped="" ref="0xb7018968"/></from>
      <to><interface-ref name="Adc1" scoped="" ref="0xb7012118"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="USART1_RXD" scoped="" ref="0xb70190e8"/></from>
      <to><interface-ref name="PortD2" scoped="" ref="0xb72ec210"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW7" scoped="" ref="0xb7020050"/></from>
      <to><interface-ref name="PortC7" scoped="" ref="0xb72ee210"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int0_Interrupt" scoped="" ref="0xb701a9d8"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0xb6fcb560"/></to>
    </wire>
    <wire loc="98:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc6" scoped="" ref="0xb7017d98"/></from>
      <to><interface-ref name="Adc6" scoped="" ref="0xb7011460"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int2" scoped="" ref="0xb701fe88"/></from>
      <to><interface-ref name="PortE6" scoped="" ref="0xb72e4c08"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW2" scoped="" ref="0xb7025d88"/></from>
      <to><interface-ref name="PortC2" scoped="" ref="0xb72f2ea8"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW5" scoped="" ref="0xb7022bd0"/></from>
      <to><interface-ref name="PortC5" scoped="" ref="0xb72f0ce8"/></to>
    </wire>
    <wire loc="94:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc2" scoped="" ref="0xb7018d38"/></from>
      <to><interface-ref name="Adc2" scoped="" ref="0xb70124e8"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int0" scoped="" ref="0xb7020a38"/></from>
      <to><interface-ref name="PortE4" scoped="" ref="0xb72e5750"/></to>
    </wire>
    <wire loc="86:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int2_Interrupt" scoped="" ref="0xb701c888"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0xb6fc0758"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="USART1_CLK" scoped="" ref="0xb701b6b0"/></from>
      <to><interface-ref name="PortD5" scoped="" ref="0xb72e90a0"/></to>
    </wire>
    <wire loc="99:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc7" scoped="" ref="0xb7016208"/></from>
      <to><interface-ref name="Adc7" scoped="" ref="0xb7011830"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW0" scoped="" ref="0xb7037958"/></from>
      <to><interface-ref name="PortC0" scoped="" ref="0xb72f3a08"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int3" scoped="" ref="0xb701e880"/></from>
      <to><interface-ref name="PortE7" scoped="" ref="0xb72e3670"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6fcbb58"/></from>
      <to><interface-ref name="Int4" scoped="" ref="0xb70074f8"/></to>
    </wire>
    <wire loc="75:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int4" scoped="" ref="0xb70074f8"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6fd93b0"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6fc2c30"/></from>
      <to><interface-ref name="Int5" scoped="" ref="0xb7007d78"/></to>
    </wire>
    <wire loc="76:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int5" scoped="" ref="0xb7007d78"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6fd7538"/></to>
    </wire>
    <wire loc="85:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6fc0d50"/></from>
      <to><interface-ref name="Int6" scoped="" ref="0xb70036b8"/></to>
    </wire>
    <wire loc="77:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int6" scoped="" ref="0xb70036b8"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6fd56c0"/></to>
    </wire>
    <wire loc="89:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6fbee00"/></from>
      <to><interface-ref name="Int7" scoped="" ref="0xb7002010"/></to>
    </wire>
    <wire loc="78:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int7" scoped="" ref="0xb7002010"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6fd27a8"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int1" scoped="" ref="0xb7004a88"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6fe1e68"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int2" scoped="" ref="0xb7008338"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6fde010"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int0" scoped="" ref="0xb7004208"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6fedcf0"/></to>
    </wire>
    <wire loc="74:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int3" scoped="" ref="0xb7008bb8"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6fdb228"/></to>
    </wire>
    <wire loc="80:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6fec510"/></from>
      <to><interface-ref name="IntSig0" scoped="" ref="0xb6fffb00"/></to>
    </wire>
    <wire loc="81:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6fe0630"/></from>
      <to><interface-ref name="IntSig1" scoped="" ref="0xb6ffe010"/></to>
    </wire>
    <wire loc="82:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6fde7c8"/></from>
      <to><interface-ref name="IntSig2" scoped="" ref="0xb6ffe488"/></to>
    </wire>
    <wire loc="83:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6fdb9e0"/></from>
      <to><interface-ref name="IntSig3" scoped="" ref="0xb6ffe900"/></to>
    </wire>
    <wire loc="84:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6fd9b68"/></from>
      <to><interface-ref name="IntSig4" scoped="" ref="0xb6ffed78"/></to>
    </wire>
    <wire loc="85:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6fd7cf0"/></from>
      <to><interface-ref name="IntSig5" scoped="" ref="0xb6ffd2b0"/></to>
    </wire>
    <wire loc="86:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6fd5e78"/></from>
      <to><interface-ref name="IntSig6" scoped="" ref="0xb6ffd728"/></to>
    </wire>
    <wire loc="87:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6fd1010"/></from>
      <to><interface-ref name="IntSig7" scoped="" ref="0xb6ffdba0"/></to>
    </wire>
    <wire loc="106:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0xb6fafc28"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0xb6157488"/></to>
    </wire>
    <wire loc="109:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb61563f8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb6f68bb8"/></to>
    </wire>
    <wire loc="111:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0xb6156820"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0xb615aaf8"/></to>
    </wire>
    <wire loc="75:../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0xb6155a50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb613a970"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6f66c68"/></to>
    </wire>
    <wire loc="81:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0xb613af28"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0xb6f65238"/></to>
    </wire>
    <wire loc="83:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6139250"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6f65550"/></to>
    </wire>
    <wire loc="84:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb61398e8"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb6f65be8"/></to>
    </wire>
    <wire loc="78:../../tos/lib/power/PowerManagerP.nc">
      <from><interface-ref name="stopTask" scoped="" ref="0xb6139d20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../tos/lib/power/PowerManagerP.nc">
      <from><interface-ref name="startTask" scoped="" ref="0xb6138190"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="37:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb6f28010"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb61979d8"/></to>
    </wire>
    <wire loc="38:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6f28848"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6f27830"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="39:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb6f23100"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb6197eb0"/></to>
    </wire>
    <wire loc="31:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0xb6f2fbc8"/></from>
      <to><interface-ref name="Read" scoped="" ref="0xb6ebcab8"/></to>
    </wire>
    <wire loc="32:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0xb6f2b010"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0xb6eb9598"/></to>
    </wire>
    <wire loc="33:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6e9c408"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6f28848"/></to>
    </wire>
    <wire loc="34:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb6eb8ab0"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb6f28010"/></to>
    </wire>
    <wire loc="36:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0xb6ea17d0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0xb6ebb5f8"/></to>
    </wire>
    <wire loc="37:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6eb8238"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6f20300"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6f20300"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6f176a8"/></to>
    </wire>
    <wire loc="38:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0xb6eb4260"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0xb6e9f010"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0xb6f1c870"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0xb6f17c30"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6f27830"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6ef2760"/></to>
    </wire>
    <wire loc="105:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6ef2760"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb611ebc0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb6ecee28"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb6f23100"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6f0e498"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6f22a38"/></to>
    </wire>
    <wire loc="50:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6f22a38"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6eef718"/></to>
    </wire>
    <wire loc="74:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0xb6f18968"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0xb730c268"/></to>
    </wire>
    <wire loc="76:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0xb6eccda8"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0xb6f17218"/></to>
    </wire>
    <wire loc="77:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6ecb548"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6ece2e0"/></to>
    </wire>
    <wire loc="107:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6ece2e0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb611d7b0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0xb6eecb38"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0xb73283d0"/></to>
    </wire>
    <wire loc="106:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0xb6ef2ea0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0xb611d3a8"/></to>
    </wire>
    <wire loc="108:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb6ece978"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb611de48"/></to>
    </wire>
    <wire loc="109:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb611c338"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb6ecee28"/></to>
    </wire>
    <wire loc="111:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0xb611c760"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0xb611f978"/></to>
    </wire>
    <wire loc="75:../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0xb611a970"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0xb60ff3b0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0xb6eccda8"/></to>
    </wire>
    <wire loc="82:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0xb60ff7a8"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0xb6ecb230"/></to>
    </wire>
    <wire loc="84:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb60ffac0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6ecb548"/></to>
    </wire>
    <wire loc="85:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb60fe230"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb6ecbbe0"/></to>
    </wire>
    <wire loc="104:../../tos/chips/atm1281/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0xb6eade90"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RootControl" scoped="" ref="0xb6e632a0"/></from>
      <to><interface-ref name="RootControl" scoped="" ref="0xb6639608"/></to>
    </wire>
    <wire loc="79:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CollectionPacket" scoped="" ref="0xb6e8a498"/></from>
      <to><interface-ref name="CollectionPacket" scoped="" ref="0xb6e67bf0"/></to>
    </wire>
    <wire loc="122:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CollectionPacket" scoped="" ref="0xb6e67bf0"/></from>
      <to><interface-ref name="CollectionPacket" scoped="" ref="0xb68044d0"/></to>
    </wire>
    <wire loc="76:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Intercept" scoped="" ref="0xb6e8bc10"/></from>
      <to><interface-ref name="Intercept" scoped="" ref="0xb6e67158"/></to>
    </wire>
    <wire loc="119:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Intercept" scoped="" ref="0xb6e67158"/></from>
      <to><interface-ref name="Intercept" scoped="" ref="0xb6805a70"/></to>
    </wire>
    <wire loc="78:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6e86ce8"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e674b0"/></to>
    </wire>
    <wire loc="120:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6e674b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6805d98"/></to>
    </wire>
    <wire loc="75:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb6e8e010"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6e68a88"/></to>
    </wire>
    <wire loc="118:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb6e68a88"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb68056b0"/></to>
    </wire>
    <wire loc="73:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6e91e38"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6e69970"/></to>
    </wire>
    <wire loc="115:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6e69970"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6806b78"/></to>
    </wire>
    <wire loc="82:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CtpInfo" scoped="" ref="0xb6e75e68"/></from>
      <to><interface-ref name="CtpInfo" scoped="" ref="0xb6e654b8"/></to>
    </wire>
    <wire loc="168:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpInfo" scoped="" ref="0xb6e654b8"/></from>
      <to><interface-ref name="CtpInfo" scoped="" ref="0xb6639ae0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6e8f888"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6e683d8"/></to>
    </wire>
    <wire loc="117:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6e683d8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb68052d0"/></to>
    </wire>
    <wire loc="83:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CtpCongestion" scoped="" ref="0xb6e73728"/></from>
      <to><interface-ref name="CtpCongestion" scoped="" ref="0xb6e5ee20"/></to>
    </wire>
    <wire loc="124:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpCongestion" scoped="" ref="0xb6e5ee20"/></from>
      <to><interface-ref name="CtpCongestion" scoped="" ref="0xb6803c50"/></to>
    </wire>
    <wire loc="85:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb6e70570"/></from>
      <to><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb6e63858"/></to>
    </wire>
    <wire loc="151:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb6e63858"/></from>
      <to><interface-ref name="Routing" scoped="" ref="0xb6639050"/></to>
    </wire>
    <wire loc="80:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CtpPacket" scoped="" ref="0xb6e7b920"/></from>
      <to><interface-ref name="CtpPacket" scoped="" ref="0xb6e66450"/></to>
    </wire>
    <wire loc="123:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpPacket" scoped="" ref="0xb6e66450"/></from>
      <to><interface-ref name="CtpPacket" scoped="" ref="0xb6804c48"/></to>
    </wire>
    <wire loc="116:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb6e69240"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb68066e8"/></to>
    </wire>
    <wire loc="148:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb6e69240"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb6638770"/></to>
    </wire>
    <wire loc="149:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb6e69240"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb6794bd0"/></to>
    </wire>
    <wire loc="87:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CollectionId" scoped="" ref="0xb6e62280"/></from>
      <to><interface-ref name="CollectionId" scoped="" ref="0xb6e6f780"/></to>
    </wire>
    <wire loc="88:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CollectionDebug" scoped="" ref="0xb6e62630"/></from>
      <to><interface-ref name="CollectionDebug" scoped="" ref="0xb6e6b550"/></to>
    </wire>
    <wire loc="193:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="LinkEstimator" scoped="" ref="0xb6e5e460"/></from>
      <to><interface-ref name="LinkEstimator" scoped="" ref="0xb6793b10"/></to>
    </wire>
    <wire loc="121:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CollectionId" scoped="" ref="0xb67f35e8"/></from>
      <to><interface-ref name="CollectionId" scoped="" ref="0xb6e62280"/></to>
    </wire>
    <wire loc="128:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="QEntryPool" scoped="" ref="0xb67fa488"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb67d3010"/></to>
    </wire>
    <wire loc="49:../../tos/system/PoolC.nc">
      <from><interface-ref name="Pool" scoped="" ref="0xb67d3010"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb5edf8f8"/></to>
    </wire>
    <wire loc="129:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="MessagePool" scoped="" ref="0xb67f9a30"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb67eab18"/></to>
    </wire>
    <wire loc="49:../../tos/system/PoolC.nc">
      <from><interface-ref name="Pool" scoped="" ref="0xb67eab18"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb5ee81e0"/></to>
    </wire>
    <wire loc="132:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SendQueue" scoped="" ref="0xb67fd6a0"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0xb67cf0a0"/></to>
    </wire>
    <wire loc="135:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SentCache" scoped="" ref="0xb67f6010"/></from>
      <to><interface-ref name="Cache" scoped="" ref="0xb67bddc0"/></to>
    </wire>
    <wire loc="44:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
      <from><interface-ref name="Cache" scoped="" ref="0xb67bddc0"/></from>
      <to><interface-ref name="Cache" scoped="" ref="0xb5ecfa98"/></to>
    </wire>
    <wire loc="140:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="LinkEstimator" scoped="" ref="0xb67fe010"/></from>
      <to><interface-ref name="LinkEstimator" scoped="" ref="0xb6793b10"/></to>
    </wire>
    <wire loc="154:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="BeaconSend" scoped="" ref="0xb6637838"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6793090"/></to>
    </wire>
    <wire loc="155:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="BeaconReceive" scoped="" ref="0xb6637ef0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6793770"/></to>
    </wire>
    <wire loc="156:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="LinkEstimator" scoped="" ref="0xb6636220"/></from>
      <to><interface-ref name="LinkEstimator" scoped="" ref="0xb6793b10"/></to>
    </wire>
    <wire loc="158:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CompareBit" scoped="" ref="0xb662d230"/></from>
      <to><interface-ref name="CompareBit" scoped="" ref="0xb678e300"/></to>
    </wire>
    <wire loc="160:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb6636b58"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6e56010"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb6e56010"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6e37cf0"/></to>
    </wire>
    <wire loc="161:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0xb6635790"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6e5c3b8"/></to>
    </wire>
    <wire loc="162:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="BeaconTimer" scoped="" ref="0xb6635df8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb67a1838"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb67a1838"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0xb714ad20"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RouteTimer" scoped="" ref="0xb66310c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb679d670"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb679d670"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0xb714ad20"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CollectionDebug" scoped="" ref="0xb662f6f8"/></from>
      <to><interface-ref name="CollectionDebug" scoped="" ref="0xb6e62630"/></to>
    </wire>
    <wire loc="165:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CollectionDebug" scoped="" ref="0xb67f1708"/></from>
      <to><interface-ref name="CollectionDebug" scoped="" ref="0xb6e62630"/></to>
    </wire>
    <wire loc="166:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpInfo" scoped="" ref="0xb67f4488"/></from>
      <to><interface-ref name="CtpInfo" scoped="" ref="0xb6639ae0"/></to>
    </wire>
    <wire loc="167:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpCongestion" scoped="" ref="0xb662fd90"/></from>
      <to><interface-ref name="CtpCongestion" scoped="" ref="0xb6803c50"/></to>
    </wire>
    <wire loc="172:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RetxmitTimer" scoped="" ref="0xb6802ce0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb6628d90"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb6628d90"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0xb714ad20"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Random" scoped="" ref="0xb662f300"/></from>
      <to><interface-ref name="Random" scoped="" ref="0xb6b71478"/></to>
    </wire>
    <wire loc="56:../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0xb6b71478"/></from>
      <to><interface-ref name="Random" scoped="" ref="0xb6b6cec8"/></to>
    </wire>
    <wire loc="176:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Random" scoped="" ref="0xb67f1310"/></from>
      <to><interface-ref name="Random" scoped="" ref="0xb6b71478"/></to>
    </wire>
    <wire loc="179:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb68020c0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb6725bb8"/></to>
    </wire>
    <wire loc="64:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb6725bb8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb5eb99e8"/></to>
    </wire>
    <wire loc="180:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb67f6d68"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb66d7030"/></to>
    </wire>
    <wire loc="54:../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb66d7030"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6e59718"/>
      <arguments>
        <value cst="I:113">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="181:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubSnoop" scoped="" ref="0xb67f4170"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb66d1a28"/></to>
    </wire>
    <wire loc="55:../../tos/system/AMSnooperC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb66d1a28"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6e59db0"/>
      <arguments>
        <value cst="I:113">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="182:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb67fef20"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6724310"/></to>
    </wire>
    <wire loc="65:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6724310"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb5eb6150"/></to>
    </wire>
    <wire loc="183:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RootControl" scoped="" ref="0xb67f3078"/></from>
      <to><interface-ref name="RootControl" scoped="" ref="0xb6639608"/></to>
    </wire>
    <wire loc="184:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb67fe948"/></from>
      <to><interface-ref name="Routing" scoped="" ref="0xb6639050"/></to>
    </wire>
    <wire loc="185:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0xb67f1dc0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6e5c3b8"/></to>
    </wire>
    <wire loc="186:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6802758"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0xb66da5d0"/></to>
    </wire>
    <wire loc="67:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0xb66da5d0"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0xb5eb5410"/></to>
    </wire>
    <wire loc="187:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb67f3a10"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb67249a8"/></to>
    </wire>
    <wire loc="66:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb67249a8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb5eb67e8"/></to>
    </wire>
    <wire loc="188:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb67f2690"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb716c8a8"/></to>
    </wire>
    <wire loc="195:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Random" scoped="" ref="0xb678fa28"/></from>
      <to><interface-ref name="Random" scoped="" ref="0xb6b71478"/></to>
    </wire>
    <wire loc="197:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb678e698"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb66221f8"/></to>
    </wire>
    <wire loc="64:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb66221f8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb5e43cf0"/></to>
    </wire>
    <wire loc="198:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb678f300"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb661e1f8"/></to>
    </wire>
    <wire loc="54:../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb661e1f8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6e59718"/>
      <arguments>
        <value cst="I:112">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="199:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6790ad0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6622890"/></to>
    </wire>
    <wire loc="65:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6622890"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb5e403f0"/></to>
    </wire>
    <wire loc="200:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubAMPacket" scoped="" ref="0xb678ee18"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6622f28"/></to>
    </wire>
    <wire loc="66:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb6622f28"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb5e40a88"/></to>
    </wire>
    <wire loc="224:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb678f6d0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6e2acc8"/></to>
    </wire>
    <wire loc="100:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6e2acc8"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6e0c728"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6e3d3d8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6e25380"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0xb6e53538"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0xb6e394b0"/></to>
    </wire>
    <wire loc="84:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0xb6e394b0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0xb6e213c0"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6e53890"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e37600"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6e37600"/></from>
      <to><interface-ref name="PacketForActiveMessage" scoped="" ref="0xb6e1f298"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb6e5cc90"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb6e3dcb0"/></to>
    </wire>
    <wire loc="81:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb6e3dcb0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb6e25c58"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb6e59db0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6e3adb0"/></to>
    </wire>
    <wire loc="83:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb6e3adb0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6e22cd0"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0xb6e4ded0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0xb6e35010"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0xb6e35010"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0xb6e17898"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6e59718"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6e3a718"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6e3a718"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6e22638"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6e4e248"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6e36a10"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6e36a10"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6e17310"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0xb6e487d0"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0xb6e35630"/></to>
    </wire>
    <wire loc="94:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0xb6e35630"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0xb6e17eb8"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb6e37cf0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6e20568"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0xb6e451a8"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0xb6e35d48"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0xb6e35d48"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0xb6e12600"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMicro" scoped="" ref="0xb6e41c68"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6e2cd78"/></to>
    </wire>
    <wire loc="104:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6e2cd78"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6e0b7c8"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6e44650"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6e28748"/></to>
    </wire>
    <wire loc="103:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6e28748"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6e082a8"/></to>
    </wire>
    <wire loc="254:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6e25380"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6be7728"/></to>
    </wire>
    <wire loc="99:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0xb6e2fb60"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0xb6e0e4d8"/></to>
    </wire>
    <wire loc="345:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0xb6e0e4d8"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0xb6ad4a58"/></to>
    </wire>
    <wire loc="310:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6e082a8"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6b2e998"/></to>
    </wire>
    <wire loc="139:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0xb6e213c0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0xb6d16c28"/></to>
    </wire>
    <wire loc="141:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForActiveMessage" scoped="" ref="0xb6e1f298"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6d175b0"/></to>
    </wire>
    <wire loc="136:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb6e25c58"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb6d17ce0"/></to>
    </wire>
    <wire loc="138:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb6e22cd0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6d16868"/></to>
    </wire>
    <wire loc="98:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6e327f0"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6e0f0f0"/></to>
    </wire>
    <wire loc="343:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6e0f0f0"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6ad56f8"/></to>
    </wire>
    <wire loc="255:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0xb6e17898"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0xb6be6ce0"/></to>
    </wire>
    <wire loc="137:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6e22638"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6d16488"/></to>
    </wire>
    <wire loc="309:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6e0b7c8"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6afd180"/></to>
    </wire>
    <wire loc="102:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6e2c1e0"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6e0cc20"/></to>
    </wire>
    <wire loc="347:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6e0cc20"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6ace950"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6e30410"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6e12cf0"/></to>
    </wire>
    <wire loc="344:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6e12cf0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6acf208"/></to>
    </wire>
    <wire loc="288:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6e17310"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6b61628"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="ReceiveDefault" scoped="" ref="0xb6e39bb0"/></from>
      <to><interface-ref name="ReceiveDefault" scoped="" ref="0xb6e21ac0"/></to>
    </wire>
    <wire loc="143:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="ReceiveDefault" scoped="" ref="0xb6e21ac0"/></from>
      <to><interface-ref name="ReceiveDefault" scoped="" ref="0xb6d14030"/></to>
    </wire>
    <wire loc="226:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0xb6e17eb8"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0xb6bf2010"/></to>
    </wire>
    <wire loc="140:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb6e20568"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6d18940"/></to>
    </wire>
    <wire loc="264:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0xb6e12600"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0xb6bd4b40"/></to>
    </wire>
    <wire loc="346:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6e0c728"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6ace458"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SnoopDefault" scoped="" ref="0xb6e372a8"/></from>
      <to><interface-ref name="SnoopDefault" scoped="" ref="0xb6e201f8"/></to>
    </wire>
    <wire loc="144:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SnoopDefault" scoped="" ref="0xb6e201f8"/></from>
      <to><interface-ref name="SnoopDefault" scoped="" ref="0xb6d14410"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6be7728"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0xb6bda360"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0xb6ad4a58"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0xb6abeb98"/></to>
    </wire>
    <wire loc="175:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Notifier" scoped="" ref="0xb6e1e778"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0xb6ccfce8"/></to>
    </wire>
    <wire loc="163:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendResource" scoped="" ref="0xb6e1ee88"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6d03d40"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6d03d40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6086180"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0xb6d16c28"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0xb60b8298"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb6d17ce0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb60b93a8"/></to>
    </wire>
    <wire loc="69:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb6d16868"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb60b9ec8"/></to>
    </wire>
    <wire loc="176:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0xb6e18010"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0xb6c36f10"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0xb6c36f10"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0xb604b4f0"/></to>
    </wire>
    <wire loc="177:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForIeee154Message" scoped="" ref="0xb6e18b70"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6cd0c68"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6ad56f8"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6abf838"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0xb6be6ce0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0xb6009b68"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6d175b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb60bac18"/></to>
    </wire>
    <wire loc="68:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6d16488"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb60b9ae8"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6afd180"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb5fb4688"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6ace950"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6a2bb48"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6acf208"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6ab93d8"/></to>
    </wire>
    <wire loc="173:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Send" scoped="" ref="0xb6e19ab8"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0xb6ccf318"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="ReceiveDefault" scoped="" ref="0xb6d14030"/></from>
      <to><interface-ref name="ReceiveDefault" scoped="" ref="0xb60b8678"/></to>
    </wire>
    <wire loc="117:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0xb6bf2010"/></from>
      <to><interface-ref name="UnconnectedPacketLink" scoped="" ref="0xb6beb390"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0xb6bd4b40"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0xb6000040"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb6d18940"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb60ba040"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6b2e998"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb5fb9e88"/></to>
    </wire>
    <wire loc="174:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Receive" scoped="" ref="0xb6e1e328"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0xb6ccf9d0"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6ace458"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6ab8680"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SnoopDefault" scoped="" ref="0xb6d14410"/></from>
      <to><interface-ref name="SnoopDefault" scoped="" ref="0xb60b8a58"/></to>
    </wire>
    <wire loc="116:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6dd2d18"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6c37530"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6c37530"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb60529f0"/></to>
    </wire>
    <wire loc="117:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb6dcd270"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6d964e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="118:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6dc9d80"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6afd180"/></to>
    </wire>
    <wire loc="119:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RF230Packet" scoped="" ref="0xb6dc93b8"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6ad6c88"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6ad6c88"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6ac0e70"/></to>
    </wire>
    <wire loc="124:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb6d95410"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb6acd428"/></to>
    </wire>
    <wire loc="101:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb6acd428"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb6a2c030"/></to>
    </wire>
    <wire loc="125:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0xb6d96bb8"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0xb6dfca68"/></to>
    </wire>
    <wire loc="131:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6d13768"/></from>
      <to><interface-ref name="ActiveMessageConfig" scoped="" ref="0xb6de2500"/></to>
    </wire>
    <wire loc="132:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6d14f20"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0xb6d0e538"/></to>
    </wire>
    <wire loc="133:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6d13430"/></from>
      <to><interface-ref name="TinyosReceive" scoped="" ref="0xb6c90528"/></to>
    </wire>
    <wire loc="134:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6d14788"/></from>
      <to><interface-ref name="TinyosPacket" scoped="" ref="0xb6c90860"/></to>
    </wire>
    <wire loc="152:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6d05010"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6d03d40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6d0ea60"/></from>
      <to><interface-ref name="TinyosSend" scoped="" ref="0xb6c90030"/></to>
    </wire>
    <wire loc="168:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6cb4070"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6c37530"/></to>
    </wire>
    <wire loc="169:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6cb2250"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0xb6cad050"/></to>
    </wire>
    <wire loc="170:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6cb2748"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0xb6cad548"/></to>
    </wire>
    <wire loc="171:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6cb3a30"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0xb6cad880"/></to>
    </wire>
    <wire loc="185:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6c8f050"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6c31d18"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6c31d18"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6020b18"/></to>
    </wire>
    <wire loc="186:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6c8f548"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6c34170"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6c34170"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb604a6b0"/></to>
    </wire>
    <wire loc="187:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6c8f880"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6c35948"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6c35948"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb604bf08"/></to>
    </wire>
    <wire loc="193:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6c344d8"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6bf26a8"/></to>
    </wire>
    <wire loc="115:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6bf26a8"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6bec6c8"/></to>
    </wire>
    <wire loc="197:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6c34c70"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6bf3c58"/></to>
    </wire>
    <wire loc="114:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6bf3c58"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6bec390"/></to>
    </wire>
    <wire loc="220:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6bf5010"/></from>
      <to><interface-ref name="UniqueConfig" scoped="" ref="0xb6dee410"/></to>
    </wire>
    <wire loc="221:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6c30678"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6bf3760"/></to>
    </wire>
    <wire loc="113:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6bf3760"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6bf2e70"/></to>
    </wire>
    <wire loc="230:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6bece40"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6b61628"/></to>
    </wire>
    <wire loc="232:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6bf2e70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6be7d00"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6be7d00"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6bda938"/></to>
    </wire>
    <wire loc="233:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6bec390"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6be6250"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6be6250"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6bdae30"/></to>
    </wire>
    <wire loc="234:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6bec6c8"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6be6568"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6be6568"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6bd81b0"/></to>
    </wire>
    <wire loc="250:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0xb6bda360"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6bd5d20"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6bd5d20"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6004ee0"/></to>
    </wire>
    <wire loc="251:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6bda938"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6bd4330"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6bd4330"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6001818"/></to>
    </wire>
    <wire loc="252:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6bdae30"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6bd4828"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6bd4828"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6001d10"/></to>
    </wire>
    <wire loc="253:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6bd81b0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6afc7f0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6afc7f0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb5fb3d10"/></to>
    </wire>
    <wire loc="260:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0xb6b98da0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6b93010"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0xb6b93010"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb5fe2b78"/></to>
    </wire>
    <wire loc="261:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb6b97310"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6c30230"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb6c30230"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb601d010"/></to>
    </wire>
    <wire loc="262:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0xb6b98628"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0xb6ae1220"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0xb6ae1220"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0xb6add010"/></to>
    </wire>
    <wire loc="263:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0xb6b98070"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0xb6dfca68"/></to>
    </wire>
    <wire loc="268:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6c30b70"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6b934e8"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb6b934e8"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb5fdf070"/></to>
    </wire>
    <wire loc="277:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6b72928"/></from>
      <to><interface-ref name="RandomCollisionConfig" scoped="" ref="0xb6de9198"/></to>
    </wire>
    <wire loc="278:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6b93930"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6b62cf8"/></to>
    </wire>
    <wire loc="279:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6b93e28"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6b61230"/></to>
    </wire>
    <wire loc="280:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb6b72270"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6d964e0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="286:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AckReceivedFlag" scoped="" ref="0xb6b474f0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0xb6ae3eb8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="287:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb6b48458"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6d964e0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6b48b10"/></from>
      <to><interface-ref name="SoftwareAckConfig" scoped="" ref="0xb6df2cf8"/></to>
    </wire>
    <wire loc="293:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6b61b50"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6b38de0"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0xb6b38de0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6b35cc8"/></to>
    </wire>
    <wire loc="294:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6b48060"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6b37310"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb6b37310"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6b33250"/></to>
    </wire>
    <wire loc="299:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6b32250"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0xb6de0478"/></to>
    </wire>
    <wire loc="300:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6b35cc8"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6ae1998"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0xb6ae1998"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6add828"/></to>
    </wire>
    <wire loc="301:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6b33250"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6ae1e70"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb6ae1e70"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6addd20"/></to>
    </wire>
    <wire loc="302:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioCCA" scoped="" ref="0xb6b33668"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0xb6ad6820"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0xb6ad6820"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0xb6ac0a08"/></to>
    </wire>
    <wire loc="307:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6afa078"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6ace950"/></to>
    </wire>
    <wire loc="308:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6afa8f0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6af64a0"/></to>
    </wire>
    <wire loc="311:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0xb6af9098"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0xb6ae3eb8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6af6c68"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6ad6c88"/></to>
    </wire>
    <wire loc="326:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6adcd20"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0xb6de0478"/></to>
    </wire>
    <wire loc="327:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6add828"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6ad9e30"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0xb6ad9e30"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6ac0060"/></to>
    </wire>
    <wire loc="328:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6addd20"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6ad63d0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb6ad63d0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6ac05b8"/></to>
    </wire>
    <wire loc="329:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubState" scoped="" ref="0xb6add010"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0xb6ad9658"/></to>
    </wire>
    <wire loc="76:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0xb6ad9658"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0xb6ac1858"/></to>
    </wire>
    <wire loc="341:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6acbec0"/></from>
      <to><interface-ref name="RF230DriverConfig" scoped="" ref="0xb6df7a18"/></to>
    </wire>
    <wire loc="342:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6aca898"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6afd180"/></to>
    </wire>
    <wire loc="349:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0xb6ac70e0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0xb6ae3eb8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="350:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0xb6ac7778"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0xb6ae3eb8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="351:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0xb6ac7e38"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0xb6ae3eb8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="352:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb6ac6498"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6d964e0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="353:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0xb6ac6b78"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0xb6dfca68"/></to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb6d964e0"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb60d8f08"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb60d6718"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb6d95410"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0xb60d3070"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0xb6d96bb8"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb60b66f0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb6d25428"/></to>
    </wire>
    <wire loc="75:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb60b8dd0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6d14788"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb60b75d0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6d14f20"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb60b7ac8"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6d13430"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb60b7e00"/></from>
      <to><interface-ref name="Config" scoped="" ref="0xb6d13768"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0xb6d02490"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0xb60868c0"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb6d02898"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb6086cc8"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb6085218"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb6d02d48"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0xb6085640"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0xb6087170"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0xb6085c38"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb604a9f8"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb6d25428"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6049010"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6c344d8"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb60497a8"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6c34c70"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0xb601b630"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0xb6c11010"/></to>
    </wire>
    <wire loc="44:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0xb6c11010"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0xb6c0e010"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb601bcc8"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb60191b0"/></to>
    </wire>
    <wire loc="45:../../tos/lib/rfxlink/util/NeighborhoodFlagC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb60191b0"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb6c0ea38"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb601d770"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6c30678"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb601dc68"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6c30b70"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="UniqueConfig" scoped="" ref="0xb601b078"/></from>
      <to><interface-ref name="Config" scoped="" ref="0xb6bf5010"/></to>
    </wire>
    <wire loc="118:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0xb6beba68"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6bece40"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0xb6000cc0"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0xb6b98070"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0xb6000548"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0xb6b98628"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0xb5ffe310"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6b98da0"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb5ffe7e8"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6b97310"/></to>
    </wire>
    <wire loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0xb5ffd080"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="stateDoneTask" scoped="" ref="0xb5ffd4b8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="deliverTask" scoped="" ref="0xb5ffec20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb5fdf4b8"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6b93930"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb5fde8e8"/></from>
      <to><interface-ref name="Config" scoped="" ref="0xb6b72928"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb5fdf9b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6b93e28"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb5fdfda8"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6b72270"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Random" scoped="" ref="0xb5fde4d0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0xb6b71478"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <from><interface-ref name="calcNextRandom" scoped="" ref="0xb5fdeee0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0xb6b6fb58"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0xb6b6c608"/></to>
    </wire>
    <wire loc="54:../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb6b74900"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6b6c0e8"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6b428a0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0xb6b36698"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0xb6b37708"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0xb6b33668"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0xb6b38668"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0xb6b354b0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6b37b00"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6b33a80"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0xb6b36330"/></from>
      <to><interface-ref name="Config" scoped="" ref="0xb6b32250"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0xb6b38350"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0xb6b35178"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0xb6b42e58"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0xb6b36c70"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb5fb0d38"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6afa8f0"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0xb5fb1b88"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6afa078"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0xb5fb04c0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0xb6b035c8"/></to>
    </wire>
    <wire loc="26:../../tos/system/LocalTimeMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0xb6b035c8"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0xb713eda8"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0xb5fb1520"/></from>
      <to><interface-ref name="TimeStampFlag" scoped="" ref="0xb6af9098"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6ae2450"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0xb6adf1a0"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0xb6ae0290"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0xb6adc170"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6ae0688"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6adc588"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0xb6ae0e20"/></from>
      <to><interface-ref name="Config" scoped="" ref="0xb6adcd20"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0xb6ae2ee0"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0xb6adfc70"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0xb6ae2a08"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0xb6adf778"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb6a2c030"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb693e670"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0xb6ad2e28"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0xb6abb010"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6a2bb48"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0xb690b010"/></to>
    </wire>
    <wire loc="84:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6ab0978"/></from>
      <to><interface-ref name="Config" scoped="" ref="0xb6acbec0"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0xb6aad198"/></from>
      <to><interface-ref name="TransmitPowerFlag" scoped="" ref="0xb6ac70e0"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0xb6aad830"/></from>
      <to><interface-ref name="RSSIFlag" scoped="" ref="0xb6ac7778"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0xb6aadef0"/></from>
      <to><interface-ref name="TimeSyncFlag" scoped="" ref="0xb6ac7e38"/></to>
    </wire>
    <wire loc="96:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6aac710"/></from>
      <to><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6aca898"/></to>
    </wire>
    <wire loc="99:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0xb6ab0010"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6a2bb48"/></to>
    </wire>
    <wire loc="102:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb6aaa630"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6ac6498"/></to>
    </wire>
    <wire loc="104:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SELN" scoped="" ref="0xb6ab8a98"/></from>
      <to><interface-ref name="SELN" scoped="" ref="0xb6a33af8"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SELN" scoped="" ref="0xb6a33af8"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0xb72f8750"/></to>
    </wire>
    <wire loc="105:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0xb6ab75b8"/></from>
      <to><interface-ref name="SpiResource" scoped="" ref="0xb6a305b8"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0xb6a305b8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6a16588"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0xb6ab2b40"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0xb6a30cc0"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0xb6a30cc0"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0xb6a145f0"/></to>
    </wire>
    <wire loc="108:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0xb6ab6210"/></from>
      <to><interface-ref name="SLP_TR" scoped="" ref="0xb6a2f3d0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0xb6a2f3d0"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0xb72f3010"/></to>
    </wire>
    <wire loc="109:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0xb6ab6bf8"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0xb6a2fdb8"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0xb6a2fdb8"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0xb72f92f0"/></to>
    </wire>
    <wire loc="111:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0xb6aafd50"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0xb6a2e820"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0xb6a2e820"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0xb6a271d0"/></to>
    </wire>
    <wire loc="112:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0xb6aaa010"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0xb6ac6b78"/></to>
    </wire>
    <wire loc="113:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0xb6ab1528"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0xb6e9f010"/></to>
    </wire>
    <wire loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <from><interface-ref name="releaseSpi" scoped="" ref="0xb6a56910"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb693e670"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb5f6eac0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0xb6a145f0"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0xb6a0ed78"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0xb690b010"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0xb68e5988"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortCLKM" scoped="" ref="0xb6a25c18"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0xb72e9a98"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortIRQ" scoped="" ref="0xb6a1f678"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0xb72ea670"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0xb6a21e68"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0xb6999508"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0xb6999508"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0xb698abd8"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0xb6a11dc8"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0xb6a0c450"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0xb6a14248"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0xb6a0e9f0"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb6a285a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6a0e690"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6a16588"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb69a4e00"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb69a4e00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb5f86d38"/></to>
    </wire>
    <wire loc="99:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb69a3e20"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb6a0cbd8"/></to>
    </wire>
    <wire loc="100:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Spi" scoped="" ref="0xb69fcbc8"/></from>
      <to><interface-ref name="SpiBus" scoped="" ref="0xb6a0fd10"/></to>
    </wire>
    <wire loc="83:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SpiBus" scoped="" ref="0xb6a0fd10"/></from>
      <to><interface-ref name="SPI" scoped="" ref="0xb69ce100"/></to>
    </wire>
    <wire loc="101:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0xb6a09558"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0xb73283d0"/></to>
    </wire>
    <wire loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <from><interface-ref name="zeroTask" scoped="" ref="0xb69e51e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="Mcu" scoped="" ref="0xb69ca758"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0xb73283d0"/></to>
    </wire>
    <wire loc="86:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SS" scoped="" ref="0xb69cdea8"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0xb72f8750"/></to>
    </wire>
    <wire loc="87:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SCK" scoped="" ref="0xb69cc8c0"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0xb72f7210"/></to>
    </wire>
    <wire loc="88:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MOSI" scoped="" ref="0xb69cb2e0"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0xb72f7c08"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MISO" scoped="" ref="0xb69cbcc8"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0xb72f6670"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0xb69a3568"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0xb5f85490"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb69a3970"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb5f85898"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb5f85d58"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb69a3e20"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0xb5f84250"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0xb5f89c80"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0xb5f84848"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0xb69947f8"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0xb698be98"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb69a0ec0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb6990bb8"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb6992720"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0xb6987aa0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb6992720"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0xb69856d8"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb6992720"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0xb6982340"/></to>
    </wire>
    <wire loc="43:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0xb5f6c548"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb69a0ec0"/></to>
    </wire>
    <wire loc="44:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0xb5f697e8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0xb6992720"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb6937698"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb69a0ec0"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb68e3360"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb68f7908"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0xb68e7b40"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb6908128"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb6908128"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb6906890"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb6905a58"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb69a0ec0"/></to>
    </wire>
    <wire loc="234:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0xb67f0430"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="45:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
      <from><interface-ref name="CtpPacket" scoped="" ref="0xb5ece818"/></from>
      <to><interface-ref name="CtpPacket" scoped="" ref="0xb6e66450"/></to>
    </wire>
    <wire loc="63:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb5eb99e8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb5eaf060"/></to>
    </wire>
    <wire loc="64:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb5eb6150"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e53890"/></to>
    </wire>
    <wire loc="65:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb5eb67e8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6e56010"/></to>
    </wire>
    <wire loc="66:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0xb5eb5410"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6e4e248"/></to>
    </wire>
    <wire loc="60:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb5eaf728"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6710da0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb5eafdc0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6e56010"/></to>
    </wire>
    <wire loc="53:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6710da0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb670bbe0"/></to>
    </wire>
    <wire loc="54:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb66e43d8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb6e5cc90"/></to>
    </wire>
    <wire loc="55:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb66e4a80"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6e56010"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb66e3690"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e53890"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0xb66e3d68"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0xb66e1270"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb66d7348"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e53890"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb66d79e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6e56010"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMSnooperC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb66d1d40"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e53890"/></to>
    </wire>
    <wire loc="57:../../tos/system/AMSnooperC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb66d03f0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6e56010"/></to>
    </wire>
    <wire loc="269:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <from><interface-ref name="updateRouteTask" scoped="" ref="0xb662d9c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="388:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <from><interface-ref name="sendBeaconTask" scoped="" ref="0xb662d588"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb5e43cf0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb5e3a3d0"/></to>
    </wire>
    <wire loc="64:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb5e403f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e53890"/></to>
    </wire>
    <wire loc="65:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb5e40a88"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6e56010"/></to>
    </wire>
    <wire loc="67:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0xb6620b30"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0xb5e3f6b0"/></to>
    </wire>
    <wire loc="66:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0xb5e3f6b0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6e4e248"/></to>
    </wire>
    <wire loc="60:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb5e3aa98"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6710da0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb5e38150"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6e56010"/></to>
    </wire>
    <wire loc="55:../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb661e510"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e53890"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb661eba8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6e56010"/></to>
    </wire>
    <wire loc="52:../../tos/lib/net/ctp/CollectionSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb660ad40"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb5e2bd48"/></to>
    </wire>
    <wire loc="47:../../tos/lib/net/ctp/CollectionSenderP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb5e2bd48"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e86ce8"/></to>
    </wire>
    <wire loc="46:../../tos/lib/net/ctp/CollectionSenderP.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb5e2b6b0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6e91e38"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="48:../../tos/lib/net/ctp/CollectionSenderP.nc">
      <from><interface-ref name="CollectionId" scoped="" ref="0xb6e6f780"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CollectionId" scoped="" ref="0xb5e29e10"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb65c11d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb65a9280"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb65fc750"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb65f7108"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb65fb478"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb65f6770"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb65fb120"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb65f7848"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb65f9850"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb65f6e08"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb65fbb68"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb65f7b70"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb65c4df0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb65abec0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb65bbca8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb65f9d88"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb65c5360"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb65c0100"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb65c5a18"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb65c1a90"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0xb65bb7a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0xb63ec808"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb65c0100"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb64fdc60"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb65c1a90"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb64fd8a0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0xb64fc400"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0xb65bb7a0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb65a4500"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb65bbca8"/></to>
    </wire>
    <wire loc="71:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb64fb3f0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb65bbca8"/></to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb64f5420"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb65bbca8"/></to>
    </wire>
    <wire loc="74:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0xb64fc8e8"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0xb65a3a80"/></to>
    </wire>
    <wire loc="75:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0xb64fcdc0"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0xb65a5960"/></to>
    </wire>
    <wire loc="77:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0xb659fc10"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0xb64f9858"/></to>
    </wire>
    <wire loc="78:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0xb65a2260"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb64f83e0"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb64f83e0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb64db168"/></to>
    </wire>
    <wire loc="80:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0xb64efb80"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0xb64f8860"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0xb64f8860"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0xb64dba58"/></to>
    </wire>
    <wire loc="332:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0xb656f1e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0xb658f518"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0xb6571970"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0xb656ee08"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0xb64fa030"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0xb64fa468"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0xb64dc6e8"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0xb64db5d8"/></to>
    </wire>
    <wire loc="51:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0xb64db5d8"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0xb64d7e28"/></to>
    </wire>
    <wire loc="52:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0xb64dba58"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0xb64d6290"/></to>
    </wire>
    <wire loc="50:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb64db168"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb64d7a10"/></to>
    </wire>
    <wire loc="53:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb64da530"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb64dd868"/></to>
    </wire>
    <wire loc="33:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb64dd868"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb645bc80"/></to>
    </wire>
    <wire loc="53:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb64af0a0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb64da530"/></to>
    </wire>
    <wire loc="56:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0xb64d6b28"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0xb649ca80"/></to>
    </wire>
    <wire loc="60:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0xb649ca80"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0xb6496288"/></to>
    </wire>
    <wire loc="57:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0xb64b0010"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0xb649b010"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0xb649b010"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0xb64967b8"/></to>
    </wire>
    <wire loc="58:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0xb64b0448"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0xb649b508"/></to>
    </wire>
    <wire loc="62:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0xb649b508"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0xb6496cd0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0xb649ab80"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0xb6494880"/></to>
    </wire>
    <wire loc="64:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0xb649a178"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0xb6495d70"/></to>
    </wire>
    <wire loc="65:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0xb649a688"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0xb6494368"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0xb64934a8"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0xb730c268"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0xb6493be8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0xb73283d0"/></to>
    </wire>
    <wire loc="34:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0xb63f0ec8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb645a3c0"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb645a3c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb63fcca8"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb63fbe58"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb6459d10"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb6459d10"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb6449348"/></to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0xb6452010"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0xb6447648"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0xb6452d00"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0xb6446350"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb644fec0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0xb6443268"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb644fec0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0xb6442e60"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb644fec0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0xb643fa78"/></to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb63faa58"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb6459d10"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb63e2df8"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb65fb478"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0xb63d1170"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb65f9850"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb5dc7180"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb63dc6d8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb5dc7818"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb65fbb68"/></to>
    </wire>
    <wire loc="54:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb63dc6d8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb63d9db8"/></to>
    </wire>
    <wire loc="55:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb63d8598"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb65fc750"/></to>
    </wire>
    <wire loc="56:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb63d8c40"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb65fbb68"/></to>
    </wire>
    <wire loc="57:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb63d7850"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb65fb478"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0xb63d7f28"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0xb63d6370"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb63bf150"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb65fb478"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb63bf7e8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb65fbb68"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0xb63be410"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb65f9850"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb5d7e560"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb63dc6d8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb5d7ebf8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb65fbb68"/></to>
    </wire>
    <wire loc="36:../../tos/lib/net/UARTDebugSenderP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0xb63b1640"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../tos/system/MainC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:../../tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:../../tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:../../tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:../../tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:../../tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="40:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <documentation loc="34:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G5" loc="42(HplAtm128GeneralIOC.G5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="56:../../tos/platforms/iris/MeasureClockC.nc">
      <documentation loc="47:../../tos/platforms/iris/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="82:../../tos/chips/atm1281/McuSleepC.nc" safe="">
      <documentation loc="67:../../tos/chips/atm1281/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.6 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @date   October 30, 2007&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeC" loc="23:MultihopOscilloscopeC.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../tos/system/LedsC.nc">
      <documentation loc="34:../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="42:../../tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.TimerMilliC" loc="44(MultihopOscilloscopeAppC.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:../../tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:../../tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC):../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP):../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm1281AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0xb712c390"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm1281Timer2AsyncC" loc="77:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer2AsyncP" loc="78:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc" safe="">
      <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
        <short>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 2 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.Sensor" loc="18(MultihopOscilloscopeAppC.Sensor):../../tos/sensorboards/mts300/AccelXC.nc">
      <documentation loc="32:../../tos/sensorboards/mts300/mts300.h">
        <short>&#10; &#10; </short>
        <long>&#10; &#10; @author Hu Siquan &#60;husq@xbow.com>&#10; Revision: $Revision: 1.6 $&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AccelXC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AccelReadP" loc="1:../../tos/sensorboards/mts300/AccelReadP.nc">
      <configuration/>
    </component>
    <component qname="AccelConfigP" loc="17:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <documentation loc="10:../../tos/sensorboards/mts300/AccelConfigP.nc">
        <short>&#10; Internal component for basicsb photodiode.</short>
        <long>&#10; Internal component for basicsb photodiode. Arbitrates access to the photo&#10; diode and automatically turns it on or off based on user requests.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AccelP" loc="14:../../tos/sensorboards/mts300/AccelP.nc">
      <documentation loc="10:../../tos/sensorboards/mts300/AccelP.nc">
        <short>&#10; ADXL202JE accelerometer ADC configuration and power management.</short>
        <long>&#10; ADXL202JE accelerometer ADC configuration and power management.&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MicaBusC" loc="18:../../tos/platforms/mica/MicaBusC.nc">
      <documentation loc="11:../../tos/platforms/mica/MicaBusC.nc">
        <short>&#10; A simplistic beginning to providing a standard interface to the&#10; mica-family 51-pin bus.</short>
        <long>&#10; A simplistic beginning to providing a standard interface to the&#10; mica-family 51-pin bus. Just provides the PW0-PW7 and Int0-3 digital&#10; I/O pins and returns the ADC channel number for the ADC pins.&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MicaBusP" loc="16:../../tos/platforms/mica/MicaBusP.nc">
      <documentation loc="11:../../tos/platforms/mica/MicaBusP.nc">
        <short>&#10; Internal component of the simplistic mica bus interface.</short>
        <long>&#10; Internal component of the simplistic mica bus interface.&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC" loc="41:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <documentation loc="36:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
        <short>&#10; Component providing access to all external interrupt pins on ATmega128.</short>
        <long>&#10; Component providing access to all external interrupt pins on ATmega128.&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128InterruptSigP" loc="41:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10; Exposes just the interrupt vector routine for &#10; easy linking to generic components.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin0" loc="39(HplAtm128InterruptC.IntPin0):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:105">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin1" loc="39(HplAtm128InterruptC.IntPin1):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:105">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin2" loc="39(HplAtm128InterruptC.IntPin2):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:105">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin3" loc="39(HplAtm128InterruptC.IntPin3):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:105">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin4" loc="39(HplAtm128InterruptC.IntPin4):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin5" loc="39(HplAtm128InterruptC.IntPin5):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin6" loc="39(HplAtm128InterruptC.IntPin6):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin7" loc="39(HplAtm128InterruptC.IntPin7):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MicaBusC.Atm128GpioInterrupt0C" loc="6(MicaBusC.Atm128GpioInterrupt0C):../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <documentation loc="3:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128GpioInterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="MicaBusC.Atm128GpioInterrupt1C" loc="6(MicaBusC.Atm128GpioInterrupt1C):../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <documentation loc="3:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128GpioInterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="MicaBusC.Atm128GpioInterrupt2C" loc="6(MicaBusC.Atm128GpioInterrupt2C):../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <documentation loc="3:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Atm128GpioInterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="MicaBusC.Atm128GpioInterrupt3C" loc="6(MicaBusC.Atm128GpioInterrupt3C):../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <documentation loc="3:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Atm128GpioInterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="AccelConfigP.WarmupTimer" loc="44(AccelConfigP.WarmupTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AccelConfigP.Arbiter" loc="89(AccelConfigP.Arbiter):../../tos/system/RoundRobinArbiterC.nc">
      <documentation loc="69:../../tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:mts300.accel">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AccelConfigP.Arbiter.Queue" loc="42(AccelConfigP.Arbiter.Queue):../../tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AccelConfigP.Arbiter.Arbiter" loc="52(AccelConfigP.Arbiter.Arbiter):../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AccelConfigP.PowerManager" loc="67(AccelConfigP.PowerManager):../../tos/lib/power/SplitControlPowerManagerC.nc">
      <documentation loc="41:../../tos/lib/power/SplitControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.  Non-virtualized devices are shared&#10; using a parameterized Resource interface, and are powered down according&#10; to some policy whenever there are no more pending requests to that Resource.&#10; The policy implemented by this component is to delay the power down of a&#10; device by some contant factor.  Such a policy is useful whenever a device&#10; has a long wake-up latency.  The cost of waiting for the device to power&#10; up can be avoided if the device is requested again before some predetermined&#10; amount of time.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>SplitControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>AsyncStdControl&#60;/code> or&#10; &#60;code>StdControl&#60;/code> interfaces, please use either the&#10; &#60;code>AsyncStdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SplitControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AccelConfigP.PowerManager.PowerManager" loc="58(AccelConfigP.PowerManager.PowerManager):../../tos/lib/power/PowerManagerP.nc">
      <documentation loc="41:../../tos/lib/power/PowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AccelReadP.MultiplexX" loc="23(AccelReadP.MultiplexX):../../tos/system/ArbitratedReadC.nc">
      <documentation loc="10:../../tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AccelReadP.MultiplexY" loc="23(AccelReadP.MultiplexY):../../tos/system/ArbitratedReadC.nc">
      <documentation loc="10:../../tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.Sensor.AdcX" loc="21(MultihopOscilloscopeAppC.Sensor.AdcX):../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <documentation loc="10:../../tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="17:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <documentation loc="10:../../tos/chips/atm1281/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="51:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="44:../../tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="51:../../tos/chips/atm1281/adc/Atm128AdcP.nc" safe="">
      <documentation loc="40:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega1281 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega1281 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="44:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="36:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="47:../../tos/chips/atm1281/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="38:../../tos/chips/atm1281/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega1281 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega1281 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="89(Atm128AdcC.AdcArbiter):../../tos/system/RoundRobinArbiterC.nc">
      <documentation loc="69:../../tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="42(Atm128AdcC.AdcArbiter.Queue):../../tos/system/RoundRobinResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="67(Atm128AdcC.PM):../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="58(Atm128AdcC.PM.PowerManager):../../tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:../../tos/chips/atm1281/adc/AdcP.nc" safe="">
      <documentation loc="39:../../tos/chips/atm1281/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="34:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):../../tos/system/ArbitratedReadC.nc">
      <documentation loc="10:../../tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CollectionC" loc="45:../../tos/lib/net/ctp/CollectionC.nc">
      <documentation loc="34:../../tos/lib/net/ctp/CollectionC.nc">
        <short>&#10; A data collection service that uses a tree routing protocol&#10; to deliver data to collection roots, following TEP 119.</short>
        <long>&#10; A data collection service that uses a tree routing protocol&#10; to deliver data to collection roots, following TEP 119.&#10;&#10; @author Rodrigo Fonseca&#10; @author Omprakash Gnawali&#10; @author Kyle Jamieson&#10; @author Philip Levis&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CtpP" loc="77:../../tos/lib/net/ctp/CtpP.nc">
      <documentation loc="66:../../tos/lib/net/ctp/CtpP.nc">
        <short>&#10; A data collection service that uses a tree routing protocol&#10; to deliver data to collection roots, following TEP 119.</short>
        <long>&#10; A data collection service that uses a tree routing protocol&#10; to deliver data to collection roots, following TEP 119.&#10;&#10; @author Rodrigo Fonseca&#10; @author Omprakash Gnawali&#10; @author Kyle Jamieson&#10; @author Philip Levis&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="ActiveMessageC" loc="37:../../tos/platforms/iris/ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230ActiveMessageC" loc="41:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC" loc="37:../../tos/chips/rf230/RF230RadioC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC.TaskletC" loc="42(RF230RadioC.TaskletC):../../tos/lib/rfxlink/util/TaskletC.nc">
      <instance number="0">
        <component-ref qname="TaskletC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioP" loc="39:../../tos/chips/rf230/RF230RadioP.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC" loc="37(RF230RadioC.RadioAlarmC):../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC.RadioAlarmP" loc="50(RF230RadioC.RadioAlarmC.RadioAlarmP):../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC" loc="35(RF230RadioC.ActiveMessageLayerC):../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP" loc="38(RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP):../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.AutoResourceAcquireLayerC" loc="35(RF230RadioC.AutoResourceAcquireLayerC):../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <instance number="0">
        <component-ref qname="AutoResourceAcquireLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC" loc="83(RF230RadioC.SendResourceC):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:RADIO_SEND_RESOURCE">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Queue" loc="42(RF230RadioC.SendResourceC.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <documentation loc="33:../../tos/system/FcfsResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Arbiter" loc="49(RF230RadioC.SendResourceC.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154MessageLayerC" loc="35(RF230RadioC.Ieee154MessageLayerC):../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154MessageLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TinyosNetworkLayerC" loc="50(RF230RadioC.TinyosNetworkLayerC):../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <instance number="0">
        <component-ref qname="TinyosNetworkLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC" loc="35(RF230RadioC.Ieee154PacketLayerC):../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP" loc="37(RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP):../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC" loc="35(RF230RadioC.UniqueLayerC):../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC.UniqueLayerP" loc="38(RF230RadioC.UniqueLayerC.UniqueLayerP):../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="NeighborhoodC" loc="35:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <configuration/>
    </component>
    <component qname="NeighborhoodP" loc="37:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC.NeighborhoodFlagC" loc="35(RF230RadioC.UniqueLayerC.NeighborhoodFlagC):../../tos/lib/rfxlink/util/NeighborhoodFlagC.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodFlagC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.PacketLinkLayerC" loc="73(RF230RadioC.PacketLinkLayerC):../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketLinkLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC" loc="35(RF230RadioC.LowPowerListeningLayerC):../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP" loc="35(RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP):../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC" loc="35(RF230RadioC.MessageBufferLayerC):../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP" loc="39(RF230RadioC.MessageBufferLayerC.MessageBufferLayerP):../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC" loc="35(RF230RadioC.CollisionAvoidanceLayerC):../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP" loc="38(RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP):../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="43:../../tos/system/RandomC.nc">
      <documentation loc="33:../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.SoftwareAckLayerC" loc="38(RF230RadioC.SoftwareAckLayerC):../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <instance number="0">
        <component-ref qname="SoftwareAckLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CsmaLayerC" loc="35(RF230RadioC.CsmaLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="0">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC" loc="37(RF230RadioC.TimeStampingLayerC):../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP" loc="38(RF230RadioC.TimeStampingLayerC.TimeStampingLayerP):../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMilliC" loc="19:../../tos/system/LocalTimeMilliC.nc">
      <documentation loc="11:../../tos/system/LocalTimeMilliC.nc">
        <short>&#10; Provide current time via the LocalTime&#60;TMilli> interface.</short>
        <long>&#10; Provide current time via the LocalTime&#60;TMilli> interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MetadataFlagsLayerC" loc="38(RF230RadioC.MetadataFlagsLayerC):../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <instance number="0">
        <component-ref qname="MetadataFlagsLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TrafficMonitorLayerC" loc="35(RF230RadioC.TrafficMonitorLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="1">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230DriverLayerC" loc="38:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <configuration/>
    </component>
    <component qname="RF230DriverLayerP" loc="42:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <module/>
    </component>
    <component qname="HplRF230C" loc="37:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <configuration/>
    </component>
    <component qname="HplRF230P" loc="35:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <module/>
    </component>
    <component qname="Atm128SpiC" loc="80:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <documentation loc="66:../../tos/chips/atm128/spi/Atm128SpiC.nc">
        <short>&#10; The HAL of the SPI bus on the atm128.</short>
        <long>&#10; The HAL of the SPI bus on the atm128.&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiC.nc,v 1.7 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10; @author Joe Polastre&#10; @date   September 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128SpiP" loc="89:../../tos/chips/atm128/spi/Atm128SpiP.nc" safe="">
      <documentation loc="67:../../tos/chips/atm128/spi/Atm128SpiP.nc">
        <short>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.</short>
        <long>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.  This module assumes the bus has been reserved and&#10; checks that the bus owner is in fact the person using the bus.&#10; SpiPacket provides an asynchronous send interface where the&#10; transmit data length is equal to the receive data length, while&#10; SpiByte provides an interface for sending a single byte&#10; synchronously. SpiByte allows a component to send a few bytes&#10; in a simple fashion: if more than a handful need to be sent,&#10; SpiPacket should be used.&#10;&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiP.nc,v 1.12 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128SpiC" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
        <short>&#10; Configuration encapsulating the basic SPI HPL for the atm128.</short>
        <long>&#10; Configuration encapsulating the basic SPI HPL for the atm128.&#10;&#10; &#60;pre>&#10; $Id: HplAtm128SpiC.nc,v 1.5 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128SpiP" loc="73:../../tos/chips/atm128/spi/HplAtm128SpiP.nc" safe="">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
        <short>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.</short>
        <long>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter" loc="83(Atm128SpiC.Arbiter):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128SpiC.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Queue" loc="42(Atm128SpiC.Arbiter.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <documentation loc="33:../../tos/system/FcfsResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Arbiter" loc="49(Atm128SpiC.Arbiter.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer1C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer1P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC" loc="28(HplRF230C.AlarmC):../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="InitOneP.InitOne" loc="44(InitOneP.InitOne):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC.NAlarm" loc="51(HplRF230C.AlarmC.NAlarm):../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TOne" ref="0xb733fdb0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC" loc="37:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <configuration/>
    </component>
    <component qname="CounterOne16C" loc="22:../../tos/platforms/mica/CounterOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterOne16C.nc">
        <short>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C.NCounter" loc="42(CounterOne16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TOne" ref="0xb733fdb0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.TransformCounterC" loc="54(LocalTimeMicroC.TransformCounterC):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.CounterToLocalTimeC" loc="46(LocalTimeMicroC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.Forwarder" loc="107(CtpP.Forwarder):../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <instance number="0">
        <component-ref qname="CtpForwardingEngineP"/>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.MessagePoolP" loc="41(CtpP.MessagePoolP):../../tos/system/PoolC.nc">
      <documentation loc="33:../../tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
            <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
          </type-tag>
          <value cst="I:12">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.MessagePoolP.PoolP" loc="53(CtpP.MessagePoolP.PoolP):../../tos/system/PoolP.nc">
      <documentation loc="34:../../tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0xb67eb3d8"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.QEntryPoolP" loc="41(CtpP.QEntryPoolP):../../tos/system/PoolC.nc">
      <documentation loc="33:../../tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb68b13a0"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0xb68b1628"/></typename>
          </type-tag>
          <value cst="I:12">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.QEntryPoolP.PoolP" loc="53(CtpP.QEntryPoolP.PoolP):../../tos/system/PoolP.nc">
      <documentation loc="34:../../tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0xb67eb3d8"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.SendQueueP" loc="42(CtpP.SendQueueP):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb68b13a0"/>
              <typename><typedef-ref name="fe_queue_entry_t" ref="0xb68b1628"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:13">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.SentCacheP" loc="38(CtpP.SentCacheP):../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
      <documentation loc="32:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
        <short>&#10; An LRU cache CTP packet instances, where insertion represents use.</short>
        <long>&#10; An LRU cache CTP packet instances, where insertion represents use.&#10;&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="LruCtpMsgCacheC"/>
        <arguments>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.SentCacheP.CacheP" loc="43(CtpP.SentCacheP.CacheP):../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
      <documentation loc="32:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
        <short>&#10; An LRU cache that stores the signature of a CTP packet instance.</short>
        <long>&#10; An LRU cache that stores the signature of a CTP packet instance.&#10; An insert operation indicates &#34;use&#34;.  Inserting an element not in&#10; the cache will replace the oldest, and inserting an element already&#10; in the cache will refresh its age.&#10;&#10; @author Philip Levis &#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="LruCtpMsgCacheP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.RoutingBeaconTimer" loc="44(CtpP.RoutingBeaconTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.RouteUpdateTimer" loc="44(CtpP.RouteUpdateTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="LinkEstimatorP" loc="42:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <module/>
    </component>
    <component qname="CtpP.AMSenderC" loc="47(CtpP.AMSenderC):../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:113">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.AMSenderC.SenderC" loc="47(CtpP.AMSenderC.SenderC):../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.AMSenderC.SenderC.AMQueueEntryP" loc="43(CtpP.AMSenderC.SenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.AMReceiverC" loc="43(CtpP.AMReceiverC):../../tos/system/AMReceiverC.nc">
      <documentation loc="33:../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:113">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.AMSnooperC" loc="44(CtpP.AMSnooperC):../../tos/system/AMSnooperC.nc">
      <documentation loc="33:../../tos/system/AMSnooperC.nc">
        <short>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node.</short>
        <long>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node. &#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSnooperC"/>
        <arguments>
          <value cst="I:113">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.Router" loc="107(CtpP.Router):../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <documentation loc="38:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
        <short> &#10;  The TreeRoutingEngine is responsible for computing the routes for&#10;  collection.</short>
        <long> &#10;  The TreeRoutingEngine is responsible for computing the routes for&#10;  collection.  It builds a set of trees rooted at specific nodes (roots) and&#10;  maintains these trees using information provided by the link estimator on&#10;  the quality of one hop links.&#10; &#10;  &#60;p>Each node is part of only one tree at any given time, but there is no&#10;  difference from the node's point of view of which tree it is part. In other&#10;  words, a message is sent towards &#60;i>a&#60;/i> root, but which one is not&#10;  specified. It is assumed that the roots will work together to have all data&#10;  aggregated later if need be.  The tree routing engine's responsibility is&#10;  for each node to find the path with the least number of transmissions to&#10;  any one root.&#10;&#10;  &#60;p>The tree is proactively maintained by periodic beacons sent by each&#10;  node. These beacons are jittered in time to prevent synchronizations in the&#10;  network. All nodes maintain the same &#60;i>average&#60;/i> beacon sending rate&#10;  (defined by BEACON_INTERVAL +- 50%). The beacon contains the node's parent,&#10;  the current hopcount, and the cumulative path quality metric. The metric is&#10;  defined as the parent's metric plus the bidirectional quality of the link&#10;  between the current node and its parent.  The metric represents the&#10;  expected number of transmissions along the path to the root, and is 0 by&#10;  definition at the root.&#10; &#10;  &#60;p>Every time a node receives an update from a neighbor it records the&#10;  information if the node is part of the neighbor table. The neighbor table&#10;  keeps the best candidates for being parents i.e., the nodes with the best&#10;  path metric. The neighbor table does not store the full path metric,&#10;  though. It stores the parent's path metric, and the link quality to the&#10;  parent is only added when the information is needed: (i) when choosing a&#10;  parent and (ii) when choosing a route. The nodes in the neighbor table are&#10;  a subset of the nodes in the link estimator table, as a node is not&#10;  admitted in the neighbor table with an estimate of infinity.&#10; &#10;  &#60;p>There are two uses for the neighbor table, as mentioned above. The first&#10;  one is to select a parent. The parent is just the neighbor with the best&#10;  path metric. It serves to define the node's own path metric and hopcount,&#10;  and the set of child-parent links is what defines the tree. In a sense the&#10;  tree is defined to form a coherent propagation substrate for the path&#10;  metrics. The parent is (re)-selected periodically, immediately before a&#10;  node sends its own beacon, in the updateRouteTask.&#10;  &#10;  &#60;p>The second use is to actually choose a next hop towards any root at&#10;  message forwarding time.  This need not be the current parent, even though&#10;  it is currently implemented as such.&#10;&#10;  &#60;p>The operation of the routing engine has two main tasks and one main&#10;  event: updateRouteTask is called periodically and chooses a new parent;&#10;  sendBeaconTask broadcasts the current route information to the neighbors.&#10;  The main event is the receiving of a neighbor's beacon, which updates the&#10;  neighbor table.&#10;  &#10;  &#60;p> The interface with the ForwardingEngine occurs through the nextHop()&#10;  call.&#10; &#10;  &#60;p> Any node can become a root, and routed messages from a subset of the&#10;  network will be routed towards it. The RootControl interface allows&#10;  setting, unsetting, and querying the root state of a node. By convention,&#10;  when a node is root its hopcount and metric are 0, and the parent is&#10;  itself. A root always has a valid route, to itself.&#10;&#10;  @author Rodrigo Fonseca&#10;  @author Philip Levis (added trickle-like updates)&#10;  Acknowledgment: based on MintRoute, MultiHopLQI, BVR tree construction, Berkeley's MTree&#10;                           &#10;  @date   $Date: 2010-06-29 22:07:49 $&#10;  @see Net2-WG&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CtpRoutingEngineP"/>
        <arguments>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:128">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:512000">
            <type-int cname="long" size="I:4" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.RetxmitTimer" loc="44(CtpP.RetxmitTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.SendControl" loc="47(CtpP.SendControl):../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:112">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.SendControl.SenderC" loc="47(CtpP.SendControl.SenderC):../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.SendControl.SenderC.AMQueueEntryP" loc="43(CtpP.SendControl.SenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.ReceiveControl" loc="43(CtpP.ReceiveControl):../../tos/system/AMReceiverC.nc">
      <documentation loc="33:../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:112">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.CollectionSenderC" loc="43(MultihopOscilloscopeAppC.CollectionSenderC):../../tos/lib/net/ctp/CollectionSenderC.nc">
      <documentation loc="32:../../tos/lib/net/ctp/CollectionSenderC.nc">
        <short>&#10; The virtualized collection sender abstraction.</short>
        <long>&#10; The virtualized collection sender abstraction.&#10;&#10; @author Kyle Jamieson&#10; @author Philip Levis&#10; @date April 25 2006&#10; @see TinyOS Net2-WG&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CollectionSenderC"/>
        <arguments>
          <value cst="I:147">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP" loc="34(MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP):../../tos/lib/net/ctp/CollectionSenderP.nc">
      <instance number="0">
        <component-ref qname="CollectionSenderP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP.CollectionIdP" loc="45(MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP.CollectionIdP):../../tos/lib/net/CollectionIdP.nc">
      <documentation loc="35:../../tos/lib/net/CollectionIdP.nc">
        <short>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.</short>
        <long>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.&#10;&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2006-12-12 18:23:28 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CollectionIdP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:../../tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:../../tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:../../tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):../../tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:../../tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="38:../../tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="112:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <documentation loc="102:../../tos/chips/atm1281/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega1281 serial port HPL.</short>
        <long> &#10; Private component of the Atmega1281 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:../../tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:../../tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer3P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="44(InitThreeP.InitThree):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="42(CounterThree16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TThree" ref="0xb733d010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="54(CounterMicro32C.Transform32):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TThree" ref="0xb733d010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0xb733d5e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.SerialAMSenderC" loc="47(MultihopOscilloscopeAppC.SerialAMSenderC):../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:147">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.SerialAMSenderC.AMQueueEntryP" loc="43(MultihopOscilloscopeAppC.SerialAMSenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.UARTMessagePoolP" loc="41(MultihopOscilloscopeAppC.UARTMessagePoolP):../../tos/system/PoolC.nc">
      <documentation loc="33:../../tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
            <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
          </type-tag>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.UARTMessagePoolP.PoolP" loc="53(MultihopOscilloscopeAppC.UARTMessagePoolP.PoolP):../../tos/system/PoolP.nc">
      <documentation loc="34:../../tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0xb67eb3d8"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.UARTQueueP" loc="42(MultihopOscilloscopeAppC.UARTQueueP):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
              <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.DebugMessagePool" loc="41(MultihopOscilloscopeAppC.DebugMessagePool):../../tos/system/PoolC.nc">
      <documentation loc="33:../../tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
            <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
          </type-tag>
          <value cst="I:20">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.DebugMessagePool.PoolP" loc="53(MultihopOscilloscopeAppC.DebugMessagePool.PoolP):../../tos/system/PoolP.nc">
      <documentation loc="34:../../tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0xb67eb3d8"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.DebugSendQueue" loc="42(MultihopOscilloscopeAppC.DebugSendQueue):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
              <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:20">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.DebugSerialSender" loc="47(MultihopOscilloscopeAppC.DebugSerialSender):../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:114">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.DebugSerialSender.AMQueueEntryP" loc="43(MultihopOscilloscopeAppC.DebugSerialSender.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="UARTDebugSenderP" loc="2:../../tos/lib/net/UARTDebugSenderP.nc">
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0xb72d75c8" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0xb72d77e0" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0xb72d79f8" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0xb72cf9d0" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0xb72cfbf8" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0xb72cfe20" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0xb72cc030" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0xb727c088" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0xb727c2b0" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0xb727c4d8" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0xb727c6c8" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0xb712c390" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0xb712c390"/></type-var>
        </typedef>
        <constant name="divider" ref="0xb712c550" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm1281AlarmAsyncP" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0xb71276e0" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0xb71276e0"/></type-var>
        </typedef>
        <constant name="divider" ref="0xb71278a0" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb713b9b8" loc="46:../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb713b9b8"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb7081010" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb7081010"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0xb70811f0" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb70568e0" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb70568e0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AccelXC" loc="18:../../tos/sensorboards/mts300/AccelXC.nc" abstract="">
      <documentation loc="32:../../tos/sensorboards/mts300/mts300.h">
        <short>&#10; &#10; </short>
        <long>&#10; &#10; @author Hu Siquan &#60;husq@xbow.com>&#10; Revision: $Revision: 1.6 $&#10;&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128InterruptPinP" loc="39:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="ctrl_addr" ref="0xb7001c10" loc="39:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <constant name="edge0bit" ref="0xb7001e38" loc="40:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <constant name="edge1bit" ref="0xb6feb088" loc="41:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0xb6feb278" loc="42:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128GpioInterruptC" loc="6:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc" abstract="" safe="">
      <documentation loc="3:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RoundRobinArbiterC" loc="89:../../tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="69:../../tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0xb6fb1b70" loc="89:../../tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:../../tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0xb6fa2088" loc="42:../../tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0xb6f916c8" loc="52:../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SplitControlPowerManagerC" loc="67:../../tos/lib/power/SplitControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../tos/lib/power/SplitControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.  Non-virtualized devices are shared&#10; using a parameterized Resource interface, and are powered down according&#10; to some policy whenever there are no more pending requests to that Resource.&#10; The policy implemented by this component is to delay the power down of a&#10; device by some contant factor.  Such a policy is useful whenever a device&#10; has a long wake-up latency.  The cost of waiting for the device to power&#10; up can be avoided if the device is requested again before some predetermined&#10; amount of time.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>SplitControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>AsyncStdControl&#60;/code> or&#10; &#60;code>StdControl&#60;/code> interfaces, please use either the&#10; &#60;code>AsyncStdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="PowerManagerP" loc="58:../../tos/lib/power/PowerManagerP.nc" abstract="">
      <documentation loc="41:../../tos/lib/power/PowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:../../tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:../../tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0xb6f48730" loc="23:../../tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0xb6f48730"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadClientC" loc="21:../../tos/chips/atm128/adc/AdcReadClientC.nc" abstract="">
      <documentation loc="10:../../tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:../../tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:../../tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TaskletC" loc="42:../../tos/lib/rfxlink/util/TaskletC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RadioAlarmC" loc="37:../../tos/lib/rfxlink/util/RadioAlarmC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RadioAlarmP" loc="50:../../tos/lib/rfxlink/util/RadioAlarmP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ActiveMessageLayerC" loc="35:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ActiveMessageLayerP" loc="38:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AutoResourceAcquireLayerC" loc="35:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleFcfsArbiterC" loc="83:../../tos/system/SimpleFcfsArbiterC.nc" abstract="">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0xb6d014c0" loc="83:../../tos/system/SimpleFcfsArbiterC.nc">
          <component-ref qname="SimpleFcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/FcfsResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0xb6cfc010" loc="42:../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154MessageLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TinyosNetworkLayerC" loc="50:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154PacketLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Ieee154PacketLayerP" loc="37:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="UniqueLayerC" loc="35:../../tos/lib/rfxlink/layers/UniqueLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="UniqueLayerP" loc="38:../../tos/lib/rfxlink/layers/UniqueLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="NeighborhoodFlagC" loc="35:../../tos/lib/rfxlink/util/NeighborhoodFlagC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="PacketLinkLayerC" loc="73:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc" abstract="">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyC" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyP" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="MessageBufferLayerC" loc="35:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="MessageBufferLayerP" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RandomCollisionLayerC" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RandomCollisionLayerP" loc="38:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SoftwareAckLayerC" loc="38:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="DummyLayerC" loc="35:../../tos/lib/rfxlink/layers/DummyLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerC" loc="37:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerP" loc="38:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="MetadataFlagsLayerC" loc="38:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmOne16C" loc="28:../../tos/platforms/mica/AlarmOne16C.nc" abstract="">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128TimerInitC" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0xb69388f0" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb69388f0"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0xb6938b10" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmC" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0xb693a7f0" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0xb693a7f0"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0xb693ac38" loc="52:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb693ac38"/></type-var>
        </typedef>
        <constant name="mindt" ref="0xb693adf8" loc="53:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0xb6907ef8" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0xb6907ef8"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0xb6904368" loc="43:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb6904368"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0xb68f5010" loc="55:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0xb68f5010"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0xb68f5470" loc="56:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0xb68f5470"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0xb68f56d8" loc="57:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0xb68f56d8"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0xb68f5b48" loc="58:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0xb68f5b48"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0xb68f5db0" loc="59:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0xb68f4258" loc="60:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0xb68f4258"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="CtpForwardingEngineP" loc="107:../../tos/lib/net/ctp/CtpForwardingEngineP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="PoolC" loc="41:../../tos/system/PoolC.nc" abstract="">
      <documentation loc="33:../../tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="pool_t" ref="0xb67eb3d8" loc="41:../../tos/system/PoolC.nc">
          <component-ref qname="PoolC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0xb67eb3d8"/></type-var>
        </typedef>
        <constant name="POOL_SIZE" ref="0xb67eb5f8" loc="41:../../tos/system/PoolC.nc">
          <component-ref qname="PoolC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PoolP" loc="53:../../tos/system/PoolP.nc" abstract="">
      <documentation loc="34:../../tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="pool_t" ref="0xb67e6960" loc="53:../../tos/system/PoolP.nc">
          <component-ref qname="PoolP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0xb67e6960"/></type-var>
        </typedef>
        <constant name="size" ref="0xb67e6b50" loc="53:../../tos/system/PoolP.nc">
          <component-ref qname="PoolP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0xb67d0438" loc="42:../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0xb67d0438"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0xb67d0660" loc="42:../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="LruCtpMsgCacheC" loc="38:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc" abstract="">
      <documentation loc="32:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
        <short>&#10; An LRU cache CTP packet instances, where insertion represents use.</short>
        <long>&#10; An LRU cache CTP packet instances, where insertion represents use.&#10;&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="CACHE_SIZE" ref="0xb67beb08" loc="38:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
          <component-ref qname="LruCtpMsgCacheC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="LruCtpMsgCacheP" loc="43:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc" abstract="">
      <documentation loc="32:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
        <short>&#10; An LRU cache that stores the signature of a CTP packet instance.</short>
        <long>&#10; An LRU cache that stores the signature of a CTP packet instance.&#10; An insert operation indicates &#34;use&#34;.  Inserting an element not in&#10; the cache will replace the oldest, and inserting an element already&#10; in the cache will refresh its age.&#10;&#10; @author Philip Levis &#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0xb67ba590" loc="43:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
          <component-ref qname="LruCtpMsgCacheP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0xb6798430" loc="47:../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0xb671f010" loc="47:../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0xb671dad8" loc="43:../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0xb670a2c0" loc="45:../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="43:../../tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="33:../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0xb66d98a0" loc="43:../../tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMSnooperC" loc="44:../../tos/system/AMSnooperC.nc" abstract="">
      <documentation loc="33:../../tos/system/AMSnooperC.nc">
        <short>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node.</short>
        <long>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node. &#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0xb66d2320" loc="44:../../tos/system/AMSnooperC.nc">
          <component-ref qname="AMSnooperC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="CtpRoutingEngineP" loc="107:../../tos/lib/net/ctp/CtpRoutingEngineP.nc" abstract="">
      <documentation loc="38:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
        <short> &#10;  The TreeRoutingEngine is responsible for computing the routes for&#10;  collection.</short>
        <long> &#10;  The TreeRoutingEngine is responsible for computing the routes for&#10;  collection.  It builds a set of trees rooted at specific nodes (roots) and&#10;  maintains these trees using information provided by the link estimator on&#10;  the quality of one hop links.&#10; &#10;  &#60;p>Each node is part of only one tree at any given time, but there is no&#10;  difference from the node's point of view of which tree it is part. In other&#10;  words, a message is sent towards &#60;i>a&#60;/i> root, but which one is not&#10;  specified. It is assumed that the roots will work together to have all data&#10;  aggregated later if need be.  The tree routing engine's responsibility is&#10;  for each node to find the path with the least number of transmissions to&#10;  any one root.&#10;&#10;  &#60;p>The tree is proactively maintained by periodic beacons sent by each&#10;  node. These beacons are jittered in time to prevent synchronizations in the&#10;  network. All nodes maintain the same &#60;i>average&#60;/i> beacon sending rate&#10;  (defined by BEACON_INTERVAL +- 50%). The beacon contains the node's parent,&#10;  the current hopcount, and the cumulative path quality metric. The metric is&#10;  defined as the parent's metric plus the bidirectional quality of the link&#10;  between the current node and its parent.  The metric represents the&#10;  expected number of transmissions along the path to the root, and is 0 by&#10;  definition at the root.&#10; &#10;  &#60;p>Every time a node receives an update from a neighbor it records the&#10;  information if the node is part of the neighbor table. The neighbor table&#10;  keeps the best candidates for being parents i.e., the nodes with the best&#10;  path metric. The neighbor table does not store the full path metric,&#10;  though. It stores the parent's path metric, and the link quality to the&#10;  parent is only added when the information is needed: (i) when choosing a&#10;  parent and (ii) when choosing a route. The nodes in the neighbor table are&#10;  a subset of the nodes in the link estimator table, as a node is not&#10;  admitted in the neighbor table with an estimate of infinity.&#10; &#10;  &#60;p>There are two uses for the neighbor table, as mentioned above. The first&#10;  one is to select a parent. The parent is just the neighbor with the best&#10;  path metric. It serves to define the node's own path metric and hopcount,&#10;  and the set of child-parent links is what defines the tree. In a sense the&#10;  tree is defined to form a coherent propagation substrate for the path&#10;  metrics. The parent is (re)-selected periodically, immediately before a&#10;  node sends its own beacon, in the updateRouteTask.&#10;  &#10;  &#60;p>The second use is to actually choose a next hop towards any root at&#10;  message forwarding time.  This need not be the current parent, even though&#10;  it is currently implemented as such.&#10;&#10;  &#60;p>The operation of the routing engine has two main tasks and one main&#10;  event: updateRouteTask is called periodically and chooses a new parent;&#10;  sendBeaconTask broadcasts the current route information to the neighbors.&#10;  The main event is the receiving of a neighbor's beacon, which updates the&#10;  neighbor table.&#10;  &#10;  &#60;p> The interface with the ForwardingEngine occurs through the nextHop()&#10;  call.&#10; &#10;  &#60;p> Any node can become a root, and routed messages from a subset of the&#10;  network will be routed towards it. The RootControl interface allows&#10;  setting, unsetting, and querying the root state of a node. By convention,&#10;  when a node is root its hopcount and metric are 0, and the parent is&#10;  itself. A root always has a valid route, to itself.&#10;&#10;  @author Rodrigo Fonseca&#10;  @author Philip Levis (added trickle-like updates)&#10;  Acknowledgment: based on MintRoute, MultiHopLQI, BVR tree construction, Berkeley's MTree&#10;                           &#10;  @date   $Date: 2010-06-29 22:07:49 $&#10;  @see Net2-WG&#10;</long>
      </documentation>
      <parameters>
        <constant name="routingTableSize" ref="0xb66c63c0" loc="107:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
          <component-ref qname="CtpRoutingEngineP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
        <constant name="minInterval" ref="0xb66c6600" loc="107:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
          <component-ref qname="CtpRoutingEngineP"/>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </constant>
        <constant name="maxInterval" ref="0xb66c6840" loc="107:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
          <component-ref qname="CtpRoutingEngineP"/>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CollectionSenderC" loc="43:../../tos/lib/net/ctp/CollectionSenderC.nc" abstract="">
      <documentation loc="32:../../tos/lib/net/ctp/CollectionSenderC.nc">
        <short>&#10; The virtualized collection sender abstraction.</short>
        <long>&#10; The virtualized collection sender abstraction.&#10;&#10; @author Kyle Jamieson&#10; @author Philip Levis&#10; @date April 25 2006&#10; @see TinyOS Net2-WG&#10;</long>
      </documentation>
      <parameters>
        <constant name="collectid" ref="0xb660bb30" loc="43:../../tos/lib/net/ctp/CollectionSenderC.nc">
          <component-ref qname="CollectionSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="CollectionSenderP" loc="34:../../tos/lib/net/ctp/CollectionSenderP.nc" abstract="">
      <parameters>
        <constant name="collectid" ref="0xb6607688" loc="35:../../tos/lib/net/ctp/CollectionSenderP.nc">
          <component-ref qname="CollectionSenderP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
          </type-int>
        </constant>
        <constant name="clientid" ref="0xb66078a0" loc="35:../../tos/lib/net/ctp/CollectionSenderP.nc">
          <component-ref qname="CollectionSenderP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="CollectionIdP" loc="45:../../tos/lib/net/CollectionIdP.nc" abstract="">
      <documentation loc="35:../../tos/lib/net/CollectionIdP.nc">
        <short>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.</short>
        <long>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.&#10;&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2006-12-12 18:23:28 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="collectid" ref="0xb6600358" loc="45:../../tos/lib/net/CollectionIdP.nc">
          <component-ref qname="CollectionIdP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:../../tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0xb63e1010" loc="47:../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0xb73170f0" loc="58:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0xb73170f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb73172c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0xb73154a0" loc="57:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0xb73154a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0xb7315678"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0xb730c9c8" loc="52:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0xb730c9c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb730cba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb73179d8" loc="46:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb73179d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7317bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0xb730c268" loc="50:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0xb730c268"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0xb730c440"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0xb730c520"/>
        <function-ref name="calibrateMicro" scoped="" ref="0xb730c600"/>
        <function-ref name="actualMicro" scoped="" ref="0xb730c6e0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0xb730c7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0xb730a140" loc="45:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0xb730a140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb730a318"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb7313d48" loc="44:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb7313d48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7313f20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0xb730a548" loc="46:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0xb730a548"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb730a720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0xb73129f0" loc="41:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0xb73129f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7312bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0xb7312620" loc="40:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0xb7312620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb73127f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0xb7303588" loc="45:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0xb7303588"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7303760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0xb7300ad0" loc="44:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0xb7300ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7300ca8"/>
        <function-ref name="isInput" scoped="" ref="0xb7300d88"/>
        <function-ref name="toggle" scoped="" ref="0xb7300e68"/>
        <function-ref name="isOutput" scoped="" ref="0xb7303010"/>
        <function-ref name="get" scoped="" ref="0xb73030f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb73031d0"/>
        <function-ref name="set" scoped="" ref="0xb73032b0"/>
        <function-ref name="clr" scoped="" ref="0xb7303390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0xb7307590" loc="43:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0xb7307590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7307768"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0xb72dd210" loc="98:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0xb72dd210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72dd5e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72dd6c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72dd7a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72dd888"/>
        <function-ref name="get" scoped="" ref="0xb72dd968"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72dda48"/>
        <function-ref name="set" scoped="" ref="0xb72ddb28"/>
        <function-ref name="clr" scoped="" ref="0xb72ddc08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0xb72ed750" loc="72:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0xb72ed750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72ed928"/>
        <function-ref name="isInput" scoped="" ref="0xb72eda08"/>
        <function-ref name="toggle" scoped="" ref="0xb72edae8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72edbc8"/>
        <function-ref name="get" scoped="" ref="0xb72edca8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72edd88"/>
        <function-ref name="set" scoped="" ref="0xb72ede68"/>
        <function-ref name="clr" scoped="" ref="0xb72ec010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0xb72e6ce8" loc="83:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0xb72e6ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e6ec0"/>
        <function-ref name="isInput" scoped="" ref="0xb72e5010"/>
        <function-ref name="toggle" scoped="" ref="0xb72e50f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e51d0"/>
        <function-ref name="get" scoped="" ref="0xb72e52b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e5390"/>
        <function-ref name="set" scoped="" ref="0xb72e5470"/>
        <function-ref name="clr" scoped="" ref="0xb72e5550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0xb72e1ea8" loc="92:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0xb72e1ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e00c0"/>
        <function-ref name="isInput" scoped="" ref="0xb72e01a0"/>
        <function-ref name="toggle" scoped="" ref="0xb72e0280"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e0360"/>
        <function-ref name="get" scoped="" ref="0xb72e0440"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e0520"/>
        <function-ref name="set" scoped="" ref="0xb72e0600"/>
        <function-ref name="clr" scoped="" ref="0xb72e06e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG5" ref="0xb72da750" loc="103:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG5" scoped="" ref="0xb72da750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72da928"/>
        <function-ref name="isInput" scoped="" ref="0xb72daa08"/>
        <function-ref name="toggle" scoped="" ref="0xb72daae8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72dabc8"/>
        <function-ref name="get" scoped="" ref="0xb72daca8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72dad88"/>
        <function-ref name="set" scoped="" ref="0xb72dae68"/>
        <function-ref name="clr" scoped="" ref="0xb72d9010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0xb72f92f0" loc="50:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0xb72f92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f94c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72f95a8"/>
        <function-ref name="toggle" scoped="" ref="0xb72f9688"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f9768"/>
        <function-ref name="get" scoped="" ref="0xb72f9848"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f9928"/>
        <function-ref name="set" scoped="" ref="0xb72f9a08"/>
        <function-ref name="clr" scoped="" ref="0xb72f9ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0xb72e2a98" loc="90:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0xb72e2a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e2c70"/>
        <function-ref name="isInput" scoped="" ref="0xb72e2d50"/>
        <function-ref name="toggle" scoped="" ref="0xb72e2e30"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e2f10"/>
        <function-ref name="get" scoped="" ref="0xb72e1010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e10f0"/>
        <function-ref name="set" scoped="" ref="0xb72e11d0"/>
        <function-ref name="clr" scoped="" ref="0xb72e12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0xb72f8750" loc="53:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0xb72f8750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f8928"/>
        <function-ref name="isInput" scoped="" ref="0xb72f8a08"/>
        <function-ref name="toggle" scoped="" ref="0xb72f8ae8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f8bc8"/>
        <function-ref name="get" scoped="" ref="0xb72f8ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f8d88"/>
        <function-ref name="set" scoped="" ref="0xb72f8e68"/>
        <function-ref name="clr" scoped="" ref="0xb72f7010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0xb72f2ea8" loc="64:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0xb72f2ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f10c0"/>
        <function-ref name="isInput" scoped="" ref="0xb72f11a0"/>
        <function-ref name="toggle" scoped="" ref="0xb72f1280"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f1360"/>
        <function-ref name="get" scoped="" ref="0xb72f1440"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f1520"/>
        <function-ref name="set" scoped="" ref="0xb72f1600"/>
        <function-ref name="clr" scoped="" ref="0xb72f16e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0xb72ea670" loc="75:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0xb72ea670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72ea848"/>
        <function-ref name="isInput" scoped="" ref="0xb72ea928"/>
        <function-ref name="toggle" scoped="" ref="0xb72eaa08"/>
        <function-ref name="isOutput" scoped="" ref="0xb72eaae8"/>
        <function-ref name="get" scoped="" ref="0xb72eabc8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72eaca8"/>
        <function-ref name="set" scoped="" ref="0xb72ead88"/>
        <function-ref name="clr" scoped="" ref="0xb72eae68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0xb72e4c08" loc="86:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0xb72e4c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e4de0"/>
        <function-ref name="isInput" scoped="" ref="0xb72e4ec0"/>
        <function-ref name="toggle" scoped="" ref="0xb72e3010"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e30f0"/>
        <function-ref name="get" scoped="" ref="0xb72e31d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e32b0"/>
        <function-ref name="set" scoped="" ref="0xb72e3390"/>
        <function-ref name="clr" scoped="" ref="0xb72e3470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0xb7306f10" loc="45:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0xb7306f10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72fc108"/>
        <function-ref name="isInput" scoped="" ref="0xb72fc1e8"/>
        <function-ref name="toggle" scoped="" ref="0xb72fc2c8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72fc3a8"/>
        <function-ref name="get" scoped="" ref="0xb72fc488"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72fc568"/>
        <function-ref name="set" scoped="" ref="0xb72fc648"/>
        <function-ref name="clr" scoped="" ref="0xb72fc728"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0xb72f6670" loc="56:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0xb72f6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f6848"/>
        <function-ref name="isInput" scoped="" ref="0xb72f6928"/>
        <function-ref name="toggle" scoped="" ref="0xb72f6a08"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f6ae8"/>
        <function-ref name="get" scoped="" ref="0xb72f6bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f6ca8"/>
        <function-ref name="set" scoped="" ref="0xb72f6d88"/>
        <function-ref name="clr" scoped="" ref="0xb72f6e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0xb72f0ce8" loc="67:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0xb72f0ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f0ec0"/>
        <function-ref name="isInput" scoped="" ref="0xb72ef010"/>
        <function-ref name="toggle" scoped="" ref="0xb72ef0f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72ef1d0"/>
        <function-ref name="get" scoped="" ref="0xb72ef2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72ef390"/>
        <function-ref name="set" scoped="" ref="0xb72ef470"/>
        <function-ref name="clr" scoped="" ref="0xb72ef550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0xb72e84b0" loc="78:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0xb72e84b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e8688"/>
        <function-ref name="isInput" scoped="" ref="0xb72e8768"/>
        <function-ref name="toggle" scoped="" ref="0xb72e8848"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e8928"/>
        <function-ref name="get" scoped="" ref="0xb72e8a08"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e8ae8"/>
        <function-ref name="set" scoped="" ref="0xb72e8bc8"/>
        <function-ref name="clr" scoped="" ref="0xb72e8ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0xb72dfce8" loc="95:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0xb72dfce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72dfec0"/>
        <function-ref name="isInput" scoped="" ref="0xb72de010"/>
        <function-ref name="toggle" scoped="" ref="0xb72de0f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72de1d0"/>
        <function-ref name="get" scoped="" ref="0xb72de2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72de390"/>
        <function-ref name="set" scoped="" ref="0xb72de470"/>
        <function-ref name="clr" scoped="" ref="0xb72de550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0xb72db2f0" loc="101:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0xb72db2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72db4c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72db5a8"/>
        <function-ref name="toggle" scoped="" ref="0xb72db688"/>
        <function-ref name="isOutput" scoped="" ref="0xb72db768"/>
        <function-ref name="get" scoped="" ref="0xb72db848"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72db928"/>
        <function-ref name="set" scoped="" ref="0xb72dba08"/>
        <function-ref name="clr" scoped="" ref="0xb72dbae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0xb72e78e0" loc="81:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0xb72e78e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e7ab8"/>
        <function-ref name="isInput" scoped="" ref="0xb72e7b98"/>
        <function-ref name="toggle" scoped="" ref="0xb72e7c78"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e7d58"/>
        <function-ref name="get" scoped="" ref="0xb72e7e38"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e7f18"/>
        <function-ref name="set" scoped="" ref="0xb72e6010"/>
        <function-ref name="clr" scoped="" ref="0xb72e60f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0xb72fbdc8" loc="48:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0xb72fbdc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72fa010"/>
        <function-ref name="isInput" scoped="" ref="0xb72fa0f0"/>
        <function-ref name="toggle" scoped="" ref="0xb72fa1d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72fa2b0"/>
        <function-ref name="get" scoped="" ref="0xb72fa390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72fa470"/>
        <function-ref name="set" scoped="" ref="0xb72fa550"/>
        <function-ref name="clr" scoped="" ref="0xb72fa630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0xb72f4590" loc="59:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0xb72f4590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f4768"/>
        <function-ref name="isInput" scoped="" ref="0xb72f4848"/>
        <function-ref name="toggle" scoped="" ref="0xb72f4928"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f4a08"/>
        <function-ref name="get" scoped="" ref="0xb72f4ae8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f4bc8"/>
        <function-ref name="set" scoped="" ref="0xb72f4ca8"/>
        <function-ref name="clr" scoped="" ref="0xb72f4d88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0xb72dde08" loc="99:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0xb72dde08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72dc010"/>
        <function-ref name="isInput" scoped="" ref="0xb72dc0f0"/>
        <function-ref name="toggle" scoped="" ref="0xb72dc1d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72dc2b0"/>
        <function-ref name="get" scoped="" ref="0xb72dc390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72dc470"/>
        <function-ref name="set" scoped="" ref="0xb72dc550"/>
        <function-ref name="clr" scoped="" ref="0xb72dc630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0xb72f3a08" loc="62:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0xb72f3a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f3be0"/>
        <function-ref name="isInput" scoped="" ref="0xb72f3cc0"/>
        <function-ref name="toggle" scoped="" ref="0xb72f3da0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f3e80"/>
        <function-ref name="get" scoped="" ref="0xb72f2010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f20f0"/>
        <function-ref name="set" scoped="" ref="0xb72f21d0"/>
        <function-ref name="clr" scoped="" ref="0xb72f22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0xb72ec210" loc="73:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0xb72ec210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72ec3e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72ec4c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72ec5a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72ec688"/>
        <function-ref name="get" scoped="" ref="0xb72ec768"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72ec848"/>
        <function-ref name="set" scoped="" ref="0xb72ec928"/>
        <function-ref name="clr" scoped="" ref="0xb72eca08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0xb72e5750" loc="84:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0xb72e5750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e5928"/>
        <function-ref name="isInput" scoped="" ref="0xb72e5a08"/>
        <function-ref name="toggle" scoped="" ref="0xb72e5ae8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e5bc8"/>
        <function-ref name="get" scoped="" ref="0xb72e5ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e5d88"/>
        <function-ref name="set" scoped="" ref="0xb72e5e68"/>
        <function-ref name="clr" scoped="" ref="0xb72e4010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0xb72e08e0" loc="93:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0xb72e08e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e0ab8"/>
        <function-ref name="isInput" scoped="" ref="0xb72e0b98"/>
        <function-ref name="toggle" scoped="" ref="0xb72e0c78"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e0d58"/>
        <function-ref name="get" scoped="" ref="0xb72e0e38"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e0f18"/>
        <function-ref name="set" scoped="" ref="0xb72df010"/>
        <function-ref name="clr" scoped="" ref="0xb72df0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0xb72f9ce8" loc="51:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0xb72f9ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f9ec0"/>
        <function-ref name="isInput" scoped="" ref="0xb72f8010"/>
        <function-ref name="toggle" scoped="" ref="0xb72f80f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f81d0"/>
        <function-ref name="get" scoped="" ref="0xb72f82b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f8390"/>
        <function-ref name="set" scoped="" ref="0xb72f8470"/>
        <function-ref name="clr" scoped="" ref="0xb72f8550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0xb72f7210" loc="54:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0xb72f7210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f73e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72f74c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72f75a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f7688"/>
        <function-ref name="get" scoped="" ref="0xb72f7768"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f7848"/>
        <function-ref name="set" scoped="" ref="0xb72f7928"/>
        <function-ref name="clr" scoped="" ref="0xb72f7a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0xb72f18e0" loc="65:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0xb72f18e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f1ab8"/>
        <function-ref name="isInput" scoped="" ref="0xb72f1b98"/>
        <function-ref name="toggle" scoped="" ref="0xb72f1c78"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f1d58"/>
        <function-ref name="get" scoped="" ref="0xb72f1e38"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f1f18"/>
        <function-ref name="set" scoped="" ref="0xb72f0010"/>
        <function-ref name="clr" scoped="" ref="0xb72f00f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0xb72e90a0" loc="76:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0xb72e90a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e9278"/>
        <function-ref name="isInput" scoped="" ref="0xb72e9358"/>
        <function-ref name="toggle" scoped="" ref="0xb72e9438"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e9518"/>
        <function-ref name="get" scoped="" ref="0xb72e95f8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e96d8"/>
        <function-ref name="set" scoped="" ref="0xb72e97b8"/>
        <function-ref name="clr" scoped="" ref="0xb72e9898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0xb72e3670" loc="87:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0xb72e3670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e3848"/>
        <function-ref name="isInput" scoped="" ref="0xb72e3928"/>
        <function-ref name="toggle" scoped="" ref="0xb72e3a08"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e3ae8"/>
        <function-ref name="get" scoped="" ref="0xb72e3bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e3ca8"/>
        <function-ref name="set" scoped="" ref="0xb72e3d88"/>
        <function-ref name="clr" scoped="" ref="0xb72e3e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0xb72fc928" loc="46:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0xb72fc928"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72fcb00"/>
        <function-ref name="isInput" scoped="" ref="0xb72fcbe0"/>
        <function-ref name="toggle" scoped="" ref="0xb72fccc0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72fcda0"/>
        <function-ref name="get" scoped="" ref="0xb72fce80"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72fb010"/>
        <function-ref name="set" scoped="" ref="0xb72fb0f0"/>
        <function-ref name="clr" scoped="" ref="0xb72fb1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0xb72f50a0" loc="57:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0xb72f50a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f52f8"/>
        <function-ref name="isInput" scoped="" ref="0xb72f53d8"/>
        <function-ref name="toggle" scoped="" ref="0xb72f54b8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f5598"/>
        <function-ref name="get" scoped="" ref="0xb72f5678"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f5758"/>
        <function-ref name="set" scoped="" ref="0xb72f5838"/>
        <function-ref name="clr" scoped="" ref="0xb72f5918"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0xb72ef750" loc="68:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0xb72ef750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72ef928"/>
        <function-ref name="isInput" scoped="" ref="0xb72efa08"/>
        <function-ref name="toggle" scoped="" ref="0xb72efae8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72efbc8"/>
        <function-ref name="get" scoped="" ref="0xb72efca8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72efd88"/>
        <function-ref name="set" scoped="" ref="0xb72efe68"/>
        <function-ref name="clr" scoped="" ref="0xb72ee010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0xb72de750" loc="96:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0xb72de750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72de928"/>
        <function-ref name="isInput" scoped="" ref="0xb72dea08"/>
        <function-ref name="toggle" scoped="" ref="0xb72deae8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72debc8"/>
        <function-ref name="get" scoped="" ref="0xb72deca8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72ded88"/>
        <function-ref name="set" scoped="" ref="0xb72dee68"/>
        <function-ref name="clr" scoped="" ref="0xb72dd010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0xb72eec08" loc="71:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0xb72eec08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72eeee0"/>
        <function-ref name="isInput" scoped="" ref="0xb72ed010"/>
        <function-ref name="toggle" scoped="" ref="0xb72ed0f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72ed1d0"/>
        <function-ref name="get" scoped="" ref="0xb72ed2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72ed390"/>
        <function-ref name="set" scoped="" ref="0xb72ed470"/>
        <function-ref name="clr" scoped="" ref="0xb72ed550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0xb72e62f0" loc="82:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0xb72e62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e64c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72e65a8"/>
        <function-ref name="toggle" scoped="" ref="0xb72e6688"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e6768"/>
        <function-ref name="get" scoped="" ref="0xb72e6848"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e6928"/>
        <function-ref name="set" scoped="" ref="0xb72e6a08"/>
        <function-ref name="clr" scoped="" ref="0xb72e6ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0xb72e14b0" loc="91:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0xb72e14b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e1688"/>
        <function-ref name="isInput" scoped="" ref="0xb72e1768"/>
        <function-ref name="toggle" scoped="" ref="0xb72e1848"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e1928"/>
        <function-ref name="get" scoped="" ref="0xb72e1a08"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e1ae8"/>
        <function-ref name="set" scoped="" ref="0xb72e1bc8"/>
        <function-ref name="clr" scoped="" ref="0xb72e1ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0xb72dbce8" loc="102:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0xb72dbce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72dbec0"/>
        <function-ref name="isInput" scoped="" ref="0xb72da010"/>
        <function-ref name="toggle" scoped="" ref="0xb72da0f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72da1d0"/>
        <function-ref name="get" scoped="" ref="0xb72da2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72da390"/>
        <function-ref name="set" scoped="" ref="0xb72da470"/>
        <function-ref name="clr" scoped="" ref="0xb72da550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0xb72fa830" loc="49:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0xb72fa830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72faa08"/>
        <function-ref name="isInput" scoped="" ref="0xb72faae8"/>
        <function-ref name="toggle" scoped="" ref="0xb72fabc8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72faca8"/>
        <function-ref name="get" scoped="" ref="0xb72fad88"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72fae68"/>
        <function-ref name="set" scoped="" ref="0xb72f9010"/>
        <function-ref name="clr" scoped="" ref="0xb72f90f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0xb72f3010" loc="60:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0xb72f3010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f31e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72f32c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72f33a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f3488"/>
        <function-ref name="get" scoped="" ref="0xb72f3568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f3648"/>
        <function-ref name="set" scoped="" ref="0xb72f3728"/>
        <function-ref name="clr" scoped="" ref="0xb72f3808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0xb72e20a0" loc="89:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0xb72e20a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e2278"/>
        <function-ref name="isInput" scoped="" ref="0xb72e2358"/>
        <function-ref name="toggle" scoped="" ref="0xb72e2438"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e2518"/>
        <function-ref name="get" scoped="" ref="0xb72e25f8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e26d8"/>
        <function-ref name="set" scoped="" ref="0xb72e27b8"/>
        <function-ref name="clr" scoped="" ref="0xb72e2898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0xb72f24b0" loc="63:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0xb72f24b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f2688"/>
        <function-ref name="isInput" scoped="" ref="0xb72f2768"/>
        <function-ref name="toggle" scoped="" ref="0xb72f2848"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f2928"/>
        <function-ref name="get" scoped="" ref="0xb72f2a08"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f2ae8"/>
        <function-ref name="set" scoped="" ref="0xb72f2bc8"/>
        <function-ref name="clr" scoped="" ref="0xb72f2ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0xb72ecc08" loc="74:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0xb72ecc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72ecde0"/>
        <function-ref name="isInput" scoped="" ref="0xb72ecec0"/>
        <function-ref name="toggle" scoped="" ref="0xb72ea010"/>
        <function-ref name="isOutput" scoped="" ref="0xb72ea0f0"/>
        <function-ref name="get" scoped="" ref="0xb72ea1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72ea2b0"/>
        <function-ref name="set" scoped="" ref="0xb72ea390"/>
        <function-ref name="clr" scoped="" ref="0xb72ea470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0xb72e4210" loc="85:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0xb72e4210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e43e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72e44c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72e45a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e4688"/>
        <function-ref name="get" scoped="" ref="0xb72e4768"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e4848"/>
        <function-ref name="set" scoped="" ref="0xb72e4928"/>
        <function-ref name="clr" scoped="" ref="0xb72e4a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0xb72df2f0" loc="94:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0xb72df2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72df4c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72df5a8"/>
        <function-ref name="toggle" scoped="" ref="0xb72df688"/>
        <function-ref name="isOutput" scoped="" ref="0xb72df768"/>
        <function-ref name="get" scoped="" ref="0xb72df848"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72df928"/>
        <function-ref name="set" scoped="" ref="0xb72dfa08"/>
        <function-ref name="clr" scoped="" ref="0xb72dfae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0xb7306518" loc="44:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0xb7306518"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb73066f0"/>
        <function-ref name="isInput" scoped="" ref="0xb73067d0"/>
        <function-ref name="toggle" scoped="" ref="0xb73068b0"/>
        <function-ref name="isOutput" scoped="" ref="0xb7306990"/>
        <function-ref name="get" scoped="" ref="0xb7306a70"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7306b50"/>
        <function-ref name="set" scoped="" ref="0xb7306c30"/>
        <function-ref name="clr" scoped="" ref="0xb7306d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0xb72f7c08" loc="55:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0xb72f7c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f7de0"/>
        <function-ref name="isInput" scoped="" ref="0xb72f7ec0"/>
        <function-ref name="toggle" scoped="" ref="0xb72f6010"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f60f0"/>
        <function-ref name="get" scoped="" ref="0xb72f61d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f62b0"/>
        <function-ref name="set" scoped="" ref="0xb72f6390"/>
        <function-ref name="clr" scoped="" ref="0xb72f6470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0xb72f02f0" loc="66:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0xb72f02f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f04c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72f05a8"/>
        <function-ref name="toggle" scoped="" ref="0xb72f0688"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f0768"/>
        <function-ref name="get" scoped="" ref="0xb72f0848"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f0928"/>
        <function-ref name="set" scoped="" ref="0xb72f0a08"/>
        <function-ref name="clr" scoped="" ref="0xb72f0ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0xb72e9a98" loc="77:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0xb72e9a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e9c70"/>
        <function-ref name="isInput" scoped="" ref="0xb72e9d50"/>
        <function-ref name="toggle" scoped="" ref="0xb72e9e30"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e9f10"/>
        <function-ref name="get" scoped="" ref="0xb72e8010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e80f0"/>
        <function-ref name="set" scoped="" ref="0xb72e81d0"/>
        <function-ref name="clr" scoped="" ref="0xb72e82b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0xb72dc830" loc="100:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0xb72dc830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72dca08"/>
        <function-ref name="isInput" scoped="" ref="0xb72dcae8"/>
        <function-ref name="toggle" scoped="" ref="0xb72dcbc8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72dcca8"/>
        <function-ref name="get" scoped="" ref="0xb72dcd88"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72dce68"/>
        <function-ref name="set" scoped="" ref="0xb72db010"/>
        <function-ref name="clr" scoped="" ref="0xb72db0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0xb72e8ea8" loc="80:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0xb72e8ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72e70c0"/>
        <function-ref name="isInput" scoped="" ref="0xb72e71a0"/>
        <function-ref name="toggle" scoped="" ref="0xb72e7280"/>
        <function-ref name="isOutput" scoped="" ref="0xb72e7360"/>
        <function-ref name="get" scoped="" ref="0xb72e7440"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72e7520"/>
        <function-ref name="set" scoped="" ref="0xb72e7600"/>
        <function-ref name="clr" scoped="" ref="0xb72e76e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0xb72ee210" loc="69:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0xb72ee210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72ee3e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72ee4c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72ee5a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72ee688"/>
        <function-ref name="get" scoped="" ref="0xb72ee768"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72ee848"/>
        <function-ref name="set" scoped="" ref="0xb72ee928"/>
        <function-ref name="clr" scoped="" ref="0xb72eea08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0xb72fb3d0" loc="47:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0xb72fb3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72fb5a8"/>
        <function-ref name="isInput" scoped="" ref="0xb72fb688"/>
        <function-ref name="toggle" scoped="" ref="0xb72fb768"/>
        <function-ref name="isOutput" scoped="" ref="0xb72fb848"/>
        <function-ref name="get" scoped="" ref="0xb72fb928"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72fba08"/>
        <function-ref name="set" scoped="" ref="0xb72fbae8"/>
        <function-ref name="clr" scoped="" ref="0xb72fbbc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0xb72f5b18" loc="58:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0xb72f5b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72f5cf0"/>
        <function-ref name="isInput" scoped="" ref="0xb72f5dd0"/>
        <function-ref name="toggle" scoped="" ref="0xb72f5eb0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72f4010"/>
        <function-ref name="get" scoped="" ref="0xb72f40f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72f41d0"/>
        <function-ref name="set" scoped="" ref="0xb72f42b0"/>
        <function-ref name="clr" scoped="" ref="0xb72f4390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0xb72b1d68" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0xb72b1d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72b0010"/>
        <function-ref name="isInput" scoped="" ref="0xb72b00f0"/>
        <function-ref name="toggle" scoped="" ref="0xb72b01d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72b02b0"/>
        <function-ref name="get" scoped="" ref="0xb72b0390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72b0470"/>
        <function-ref name="set" scoped="" ref="0xb72b0550"/>
        <function-ref name="clr" scoped="" ref="0xb72b0630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0xb72afac8" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0xb72afac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72afca0"/>
        <function-ref name="isInput" scoped="" ref="0xb72afd80"/>
        <function-ref name="toggle" scoped="" ref="0xb72afe60"/>
        <function-ref name="isOutput" scoped="" ref="0xb72ae010"/>
        <function-ref name="get" scoped="" ref="0xb72ae0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72ae1d0"/>
        <function-ref name="set" scoped="" ref="0xb72ae2b0"/>
        <function-ref name="clr" scoped="" ref="0xb72ae390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0xb72b2a28" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0xb72b2a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72b2c00"/>
        <function-ref name="isInput" scoped="" ref="0xb72b2ce0"/>
        <function-ref name="toggle" scoped="" ref="0xb72b2dc0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72b2ea0"/>
        <function-ref name="get" scoped="" ref="0xb72b1010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72b10f0"/>
        <function-ref name="set" scoped="" ref="0xb72b11d0"/>
        <function-ref name="clr" scoped="" ref="0xb72b12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0xb72b0790" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0xb72b0790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72b0968"/>
        <function-ref name="isInput" scoped="" ref="0xb72b0a48"/>
        <function-ref name="toggle" scoped="" ref="0xb72b0b28"/>
        <function-ref name="isOutput" scoped="" ref="0xb72b0c08"/>
        <function-ref name="get" scoped="" ref="0xb72b0ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72b0dc8"/>
        <function-ref name="set" scoped="" ref="0xb72b0ea8"/>
        <function-ref name="clr" scoped="" ref="0xb72af010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0xb72ae4f0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0xb72ae4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72ae6c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72ae7a8"/>
        <function-ref name="toggle" scoped="" ref="0xb72ae888"/>
        <function-ref name="isOutput" scoped="" ref="0xb72ae968"/>
        <function-ref name="get" scoped="" ref="0xb72aea48"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72aeb28"/>
        <function-ref name="set" scoped="" ref="0xb72aec08"/>
        <function-ref name="clr" scoped="" ref="0xb72aece8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0xb72b1410" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0xb72b1410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72b15e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72b16c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72b17a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72b1888"/>
        <function-ref name="get" scoped="" ref="0xb72b1968"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72b1a48"/>
        <function-ref name="set" scoped="" ref="0xb72b1b28"/>
        <function-ref name="clr" scoped="" ref="0xb72b1c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0xb72af170" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0xb72af170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72af348"/>
        <function-ref name="isInput" scoped="" ref="0xb72af428"/>
        <function-ref name="toggle" scoped="" ref="0xb72af508"/>
        <function-ref name="isOutput" scoped="" ref="0xb72af5e8"/>
        <function-ref name="get" scoped="" ref="0xb72af6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72af7a8"/>
        <function-ref name="set" scoped="" ref="0xb72af888"/>
        <function-ref name="clr" scoped="" ref="0xb72af968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0xb72aee48" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0xb72aee48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72ac050"/>
        <function-ref name="isInput" scoped="" ref="0xb72ac130"/>
        <function-ref name="toggle" scoped="" ref="0xb72ac210"/>
        <function-ref name="isOutput" scoped="" ref="0xb72ac2f0"/>
        <function-ref name="get" scoped="" ref="0xb72ac3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72ac4b0"/>
        <function-ref name="set" scoped="" ref="0xb72ac590"/>
        <function-ref name="clr" scoped="" ref="0xb72ac670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6374dd0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6374dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6370010"/>
        <function-ref name="isInput" scoped="" ref="0xb63700f0"/>
        <function-ref name="toggle" scoped="" ref="0xb63701d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb63702b0"/>
        <function-ref name="get" scoped="" ref="0xb6370390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6370470"/>
        <function-ref name="set" scoped="" ref="0xb6370550"/>
        <function-ref name="clr" scoped="" ref="0xb6370630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb636f7f8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb636f7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb636f9d0"/>
        <function-ref name="isInput" scoped="" ref="0xb636fab0"/>
        <function-ref name="toggle" scoped="" ref="0xb636fb90"/>
        <function-ref name="isOutput" scoped="" ref="0xb636fc70"/>
        <function-ref name="get" scoped="" ref="0xb636fd50"/>
        <function-ref name="makeOutput" scoped="" ref="0xb636fe30"/>
        <function-ref name="set" scoped="" ref="0xb636ff10"/>
        <function-ref name="clr" scoped="" ref="0xb636e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb636d228" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb636d228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb636d400"/>
        <function-ref name="isInput" scoped="" ref="0xb636d4e0"/>
        <function-ref name="toggle" scoped="" ref="0xb636d5c0"/>
        <function-ref name="isOutput" scoped="" ref="0xb636d6a0"/>
        <function-ref name="get" scoped="" ref="0xb636d780"/>
        <function-ref name="makeOutput" scoped="" ref="0xb636d860"/>
        <function-ref name="set" scoped="" ref="0xb636d940"/>
        <function-ref name="clr" scoped="" ref="0xb636da20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb636cc08" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb636cc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb636cde0"/>
        <function-ref name="isInput" scoped="" ref="0xb636cec0"/>
        <function-ref name="toggle" scoped="" ref="0xb636b010"/>
        <function-ref name="isOutput" scoped="" ref="0xb636b0f0"/>
        <function-ref name="get" scoped="" ref="0xb636b1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb636b2b0"/>
        <function-ref name="set" scoped="" ref="0xb636b390"/>
        <function-ref name="clr" scoped="" ref="0xb636b470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb636a6c0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb636a6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb636a898"/>
        <function-ref name="isInput" scoped="" ref="0xb636a978"/>
        <function-ref name="toggle" scoped="" ref="0xb636aa58"/>
        <function-ref name="isOutput" scoped="" ref="0xb636ab38"/>
        <function-ref name="get" scoped="" ref="0xb636ac18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb636acf8"/>
        <function-ref name="set" scoped="" ref="0xb636add8"/>
        <function-ref name="clr" scoped="" ref="0xb636aeb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb63680b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb63680b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6368288"/>
        <function-ref name="isInput" scoped="" ref="0xb6368368"/>
        <function-ref name="toggle" scoped="" ref="0xb6368448"/>
        <function-ref name="isOutput" scoped="" ref="0xb6368528"/>
        <function-ref name="get" scoped="" ref="0xb6368608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb63686e8"/>
        <function-ref name="set" scoped="" ref="0xb63687c8"/>
        <function-ref name="clr" scoped="" ref="0xb63688a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6367a88" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6367a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6367c60"/>
        <function-ref name="isInput" scoped="" ref="0xb6367d40"/>
        <function-ref name="toggle" scoped="" ref="0xb6367e20"/>
        <function-ref name="isOutput" scoped="" ref="0xb6367f00"/>
        <function-ref name="get" scoped="" ref="0xb6366010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb63660f0"/>
        <function-ref name="set" scoped="" ref="0xb63661d0"/>
        <function-ref name="clr" scoped="" ref="0xb63662b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6365538" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6365538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6365710"/>
        <function-ref name="isInput" scoped="" ref="0xb63657f0"/>
        <function-ref name="toggle" scoped="" ref="0xb63658d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb63659b0"/>
        <function-ref name="get" scoped="" ref="0xb6365a90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6365b70"/>
        <function-ref name="set" scoped="" ref="0xb6365c50"/>
        <function-ref name="clr" scoped="" ref="0xb6365d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0xb72a86b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0xb72a86b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a8888"/>
        <function-ref name="isInput" scoped="" ref="0xb72a8968"/>
        <function-ref name="toggle" scoped="" ref="0xb72a8a48"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a8b28"/>
        <function-ref name="get" scoped="" ref="0xb72a8c08"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a8ce8"/>
        <function-ref name="set" scoped="" ref="0xb72a8dc8"/>
        <function-ref name="clr" scoped="" ref="0xb72a8ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0xb72a6330" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0xb72a6330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a6508"/>
        <function-ref name="isInput" scoped="" ref="0xb72a65e8"/>
        <function-ref name="toggle" scoped="" ref="0xb72a66c8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a67a8"/>
        <function-ref name="get" scoped="" ref="0xb72a6888"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a6968"/>
        <function-ref name="set" scoped="" ref="0xb72a6a48"/>
        <function-ref name="clr" scoped="" ref="0xb72a6b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0xb72a93d8" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0xb72a93d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a95b0"/>
        <function-ref name="isInput" scoped="" ref="0xb72a9690"/>
        <function-ref name="toggle" scoped="" ref="0xb72a9770"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a9850"/>
        <function-ref name="get" scoped="" ref="0xb72a9930"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a9a10"/>
        <function-ref name="set" scoped="" ref="0xb72a9af0"/>
        <function-ref name="clr" scoped="" ref="0xb72a9bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0xb72a7030" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0xb72a7030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a7208"/>
        <function-ref name="isInput" scoped="" ref="0xb72a72e8"/>
        <function-ref name="toggle" scoped="" ref="0xb72a73c8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a74a8"/>
        <function-ref name="get" scoped="" ref="0xb72a7588"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a7668"/>
        <function-ref name="set" scoped="" ref="0xb72a7748"/>
        <function-ref name="clr" scoped="" ref="0xb72a7828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0xb72a6c88" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0xb72a6c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a6e60"/>
        <function-ref name="isInput" scoped="" ref="0xb72a5010"/>
        <function-ref name="toggle" scoped="" ref="0xb72a50f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a51d0"/>
        <function-ref name="get" scoped="" ref="0xb72a52b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a5390"/>
        <function-ref name="set" scoped="" ref="0xb72a5470"/>
        <function-ref name="clr" scoped="" ref="0xb72a5550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0xb72a9d30" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0xb72a9d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a9f08"/>
        <function-ref name="isInput" scoped="" ref="0xb72a8010"/>
        <function-ref name="toggle" scoped="" ref="0xb72a80f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a81d0"/>
        <function-ref name="get" scoped="" ref="0xb72a82b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a8390"/>
        <function-ref name="set" scoped="" ref="0xb72a8470"/>
        <function-ref name="clr" scoped="" ref="0xb72a8550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0xb72a7988" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0xb72a7988"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a7b60"/>
        <function-ref name="isInput" scoped="" ref="0xb72a7c40"/>
        <function-ref name="toggle" scoped="" ref="0xb72a7d20"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a7e00"/>
        <function-ref name="get" scoped="" ref="0xb72a7ee0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a6010"/>
        <function-ref name="set" scoped="" ref="0xb72a60f0"/>
        <function-ref name="clr" scoped="" ref="0xb72a61d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0xb72a56b0" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0xb72a56b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a5888"/>
        <function-ref name="isInput" scoped="" ref="0xb72a5968"/>
        <function-ref name="toggle" scoped="" ref="0xb72a5a48"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a5b28"/>
        <function-ref name="get" scoped="" ref="0xb72a5c08"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a5ce8"/>
        <function-ref name="set" scoped="" ref="0xb72a5dc8"/>
        <function-ref name="clr" scoped="" ref="0xb72a5ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6335938" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6335938"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6335b10"/>
        <function-ref name="isInput" scoped="" ref="0xb6335bf0"/>
        <function-ref name="toggle" scoped="" ref="0xb6335cd0"/>
        <function-ref name="isOutput" scoped="" ref="0xb6335db0"/>
        <function-ref name="get" scoped="" ref="0xb6335e90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6334010"/>
        <function-ref name="set" scoped="" ref="0xb63340f0"/>
        <function-ref name="clr" scoped="" ref="0xb63341d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb63333b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb63333b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6333588"/>
        <function-ref name="isInput" scoped="" ref="0xb6333668"/>
        <function-ref name="toggle" scoped="" ref="0xb6333748"/>
        <function-ref name="isOutput" scoped="" ref="0xb6333828"/>
        <function-ref name="get" scoped="" ref="0xb6333908"/>
        <function-ref name="makeOutput" scoped="" ref="0xb63339e8"/>
        <function-ref name="set" scoped="" ref="0xb6333ac8"/>
        <function-ref name="clr" scoped="" ref="0xb6333ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6332d70" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6332d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6331010"/>
        <function-ref name="isInput" scoped="" ref="0xb63310f0"/>
        <function-ref name="toggle" scoped="" ref="0xb63311d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb63312b0"/>
        <function-ref name="get" scoped="" ref="0xb6331390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6331470"/>
        <function-ref name="set" scoped="" ref="0xb6331550"/>
        <function-ref name="clr" scoped="" ref="0xb6331630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb63307f8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb63307f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb63309d0"/>
        <function-ref name="isInput" scoped="" ref="0xb6330ab0"/>
        <function-ref name="toggle" scoped="" ref="0xb6330b90"/>
        <function-ref name="isOutput" scoped="" ref="0xb6330c70"/>
        <function-ref name="get" scoped="" ref="0xb6330d50"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6330e30"/>
        <function-ref name="set" scoped="" ref="0xb6330f10"/>
        <function-ref name="clr" scoped="" ref="0xb632f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb632e228" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb632e228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb632e400"/>
        <function-ref name="isInput" scoped="" ref="0xb632e4e0"/>
        <function-ref name="toggle" scoped="" ref="0xb632e5c0"/>
        <function-ref name="isOutput" scoped="" ref="0xb632e6a0"/>
        <function-ref name="get" scoped="" ref="0xb632e780"/>
        <function-ref name="makeOutput" scoped="" ref="0xb632e860"/>
        <function-ref name="set" scoped="" ref="0xb632e940"/>
        <function-ref name="clr" scoped="" ref="0xb632ea20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb632dc08" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb632dc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb632dde0"/>
        <function-ref name="isInput" scoped="" ref="0xb632dec0"/>
        <function-ref name="toggle" scoped="" ref="0xb632c010"/>
        <function-ref name="isOutput" scoped="" ref="0xb632c0f0"/>
        <function-ref name="get" scoped="" ref="0xb632c1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb632c2b0"/>
        <function-ref name="set" scoped="" ref="0xb632c390"/>
        <function-ref name="clr" scoped="" ref="0xb632c470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb632b6c0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb632b6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb632b898"/>
        <function-ref name="isInput" scoped="" ref="0xb632b978"/>
        <function-ref name="toggle" scoped="" ref="0xb632ba58"/>
        <function-ref name="isOutput" scoped="" ref="0xb632bb38"/>
        <function-ref name="get" scoped="" ref="0xb632bc18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb632bcf8"/>
        <function-ref name="set" scoped="" ref="0xb632bdd8"/>
        <function-ref name="clr" scoped="" ref="0xb632beb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb63290b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb63290b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6329288"/>
        <function-ref name="isInput" scoped="" ref="0xb6329368"/>
        <function-ref name="toggle" scoped="" ref="0xb6329448"/>
        <function-ref name="isOutput" scoped="" ref="0xb6329528"/>
        <function-ref name="get" scoped="" ref="0xb6329608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb63296e8"/>
        <function-ref name="set" scoped="" ref="0xb63297c8"/>
        <function-ref name="clr" scoped="" ref="0xb63298a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0xb729f170" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0xb729f170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729f348"/>
        <function-ref name="isInput" scoped="" ref="0xb729f428"/>
        <function-ref name="toggle" scoped="" ref="0xb729f508"/>
        <function-ref name="isOutput" scoped="" ref="0xb729f5e8"/>
        <function-ref name="get" scoped="" ref="0xb729f6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729f7a8"/>
        <function-ref name="set" scoped="" ref="0xb729f888"/>
        <function-ref name="clr" scoped="" ref="0xb729f968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0xb729ee48" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0xb729ee48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729d050"/>
        <function-ref name="isInput" scoped="" ref="0xb729d130"/>
        <function-ref name="toggle" scoped="" ref="0xb729d210"/>
        <function-ref name="isOutput" scoped="" ref="0xb729d2f0"/>
        <function-ref name="get" scoped="" ref="0xb729d3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729d4b0"/>
        <function-ref name="set" scoped="" ref="0xb729d590"/>
        <function-ref name="clr" scoped="" ref="0xb729d670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0xb72a1dc8" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0xb72a1dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a0010"/>
        <function-ref name="isInput" scoped="" ref="0xb72a00f0"/>
        <function-ref name="toggle" scoped="" ref="0xb72a01d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a02b0"/>
        <function-ref name="get" scoped="" ref="0xb72a0390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a0470"/>
        <function-ref name="set" scoped="" ref="0xb72a0550"/>
        <function-ref name="clr" scoped="" ref="0xb72a0630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0xb729fac8" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0xb729fac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729fca0"/>
        <function-ref name="isInput" scoped="" ref="0xb729fd80"/>
        <function-ref name="toggle" scoped="" ref="0xb729fe60"/>
        <function-ref name="isOutput" scoped="" ref="0xb729e010"/>
        <function-ref name="get" scoped="" ref="0xb729e0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729e1d0"/>
        <function-ref name="set" scoped="" ref="0xb729e2b0"/>
        <function-ref name="clr" scoped="" ref="0xb729e390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0xb729d7d0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0xb729d7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729d9a8"/>
        <function-ref name="isInput" scoped="" ref="0xb729da88"/>
        <function-ref name="toggle" scoped="" ref="0xb729db68"/>
        <function-ref name="isOutput" scoped="" ref="0xb729dc48"/>
        <function-ref name="get" scoped="" ref="0xb729dd28"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729de08"/>
        <function-ref name="set" scoped="" ref="0xb729dee8"/>
        <function-ref name="clr" scoped="" ref="0xb729c010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0xb72a0790" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0xb72a0790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a0968"/>
        <function-ref name="isInput" scoped="" ref="0xb72a0a48"/>
        <function-ref name="toggle" scoped="" ref="0xb72a0b28"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a0c08"/>
        <function-ref name="get" scoped="" ref="0xb72a0ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a0dc8"/>
        <function-ref name="set" scoped="" ref="0xb72a0ea8"/>
        <function-ref name="clr" scoped="" ref="0xb729f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0xb729e4f0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0xb729e4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729e6c8"/>
        <function-ref name="isInput" scoped="" ref="0xb729e7a8"/>
        <function-ref name="toggle" scoped="" ref="0xb729e888"/>
        <function-ref name="isOutput" scoped="" ref="0xb729e968"/>
        <function-ref name="get" scoped="" ref="0xb729ea48"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729eb28"/>
        <function-ref name="set" scoped="" ref="0xb729ec08"/>
        <function-ref name="clr" scoped="" ref="0xb729ece8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0xb729c170" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0xb729c170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729c348"/>
        <function-ref name="isInput" scoped="" ref="0xb729c428"/>
        <function-ref name="toggle" scoped="" ref="0xb729c508"/>
        <function-ref name="isOutput" scoped="" ref="0xb729c5e8"/>
        <function-ref name="get" scoped="" ref="0xb729c6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729c7a8"/>
        <function-ref name="set" scoped="" ref="0xb729c888"/>
        <function-ref name="clr" scoped="" ref="0xb729c968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62fd538" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62fd538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62fd710"/>
        <function-ref name="isInput" scoped="" ref="0xb62fd7f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62fd8d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62fd9b0"/>
        <function-ref name="get" scoped="" ref="0xb62fda90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62fdb70"/>
        <function-ref name="set" scoped="" ref="0xb62fdc50"/>
        <function-ref name="clr" scoped="" ref="0xb62fdd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62fb010" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62fb010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62fb1e8"/>
        <function-ref name="isInput" scoped="" ref="0xb62fb2c8"/>
        <function-ref name="toggle" scoped="" ref="0xb62fb3a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb62fb488"/>
        <function-ref name="get" scoped="" ref="0xb62fb568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62fb648"/>
        <function-ref name="set" scoped="" ref="0xb62fb728"/>
        <function-ref name="clr" scoped="" ref="0xb62fb808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62fa9e8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62fa9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62fabc0"/>
        <function-ref name="isInput" scoped="" ref="0xb62faca0"/>
        <function-ref name="toggle" scoped="" ref="0xb62fad80"/>
        <function-ref name="isOutput" scoped="" ref="0xb62fae60"/>
        <function-ref name="get" scoped="" ref="0xb62f9010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62f90f0"/>
        <function-ref name="set" scoped="" ref="0xb62f91d0"/>
        <function-ref name="clr" scoped="" ref="0xb62f92b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62f8538" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62f8538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62f8710"/>
        <function-ref name="isInput" scoped="" ref="0xb62f87f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62f88d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62f89b0"/>
        <function-ref name="get" scoped="" ref="0xb62f8a90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62f8b70"/>
        <function-ref name="set" scoped="" ref="0xb62f8c50"/>
        <function-ref name="clr" scoped="" ref="0xb62f8d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62f6010" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62f6010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62f61e8"/>
        <function-ref name="isInput" scoped="" ref="0xb62f62c8"/>
        <function-ref name="toggle" scoped="" ref="0xb62f63a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb62f6488"/>
        <function-ref name="get" scoped="" ref="0xb62f6568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62f6648"/>
        <function-ref name="set" scoped="" ref="0xb62f6728"/>
        <function-ref name="clr" scoped="" ref="0xb62f6808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62f59e8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62f59e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62f5bc0"/>
        <function-ref name="isInput" scoped="" ref="0xb62f5ca0"/>
        <function-ref name="toggle" scoped="" ref="0xb62f5d80"/>
        <function-ref name="isOutput" scoped="" ref="0xb62f5e60"/>
        <function-ref name="get" scoped="" ref="0xb62f4010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62f40f0"/>
        <function-ref name="set" scoped="" ref="0xb62f41d0"/>
        <function-ref name="clr" scoped="" ref="0xb62f42b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62f3538" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62f3538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62f3710"/>
        <function-ref name="isInput" scoped="" ref="0xb62f37f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62f38d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62f39b0"/>
        <function-ref name="get" scoped="" ref="0xb62f3a90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62f3b70"/>
        <function-ref name="set" scoped="" ref="0xb62f3c50"/>
        <function-ref name="clr" scoped="" ref="0xb62f3d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62f0010" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62f0010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62f01e8"/>
        <function-ref name="isInput" scoped="" ref="0xb62f02c8"/>
        <function-ref name="toggle" scoped="" ref="0xb62f03a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb62f0488"/>
        <function-ref name="get" scoped="" ref="0xb62f0568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62f0648"/>
        <function-ref name="set" scoped="" ref="0xb62f0728"/>
        <function-ref name="clr" scoped="" ref="0xb62f0808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0xb72989e8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0xb72989e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7298bc0"/>
        <function-ref name="isInput" scoped="" ref="0xb7298ca0"/>
        <function-ref name="toggle" scoped="" ref="0xb7298d80"/>
        <function-ref name="isOutput" scoped="" ref="0xb7298e60"/>
        <function-ref name="get" scoped="" ref="0xb7296010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72960f0"/>
        <function-ref name="set" scoped="" ref="0xb72961d0"/>
        <function-ref name="clr" scoped="" ref="0xb72962b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0xb7295790" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0xb7295790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7295968"/>
        <function-ref name="isInput" scoped="" ref="0xb7295a48"/>
        <function-ref name="toggle" scoped="" ref="0xb7295b28"/>
        <function-ref name="isOutput" scoped="" ref="0xb7295c08"/>
        <function-ref name="get" scoped="" ref="0xb7295ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7295dc8"/>
        <function-ref name="set" scoped="" ref="0xb7295ea8"/>
        <function-ref name="clr" scoped="" ref="0xb7294010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0xb72996f8" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0xb72996f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72998d0"/>
        <function-ref name="isInput" scoped="" ref="0xb72999b0"/>
        <function-ref name="toggle" scoped="" ref="0xb7299a90"/>
        <function-ref name="isOutput" scoped="" ref="0xb7299b70"/>
        <function-ref name="get" scoped="" ref="0xb7299c50"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7299d30"/>
        <function-ref name="set" scoped="" ref="0xb7299e10"/>
        <function-ref name="clr" scoped="" ref="0xb7299ef0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0xb7296410" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0xb7296410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72965e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72966c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72967a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7296888"/>
        <function-ref name="get" scoped="" ref="0xb7296968"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7296a48"/>
        <function-ref name="set" scoped="" ref="0xb7296b28"/>
        <function-ref name="clr" scoped="" ref="0xb7296c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0xb7294170" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0xb7294170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7294348"/>
        <function-ref name="isInput" scoped="" ref="0xb7294428"/>
        <function-ref name="toggle" scoped="" ref="0xb7294508"/>
        <function-ref name="isOutput" scoped="" ref="0xb72945e8"/>
        <function-ref name="get" scoped="" ref="0xb72946c8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72947a8"/>
        <function-ref name="set" scoped="" ref="0xb7294888"/>
        <function-ref name="clr" scoped="" ref="0xb7294968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0xb7298090" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0xb7298090"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7298268"/>
        <function-ref name="isInput" scoped="" ref="0xb7298348"/>
        <function-ref name="toggle" scoped="" ref="0xb7298428"/>
        <function-ref name="isOutput" scoped="" ref="0xb7298508"/>
        <function-ref name="get" scoped="" ref="0xb72985e8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72986c8"/>
        <function-ref name="set" scoped="" ref="0xb72987a8"/>
        <function-ref name="clr" scoped="" ref="0xb7298888"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0xb7296d68" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0xb7296d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7295010"/>
        <function-ref name="isInput" scoped="" ref="0xb72950f0"/>
        <function-ref name="toggle" scoped="" ref="0xb72951d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72952b0"/>
        <function-ref name="get" scoped="" ref="0xb7295390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7295470"/>
        <function-ref name="set" scoped="" ref="0xb7295550"/>
        <function-ref name="clr" scoped="" ref="0xb7295630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0xb7294ac8" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0xb7294ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7294ca0"/>
        <function-ref name="isInput" scoped="" ref="0xb7294d80"/>
        <function-ref name="toggle" scoped="" ref="0xb7294e60"/>
        <function-ref name="isOutput" scoped="" ref="0xb7293010"/>
        <function-ref name="get" scoped="" ref="0xb72930f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72931d0"/>
        <function-ref name="set" scoped="" ref="0xb72932b0"/>
        <function-ref name="clr" scoped="" ref="0xb7293390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62c4418" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62c4418"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62c45f0"/>
        <function-ref name="isInput" scoped="" ref="0xb62c46d0"/>
        <function-ref name="toggle" scoped="" ref="0xb62c47b0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62c4890"/>
        <function-ref name="get" scoped="" ref="0xb62c4970"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62c4a50"/>
        <function-ref name="set" scoped="" ref="0xb62c4b30"/>
        <function-ref name="clr" scoped="" ref="0xb62c4c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62c3de0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62c3de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62c2010"/>
        <function-ref name="isInput" scoped="" ref="0xb62c20f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62c21d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62c22b0"/>
        <function-ref name="get" scoped="" ref="0xb62c2390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62c2470"/>
        <function-ref name="set" scoped="" ref="0xb62c2550"/>
        <function-ref name="clr" scoped="" ref="0xb62c2630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62c17f8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62c17f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62c19d0"/>
        <function-ref name="isInput" scoped="" ref="0xb62c1ab0"/>
        <function-ref name="toggle" scoped="" ref="0xb62c1b90"/>
        <function-ref name="isOutput" scoped="" ref="0xb62c1c70"/>
        <function-ref name="get" scoped="" ref="0xb62c1d50"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62c1e30"/>
        <function-ref name="set" scoped="" ref="0xb62c1f10"/>
        <function-ref name="clr" scoped="" ref="0xb62c0010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62bf228" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62bf228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62bf400"/>
        <function-ref name="isInput" scoped="" ref="0xb62bf4e0"/>
        <function-ref name="toggle" scoped="" ref="0xb62bf5c0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62bf6a0"/>
        <function-ref name="get" scoped="" ref="0xb62bf780"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62bf860"/>
        <function-ref name="set" scoped="" ref="0xb62bf940"/>
        <function-ref name="clr" scoped="" ref="0xb62bfa20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62bec08" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62bec08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62bede0"/>
        <function-ref name="isInput" scoped="" ref="0xb62beec0"/>
        <function-ref name="toggle" scoped="" ref="0xb62bd010"/>
        <function-ref name="isOutput" scoped="" ref="0xb62bd0f0"/>
        <function-ref name="get" scoped="" ref="0xb62bd1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62bd2b0"/>
        <function-ref name="set" scoped="" ref="0xb62bd390"/>
        <function-ref name="clr" scoped="" ref="0xb62bd470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62bc6c0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62bc6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62bc898"/>
        <function-ref name="isInput" scoped="" ref="0xb62bc978"/>
        <function-ref name="toggle" scoped="" ref="0xb62bca58"/>
        <function-ref name="isOutput" scoped="" ref="0xb62bcb38"/>
        <function-ref name="get" scoped="" ref="0xb62bcc18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62bccf8"/>
        <function-ref name="set" scoped="" ref="0xb62bcdd8"/>
        <function-ref name="clr" scoped="" ref="0xb62bceb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62ba0b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62ba0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62ba288"/>
        <function-ref name="isInput" scoped="" ref="0xb62ba368"/>
        <function-ref name="toggle" scoped="" ref="0xb62ba448"/>
        <function-ref name="isOutput" scoped="" ref="0xb62ba528"/>
        <function-ref name="get" scoped="" ref="0xb62ba608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62ba6e8"/>
        <function-ref name="set" scoped="" ref="0xb62ba7c8"/>
        <function-ref name="clr" scoped="" ref="0xb62ba8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62b9a88" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62b9a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62b9c60"/>
        <function-ref name="isInput" scoped="" ref="0xb62b9d40"/>
        <function-ref name="toggle" scoped="" ref="0xb62b9e20"/>
        <function-ref name="isOutput" scoped="" ref="0xb62b9f00"/>
        <function-ref name="get" scoped="" ref="0xb62b8010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62b80f0"/>
        <function-ref name="set" scoped="" ref="0xb62b81d0"/>
        <function-ref name="clr" scoped="" ref="0xb62b82b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0xb728f410" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0xb728f410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728f5e8"/>
        <function-ref name="isInput" scoped="" ref="0xb728f6c8"/>
        <function-ref name="toggle" scoped="" ref="0xb728f7a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb728f888"/>
        <function-ref name="get" scoped="" ref="0xb728f968"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728fa48"/>
        <function-ref name="set" scoped="" ref="0xb728fb28"/>
        <function-ref name="clr" scoped="" ref="0xb728fc08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0xb728d170" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0xb728d170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728d348"/>
        <function-ref name="isInput" scoped="" ref="0xb728d428"/>
        <function-ref name="toggle" scoped="" ref="0xb728d508"/>
        <function-ref name="isOutput" scoped="" ref="0xb728d5e8"/>
        <function-ref name="get" scoped="" ref="0xb728d6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728d7a8"/>
        <function-ref name="set" scoped="" ref="0xb728d888"/>
        <function-ref name="clr" scoped="" ref="0xb728d968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0xb7290128" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0xb7290128"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7290300"/>
        <function-ref name="isInput" scoped="" ref="0xb72903e0"/>
        <function-ref name="toggle" scoped="" ref="0xb72904c0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72905a0"/>
        <function-ref name="get" scoped="" ref="0xb7290680"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7290760"/>
        <function-ref name="set" scoped="" ref="0xb7290840"/>
        <function-ref name="clr" scoped="" ref="0xb7290920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0xb728fd68" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0xb728fd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728e010"/>
        <function-ref name="isInput" scoped="" ref="0xb728e0f0"/>
        <function-ref name="toggle" scoped="" ref="0xb728e1d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb728e2b0"/>
        <function-ref name="get" scoped="" ref="0xb728e390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728e470"/>
        <function-ref name="set" scoped="" ref="0xb728e550"/>
        <function-ref name="clr" scoped="" ref="0xb728e630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0xb728dac8" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0xb728dac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728dca0"/>
        <function-ref name="isInput" scoped="" ref="0xb728dd80"/>
        <function-ref name="toggle" scoped="" ref="0xb728de60"/>
        <function-ref name="isOutput" scoped="" ref="0xb728b010"/>
        <function-ref name="get" scoped="" ref="0xb728b0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728b1d0"/>
        <function-ref name="set" scoped="" ref="0xb728b2b0"/>
        <function-ref name="clr" scoped="" ref="0xb728b390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0xb7290a80" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0xb7290a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7290c58"/>
        <function-ref name="isInput" scoped="" ref="0xb7290d38"/>
        <function-ref name="toggle" scoped="" ref="0xb7290e18"/>
        <function-ref name="isOutput" scoped="" ref="0xb7290ef8"/>
        <function-ref name="get" scoped="" ref="0xb728f010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728f0f0"/>
        <function-ref name="set" scoped="" ref="0xb728f1d0"/>
        <function-ref name="clr" scoped="" ref="0xb728f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0xb728e790" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0xb728e790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728e968"/>
        <function-ref name="isInput" scoped="" ref="0xb728ea48"/>
        <function-ref name="toggle" scoped="" ref="0xb728eb28"/>
        <function-ref name="isOutput" scoped="" ref="0xb728ec08"/>
        <function-ref name="get" scoped="" ref="0xb728ece8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728edc8"/>
        <function-ref name="set" scoped="" ref="0xb728eea8"/>
        <function-ref name="clr" scoped="" ref="0xb728d010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0xb728b4f0" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0xb728b4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728b6c8"/>
        <function-ref name="isInput" scoped="" ref="0xb728b7a8"/>
        <function-ref name="toggle" scoped="" ref="0xb728b888"/>
        <function-ref name="isOutput" scoped="" ref="0xb728b968"/>
        <function-ref name="get" scoped="" ref="0xb728ba48"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728bb28"/>
        <function-ref name="set" scoped="" ref="0xb728bc08"/>
        <function-ref name="clr" scoped="" ref="0xb728bce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb628c6c0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb628c6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb628c898"/>
        <function-ref name="isInput" scoped="" ref="0xb628c978"/>
        <function-ref name="toggle" scoped="" ref="0xb628ca58"/>
        <function-ref name="isOutput" scoped="" ref="0xb628cb38"/>
        <function-ref name="get" scoped="" ref="0xb628cc18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb628ccf8"/>
        <function-ref name="set" scoped="" ref="0xb628cdd8"/>
        <function-ref name="clr" scoped="" ref="0xb628ceb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb628a0b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb628a0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb628a288"/>
        <function-ref name="isInput" scoped="" ref="0xb628a368"/>
        <function-ref name="toggle" scoped="" ref="0xb628a448"/>
        <function-ref name="isOutput" scoped="" ref="0xb628a528"/>
        <function-ref name="get" scoped="" ref="0xb628a608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb628a6e8"/>
        <function-ref name="set" scoped="" ref="0xb628a7c8"/>
        <function-ref name="clr" scoped="" ref="0xb628a8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6289a88" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6289a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6289c60"/>
        <function-ref name="isInput" scoped="" ref="0xb6289d40"/>
        <function-ref name="toggle" scoped="" ref="0xb6289e20"/>
        <function-ref name="isOutput" scoped="" ref="0xb6289f00"/>
        <function-ref name="get" scoped="" ref="0xb6288010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62880f0"/>
        <function-ref name="set" scoped="" ref="0xb62881d0"/>
        <function-ref name="clr" scoped="" ref="0xb62882b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6287538" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6287538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6287710"/>
        <function-ref name="isInput" scoped="" ref="0xb62877f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62878d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62879b0"/>
        <function-ref name="get" scoped="" ref="0xb6287a90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6287b70"/>
        <function-ref name="set" scoped="" ref="0xb6287c50"/>
        <function-ref name="clr" scoped="" ref="0xb6287d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6285010" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6285010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62851e8"/>
        <function-ref name="isInput" scoped="" ref="0xb62852c8"/>
        <function-ref name="toggle" scoped="" ref="0xb62853a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb6285488"/>
        <function-ref name="get" scoped="" ref="0xb6285568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6285648"/>
        <function-ref name="set" scoped="" ref="0xb6285728"/>
        <function-ref name="clr" scoped="" ref="0xb6285808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62849e8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62849e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6284bc0"/>
        <function-ref name="isInput" scoped="" ref="0xb6284ca0"/>
        <function-ref name="toggle" scoped="" ref="0xb6284d80"/>
        <function-ref name="isOutput" scoped="" ref="0xb6284e60"/>
        <function-ref name="get" scoped="" ref="0xb6282010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62820f0"/>
        <function-ref name="set" scoped="" ref="0xb62821d0"/>
        <function-ref name="clr" scoped="" ref="0xb62822b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6281538" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6281538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6281710"/>
        <function-ref name="isInput" scoped="" ref="0xb62817f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62818d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62819b0"/>
        <function-ref name="get" scoped="" ref="0xb6281a90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6281b70"/>
        <function-ref name="set" scoped="" ref="0xb6281c50"/>
        <function-ref name="clr" scoped="" ref="0xb6281d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb627f010" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb627f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb627f1e8"/>
        <function-ref name="isInput" scoped="" ref="0xb627f2c8"/>
        <function-ref name="toggle" scoped="" ref="0xb627f3a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb627f488"/>
        <function-ref name="get" scoped="" ref="0xb627f568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb627f648"/>
        <function-ref name="set" scoped="" ref="0xb627f728"/>
        <function-ref name="clr" scoped="" ref="0xb627f808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0xb7287e48" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0xb7287e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7286050"/>
        <function-ref name="isInput" scoped="" ref="0xb7286130"/>
        <function-ref name="toggle" scoped="" ref="0xb7286210"/>
        <function-ref name="isOutput" scoped="" ref="0xb72862f0"/>
        <function-ref name="get" scoped="" ref="0xb72863d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72864b0"/>
        <function-ref name="set" scoped="" ref="0xb7286590"/>
        <function-ref name="clr" scoped="" ref="0xb7286670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0xb7285ac8" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0xb7285ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7285ca0"/>
        <function-ref name="isInput" scoped="" ref="0xb7285d80"/>
        <function-ref name="toggle" scoped="" ref="0xb7285e60"/>
        <function-ref name="isOutput" scoped="" ref="0xb7284010"/>
        <function-ref name="get" scoped="" ref="0xb72840f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72841d0"/>
        <function-ref name="set" scoped="" ref="0xb72842b0"/>
        <function-ref name="clr" scoped="" ref="0xb7284390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0xb7288b00" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0xb7288b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7288cd8"/>
        <function-ref name="isInput" scoped="" ref="0xb7288db8"/>
        <function-ref name="toggle" scoped="" ref="0xb7288e98"/>
        <function-ref name="isOutput" scoped="" ref="0xb7287010"/>
        <function-ref name="get" scoped="" ref="0xb72870f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72871d0"/>
        <function-ref name="set" scoped="" ref="0xb72872b0"/>
        <function-ref name="clr" scoped="" ref="0xb7287390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0xb72867d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0xb72867d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72869a8"/>
        <function-ref name="isInput" scoped="" ref="0xb7286a88"/>
        <function-ref name="toggle" scoped="" ref="0xb7286b68"/>
        <function-ref name="isOutput" scoped="" ref="0xb7286c48"/>
        <function-ref name="get" scoped="" ref="0xb7286d28"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7286e08"/>
        <function-ref name="set" scoped="" ref="0xb7286ee8"/>
        <function-ref name="clr" scoped="" ref="0xb7285010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0xb72844f0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0xb72844f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72846c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72847a8"/>
        <function-ref name="toggle" scoped="" ref="0xb7284888"/>
        <function-ref name="isOutput" scoped="" ref="0xb7284968"/>
        <function-ref name="get" scoped="" ref="0xb7284a48"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7284b28"/>
        <function-ref name="set" scoped="" ref="0xb7284c08"/>
        <function-ref name="clr" scoped="" ref="0xb7284ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0xb72874f0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0xb72874f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72876c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72877a8"/>
        <function-ref name="toggle" scoped="" ref="0xb7287888"/>
        <function-ref name="isOutput" scoped="" ref="0xb7287968"/>
        <function-ref name="get" scoped="" ref="0xb7287a48"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7287b28"/>
        <function-ref name="set" scoped="" ref="0xb7287c08"/>
        <function-ref name="clr" scoped="" ref="0xb7287ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0xb7285170" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0xb7285170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7285348"/>
        <function-ref name="isInput" scoped="" ref="0xb7285428"/>
        <function-ref name="toggle" scoped="" ref="0xb7285508"/>
        <function-ref name="isOutput" scoped="" ref="0xb72855e8"/>
        <function-ref name="get" scoped="" ref="0xb72856c8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72857a8"/>
        <function-ref name="set" scoped="" ref="0xb7285888"/>
        <function-ref name="clr" scoped="" ref="0xb7285968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0xb7284e48" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0xb7284e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7283050"/>
        <function-ref name="isInput" scoped="" ref="0xb7283130"/>
        <function-ref name="toggle" scoped="" ref="0xb7283210"/>
        <function-ref name="isOutput" scoped="" ref="0xb72832f0"/>
        <function-ref name="get" scoped="" ref="0xb72833d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72834b0"/>
        <function-ref name="set" scoped="" ref="0xb7283590"/>
        <function-ref name="clr" scoped="" ref="0xb7283670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6253418" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6253418"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62535f0"/>
        <function-ref name="isInput" scoped="" ref="0xb62536d0"/>
        <function-ref name="toggle" scoped="" ref="0xb62537b0"/>
        <function-ref name="isOutput" scoped="" ref="0xb6253890"/>
        <function-ref name="get" scoped="" ref="0xb6253970"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6253a50"/>
        <function-ref name="set" scoped="" ref="0xb6253b30"/>
        <function-ref name="clr" scoped="" ref="0xb6253c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6252de0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6252de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6251010"/>
        <function-ref name="isInput" scoped="" ref="0xb62510f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62511d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62512b0"/>
        <function-ref name="get" scoped="" ref="0xb6251390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6251470"/>
        <function-ref name="set" scoped="" ref="0xb6251550"/>
        <function-ref name="clr" scoped="" ref="0xb6251630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62507f8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62507f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62509d0"/>
        <function-ref name="isInput" scoped="" ref="0xb6250ab0"/>
        <function-ref name="toggle" scoped="" ref="0xb6250b90"/>
        <function-ref name="isOutput" scoped="" ref="0xb6250c70"/>
        <function-ref name="get" scoped="" ref="0xb6250d50"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6250e30"/>
        <function-ref name="set" scoped="" ref="0xb6250f10"/>
        <function-ref name="clr" scoped="" ref="0xb624f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb624e228" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb624e228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb624e400"/>
        <function-ref name="isInput" scoped="" ref="0xb624e4e0"/>
        <function-ref name="toggle" scoped="" ref="0xb624e5c0"/>
        <function-ref name="isOutput" scoped="" ref="0xb624e6a0"/>
        <function-ref name="get" scoped="" ref="0xb624e780"/>
        <function-ref name="makeOutput" scoped="" ref="0xb624e860"/>
        <function-ref name="set" scoped="" ref="0xb624e940"/>
        <function-ref name="clr" scoped="" ref="0xb624ea20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb624dc08" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb624dc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb624dde0"/>
        <function-ref name="isInput" scoped="" ref="0xb624dec0"/>
        <function-ref name="toggle" scoped="" ref="0xb624c010"/>
        <function-ref name="isOutput" scoped="" ref="0xb624c0f0"/>
        <function-ref name="get" scoped="" ref="0xb624c1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb624c2b0"/>
        <function-ref name="set" scoped="" ref="0xb624c390"/>
        <function-ref name="clr" scoped="" ref="0xb624c470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb624b6c0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb624b6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb624b898"/>
        <function-ref name="isInput" scoped="" ref="0xb624b978"/>
        <function-ref name="toggle" scoped="" ref="0xb624ba58"/>
        <function-ref name="isOutput" scoped="" ref="0xb624bb38"/>
        <function-ref name="get" scoped="" ref="0xb624bc18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb624bcf8"/>
        <function-ref name="set" scoped="" ref="0xb624bdd8"/>
        <function-ref name="clr" scoped="" ref="0xb624beb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62490b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62490b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6249288"/>
        <function-ref name="isInput" scoped="" ref="0xb6249368"/>
        <function-ref name="toggle" scoped="" ref="0xb6249448"/>
        <function-ref name="isOutput" scoped="" ref="0xb6249528"/>
        <function-ref name="get" scoped="" ref="0xb6249608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62496e8"/>
        <function-ref name="set" scoped="" ref="0xb62497c8"/>
        <function-ref name="clr" scoped="" ref="0xb62498a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6248a88" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6248a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6248c60"/>
        <function-ref name="isInput" scoped="" ref="0xb6248d40"/>
        <function-ref name="toggle" scoped="" ref="0xb6248e20"/>
        <function-ref name="isOutput" scoped="" ref="0xb6248f00"/>
        <function-ref name="get" scoped="" ref="0xb6247010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62470f0"/>
        <function-ref name="set" scoped="" ref="0xb62471d0"/>
        <function-ref name="clr" scoped="" ref="0xb62472b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb727d010" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb727d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb727d1e8"/>
        <function-ref name="isInput" scoped="" ref="0xb727d2c8"/>
        <function-ref name="toggle" scoped="" ref="0xb727d3a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb727d488"/>
        <function-ref name="get" scoped="" ref="0xb727d568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb727d648"/>
        <function-ref name="set" scoped="" ref="0xb727d728"/>
        <function-ref name="clr" scoped="" ref="0xb727d808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb726f7b8" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb726f7b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb726f990"/>
        <function-ref name="isInput" scoped="" ref="0xb726fa70"/>
        <function-ref name="toggle" scoped="" ref="0xb726fb50"/>
        <function-ref name="isOutput" scoped="" ref="0xb726fc30"/>
        <function-ref name="get" scoped="" ref="0xb726fd10"/>
        <function-ref name="makeOutput" scoped="" ref="0xb726fdf0"/>
        <function-ref name="set" scoped="" ref="0xb726fed0"/>
        <function-ref name="clr" scoped="" ref="0xb726e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb726c010" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb726c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb726c1e8"/>
        <function-ref name="isInput" scoped="" ref="0xb726c2c8"/>
        <function-ref name="toggle" scoped="" ref="0xb726c3a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb726c488"/>
        <function-ref name="get" scoped="" ref="0xb726c568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb726c648"/>
        <function-ref name="set" scoped="" ref="0xb726c728"/>
        <function-ref name="clr" scoped="" ref="0xb726c808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb72697b8" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb72697b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7269990"/>
        <function-ref name="isInput" scoped="" ref="0xb7269a70"/>
        <function-ref name="toggle" scoped="" ref="0xb7269b50"/>
        <function-ref name="isOutput" scoped="" ref="0xb7269c30"/>
        <function-ref name="get" scoped="" ref="0xb7269d10"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7269df0"/>
        <function-ref name="set" scoped="" ref="0xb7269ed0"/>
        <function-ref name="clr" scoped="" ref="0xb7268010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb7266010" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb7266010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72661e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72662c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72663a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7266488"/>
        <function-ref name="get" scoped="" ref="0xb7266568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7266648"/>
        <function-ref name="set" scoped="" ref="0xb7266728"/>
        <function-ref name="clr" scoped="" ref="0xb7266808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb72647b8" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb72647b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7264990"/>
        <function-ref name="isInput" scoped="" ref="0xb7264a70"/>
        <function-ref name="toggle" scoped="" ref="0xb7264b50"/>
        <function-ref name="isOutput" scoped="" ref="0xb7264c30"/>
        <function-ref name="get" scoped="" ref="0xb7264d10"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7264df0"/>
        <function-ref name="set" scoped="" ref="0xb7264ed0"/>
        <function-ref name="clr" scoped="" ref="0xb7263010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb7260080" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb7260080"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7260258"/>
        <function-ref name="isInput" scoped="" ref="0xb7260338"/>
        <function-ref name="toggle" scoped="" ref="0xb7260418"/>
        <function-ref name="isOutput" scoped="" ref="0xb72604f8"/>
        <function-ref name="get" scoped="" ref="0xb72605d8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72606b8"/>
        <function-ref name="set" scoped="" ref="0xb7260798"/>
        <function-ref name="clr" scoped="" ref="0xb7260878"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb725e840" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb725e840"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb725ea18"/>
        <function-ref name="isInput" scoped="" ref="0xb725eaf8"/>
        <function-ref name="toggle" scoped="" ref="0xb725ebd8"/>
        <function-ref name="isOutput" scoped="" ref="0xb725ecb8"/>
        <function-ref name="get" scoped="" ref="0xb725ed98"/>
        <function-ref name="makeOutput" scoped="" ref="0xb725ee78"/>
        <function-ref name="set" scoped="" ref="0xb725d010"/>
        <function-ref name="clr" scoped="" ref="0xb725d0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb725b0b0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb725b0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb725b288"/>
        <function-ref name="isInput" scoped="" ref="0xb725b368"/>
        <function-ref name="toggle" scoped="" ref="0xb725b448"/>
        <function-ref name="isOutput" scoped="" ref="0xb725b528"/>
        <function-ref name="get" scoped="" ref="0xb725b608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb725b6e8"/>
        <function-ref name="set" scoped="" ref="0xb725b7c8"/>
        <function-ref name="clr" scoped="" ref="0xb725b8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb7258880" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb7258880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7258a58"/>
        <function-ref name="isInput" scoped="" ref="0xb7258b38"/>
        <function-ref name="toggle" scoped="" ref="0xb7258c18"/>
        <function-ref name="isOutput" scoped="" ref="0xb7258cf8"/>
        <function-ref name="get" scoped="" ref="0xb7258dd8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7258eb8"/>
        <function-ref name="set" scoped="" ref="0xb7257010"/>
        <function-ref name="clr" scoped="" ref="0xb72570f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb72550b0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb72550b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7255288"/>
        <function-ref name="isInput" scoped="" ref="0xb7255368"/>
        <function-ref name="toggle" scoped="" ref="0xb7255448"/>
        <function-ref name="isOutput" scoped="" ref="0xb7255528"/>
        <function-ref name="get" scoped="" ref="0xb7255608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72556e8"/>
        <function-ref name="set" scoped="" ref="0xb72557c8"/>
        <function-ref name="clr" scoped="" ref="0xb72558a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb7252880" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb7252880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7252a58"/>
        <function-ref name="isInput" scoped="" ref="0xb7252b38"/>
        <function-ref name="toggle" scoped="" ref="0xb7252c18"/>
        <function-ref name="isOutput" scoped="" ref="0xb7252cf8"/>
        <function-ref name="get" scoped="" ref="0xb7252dd8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7252eb8"/>
        <function-ref name="set" scoped="" ref="0xb7251010"/>
        <function-ref name="clr" scoped="" ref="0xb72510f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb724f0b0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb724f0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb724f288"/>
        <function-ref name="isInput" scoped="" ref="0xb724f368"/>
        <function-ref name="toggle" scoped="" ref="0xb724f448"/>
        <function-ref name="isOutput" scoped="" ref="0xb724f528"/>
        <function-ref name="get" scoped="" ref="0xb724f608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb724f6e8"/>
        <function-ref name="set" scoped="" ref="0xb724f7c8"/>
        <function-ref name="clr" scoped="" ref="0xb724f8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb724d880" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb724d880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb724da58"/>
        <function-ref name="isInput" scoped="" ref="0xb724db38"/>
        <function-ref name="toggle" scoped="" ref="0xb724dc18"/>
        <function-ref name="isOutput" scoped="" ref="0xb724dcf8"/>
        <function-ref name="get" scoped="" ref="0xb724ddd8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb724deb8"/>
        <function-ref name="set" scoped="" ref="0xb724c010"/>
        <function-ref name="clr" scoped="" ref="0xb724c0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb722fbf8" loc="61:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb722fbf8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0xb73d07d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0xb73d07d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb722fdd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0xb722e010" loc="62:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0xb722e010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0xb722e1e8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0xb722e2c8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0xb722e3a8"/>
        <function-ref name="actualMicro" scoped="" ref="0xb722e488"/>
        <function-ref name="adcPrescaler" scoped="" ref="0xb722e568"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0xb721d808" loc="60:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0xb721d808"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb721d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0xb7316a18" loc="57:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0xb7316a18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0xb7316bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0xb721d400" loc="59:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0xb721d400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb721d5d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0xb7316db0" loc="58:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0xb7316db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb721d010"/>
        <function-ref name="taskLoop" scoped="" ref="0xb721d0f0"/>
        <function-ref name="runNextTask" scoped="" ref="0xb721d1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0xb73afc30" loc="48:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0xb73afc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb73afe08"/>
        <function-ref name="runTask" scoped="" ref="0xb73afee8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0xb73b4528" loc="47:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0xb73b4528"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb73b4700"/>
        <function-ref name="taskLoop" scoped="" ref="0xb73b47e0"/>
        <function-ref name="runNextTask" scoped="" ref="0xb73b48c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0xb733a100" loc="56:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0xb733a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb733a2d8"/>
        <function-ref name="runTask" scoped="" ref="0xb733a3b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0xb733ad58" loc="57:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0xb733ad58"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0xb7339010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0xb733b8a8" loc="55:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0xb733b8a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb733ba80"/>
        <function-ref name="taskLoop" scoped="" ref="0xb733bb60"/>
        <function-ref name="runNextTask" scoped="" ref="0xb733bc40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0xb7326218" loc="88:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0xb7326218"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0xb73263f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0xb73b5718" loc="84:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0xb73b5718"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0xb73b58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0xb73283d0" loc="85:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0xb73283d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0xb73285a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RootControl" ref="0xb71b1620" loc="38:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0xb71b1620"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0xb71b17f8"/>
        <function-ref name="setRoot" scoped="" ref="0xb71b18d8"/>
        <function-ref name="unsetRoot" scoped="" ref="0xb71b19b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionPacket" ref="0xb71b4f10" loc="37:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionPacket" scoped="" ref="0xb71b4f10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb71c6108"/>
        <function-ref name="setOrigin" scoped="" ref="0xb71c61e8"/>
        <function-ref name="setType" scoped="" ref="0xb71c62c8"/>
        <function-ref name="getOrigin" scoped="" ref="0xb71c63a8"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb71c6488"/>
        <function-ref name="getType" scoped="" ref="0xb71c6568"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0xb7212500" loc="26:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0xb7212500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0xb72126d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0xb7211188" loc="28:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0xb7211188"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb7211360"/>
        <function-ref name="stopDone" scoped="" ref="0xb7211440"/>
        <function-ref name="start" scoped="" ref="0xb7211520"/>
        <function-ref name="stop" scoped="" ref="0xb7211600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAMPacket" ref="0xb71c7a48" loc="30:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAMPacket" scoped="" ref="0xb71c7a48"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb71c7c20"/>
        <function-ref name="source" scoped="" ref="0xb71c7d00"/>
        <function-ref name="address" scoped="" ref="0xb71c7de0"/>
        <function-ref name="destination" scoped="" ref="0xb71c7ec0"/>
        <function-ref name="setSource" scoped="" ref="0xb7210010"/>
        <function-ref name="setDestination" scoped="" ref="0xb72100f0"/>
        <function-ref name="type" scoped="" ref="0xb72101d0"/>
        <function-ref name="setType" scoped="" ref="0xb72102b0"/>
        <function-ref name="isForMe" scoped="" ref="0xb7210390"/>
        <function-ref name="setGroup" scoped="" ref="0xb7210470"/>
        <function-ref name="localGroup" scoped="" ref="0xb7210550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="uartSendTask" ref="0xb719bc88" loc="51:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="uartSendTask" scoped="" ref="0xb719bc88"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb719be60"/>
        <function-ref name="runTask" scoped="" ref="0xb719a010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Snoop" ref="0xb71bd698" loc="34:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb71bd698"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb71bd870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0xb720ea30" loc="27:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0xb720ea30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb720ec08"/>
        <function-ref name="stopDone" scoped="" ref="0xb720ece8"/>
        <function-ref name="start" scoped="" ref="0xb720edc8"/>
        <function-ref name="stop" scoped="" ref="0xb720eea8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0xb71c0548" loc="33:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb71c0548"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb71c0720"/>
        <function-ref name="getPayload" scoped="" ref="0xb71c0800"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb71c08e0"/>
        <function-ref name="cancel" scoped="" ref="0xb71c09c0"/>
        <function-ref name="sendDone" scoped="" ref="0xb71c0aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UARTMessagePool" ref="0xb71a7910" loc="41:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UARTMessagePool" scoped="" ref="0xb71a7910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
            <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb71acaa8"/>
        <function-ref name="maxSize" scoped="" ref="0xb71ac4c0"/>
        <function-ref name="empty" scoped="" ref="0xb71ac010"/>
        <function-ref name="put" scoped="" ref="0xb71ac718"/>
        <function-ref name="size" scoped="" ref="0xb71ac268"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read" ref="0xb719e010" loc="45:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb719e010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb719e638"/>
        <function-ref name="readDone" scoped="" ref="0xb719e890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialSend" ref="0xb71b9e20" loc="36:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialSend" scoped="" ref="0xb71b9e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb720d010"/>
        <function-ref name="getPayload" scoped="" ref="0xb720d0f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb720d1d0"/>
        <function-ref name="cancel" scoped="" ref="0xb720d2b0"/>
        <function-ref name="sendDone" scoped="" ref="0xb720d390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RoutingControl" ref="0xb720c880" loc="29:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoutingControl" scoped="" ref="0xb720c880"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb720ca58"/>
        <function-ref name="stop" scoped="" ref="0xb720cb38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0xb71bd9f8" loc="35:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb71bd9f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb71bdbd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb7195b70" loc="46:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb7195b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb7195d48"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb7195e28"/>
        <function-ref name="led1On" scoped="" ref="0xb7195f08"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb719b010"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb719b0f0"/>
        <function-ref name="get" scoped="" ref="0xb719b1d0"/>
        <function-ref name="led1Off" scoped="" ref="0xb719b2b0"/>
        <function-ref name="led2Off" scoped="" ref="0xb719b630"/>
        <function-ref name="set" scoped="" ref="0xb719b390"/>
        <function-ref name="led0On" scoped="" ref="0xb719b470"/>
        <function-ref name="led2On" scoped="" ref="0xb719b550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UARTQueue" ref="0xb71ab3b0" loc="40:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UARTQueue" scoped="" ref="0xb71ab3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
              <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0xb71b8348"/>
        <function-ref name="enqueue" scoped="" ref="0xb71b8a28"/>
        <function-ref name="element" scoped="" ref="0xb71b8d78"/>
        <function-ref name="full" scoped="" ref="0xb71abc30"/>
        <function-ref name="maxSize" scoped="" ref="0xb71b80f0"/>
        <function-ref name="dequeue" scoped="" ref="0xb71b86b8"/>
        <function-ref name="empty" scoped="" ref="0xb71ab9d8"/>
        <function-ref name="size" scoped="" ref="0xb71abe88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb71a08e0" loc="44:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb71a08e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb71a53d8"/>
        <function-ref name="fired" scoped="" ref="0xb71a6678"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb71a6d80"/>
        <function-ref name="isOneShot" scoped="" ref="0xb71a6b28"/>
        <function-ref name="getdt" scoped="" ref="0xb71a5888"/>
        <function-ref name="gett0" scoped="" ref="0xb71a5630"/>
        <function-ref name="isRunning" scoped="" ref="0xb71a68d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb71a0f08"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb71a50b8"/>
        <function-ref name="startOneShot" scoped="" ref="0xb71a61a0"/>
        <function-ref name="stop" scoped="" ref="0xb71a6420"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0xb716c8a8" loc="46:../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb716c8a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb716ca80"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb716cb60"/>
        <function-ref name="led1On" scoped="" ref="0xb716cc40"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb716cd20"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb716ce00"/>
        <function-ref name="get" scoped="" ref="0xb716cee0"/>
        <function-ref name="led1Off" scoped="" ref="0xb7169010"/>
        <function-ref name="led2Off" scoped="" ref="0xb7169390"/>
        <function-ref name="set" scoped="" ref="0xb71690f0"/>
        <function-ref name="led0On" scoped="" ref="0xb71691d0"/>
        <function-ref name="led2On" scoped="" ref="0xb71692b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0xb7166cd8" loc="50:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0xb7166cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7166eb0"/>
        <function-ref name="isInput" scoped="" ref="0xb7165010"/>
        <function-ref name="toggle" scoped="" ref="0xb71650f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb71651d0"/>
        <function-ref name="get" scoped="" ref="0xb71652b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7165390"/>
        <function-ref name="set" scoped="" ref="0xb7165470"/>
        <function-ref name="clr" scoped="" ref="0xb7165550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb7169c08" loc="46:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb7169c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7169de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0xb7165740" loc="51:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0xb7165740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7165918"/>
        <function-ref name="isInput" scoped="" ref="0xb71659f8"/>
        <function-ref name="toggle" scoped="" ref="0xb7165ad8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7165bb8"/>
        <function-ref name="get" scoped="" ref="0xb7165c98"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7165d78"/>
        <function-ref name="set" scoped="" ref="0xb7165e58"/>
        <function-ref name="clr" scoped="" ref="0xb7164010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0xb7166010" loc="47:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb7166010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb71661e8"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb71662c8"/>
        <function-ref name="led1On" scoped="" ref="0xb71663a8"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb7166488"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb7166568"/>
        <function-ref name="get" scoped="" ref="0xb7166648"/>
        <function-ref name="led1Off" scoped="" ref="0xb7166728"/>
        <function-ref name="led2Off" scoped="" ref="0xb7166aa8"/>
        <function-ref name="set" scoped="" ref="0xb7166808"/>
        <function-ref name="led0On" scoped="" ref="0xb71668e8"/>
        <function-ref name="led2On" scoped="" ref="0xb71669c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0xb7164200" loc="52:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0xb7164200"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb71643d8"/>
        <function-ref name="isInput" scoped="" ref="0xb71644b8"/>
        <function-ref name="toggle" scoped="" ref="0xb7164598"/>
        <function-ref name="isOutput" scoped="" ref="0xb7164678"/>
        <function-ref name="get" scoped="" ref="0xb7164758"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7164838"/>
        <function-ref name="set" scoped="" ref="0xb7164918"/>
        <function-ref name="clr" scoped="" ref="0xb71649f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0xb7168c80" loc="44:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0xb7168c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7168e58"/>
        <function-ref name="isInput" scoped="" ref="0xb7154010"/>
        <function-ref name="toggle" scoped="" ref="0xb71540f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb71541d0"/>
        <function-ref name="get" scoped="" ref="0xb71542b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7154390"/>
        <function-ref name="set" scoped="" ref="0xb7154470"/>
        <function-ref name="clr" scoped="" ref="0xb7154550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0xb7154760" loc="45:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0xb7154760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7154938"/>
        <function-ref name="isInput" scoped="" ref="0xb7154a18"/>
        <function-ref name="toggle" scoped="" ref="0xb7154af8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7154bd8"/>
        <function-ref name="get" scoped="" ref="0xb7154cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7154d98"/>
        <function-ref name="set" scoped="" ref="0xb7154e78"/>
        <function-ref name="clr" scoped="" ref="0xb7153010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0xb7153ba8" loc="47:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb7153ba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7153d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0xb7153220" loc="46:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0xb7153220"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb71533f8"/>
        <function-ref name="isInput" scoped="" ref="0xb71534d8"/>
        <function-ref name="toggle" scoped="" ref="0xb71535b8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7153698"/>
        <function-ref name="get" scoped="" ref="0xb7153778"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7153858"/>
        <function-ref name="set" scoped="" ref="0xb7153938"/>
        <function-ref name="clr" scoped="" ref="0xb7153a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb7151b60" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb7151b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb704d6a8"/>
        <function-ref name="fired" scoped="" ref="0xb7148938"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb704d068"/>
        <function-ref name="isOneShot" scoped="" ref="0xb7148de8"/>
        <function-ref name="getdt" scoped="" ref="0xb704db58"/>
        <function-ref name="gett0" scoped="" ref="0xb704d900"/>
        <function-ref name="isRunning" scoped="" ref="0xb7148b90"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb71481e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb704d388"/>
        <function-ref name="startOneShot" scoped="" ref="0xb7148460"/>
        <function-ref name="stop" scoped="" ref="0xb71486e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0xb714ad20" loc="49:../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0xb714ad20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb71468a8"/>
        <function-ref name="fired" scoped="" ref="0xb7147ac8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb7146268"/>
        <function-ref name="isOneShot" scoped="" ref="0xb7146010"/>
        <function-ref name="getdt" scoped="" ref="0xb7146d58"/>
        <function-ref name="gett0" scoped="" ref="0xb7146b00"/>
        <function-ref name="isRunning" scoped="" ref="0xb7147d20"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb7147370"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb7146588"/>
        <function-ref name="startOneShot" scoped="" ref="0xb71475f0"/>
        <function-ref name="stop" scoped="" ref="0xb7147870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0xb7144dc8" loc="46:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0xb7144dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb71408e0"/>
        <function-ref name="fired" scoped="" ref="0xb7141b60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb71402a0"/>
        <function-ref name="isOneShot" scoped="" ref="0xb7140048"/>
        <function-ref name="getdt" scoped="" ref="0xb7140d90"/>
        <function-ref name="gett0" scoped="" ref="0xb7140b38"/>
        <function-ref name="isRunning" scoped="" ref="0xb7141db8"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb7141408"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb71405c0"/>
        <function-ref name="startOneShot" scoped="" ref="0xb7141688"/>
        <function-ref name="stop" scoped="" ref="0xb7141908"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0xb713eda8" loc="47:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0xb713eda8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb713d400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb7144618" loc="45:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb7144618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb71447f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0xb712e5c8" loc="29:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0xb712e5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb712ed18"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb7131288"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb7131010"/>
        <function-ref name="overflow" scoped="" ref="0xb7131500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb713c458" loc="27:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb713c458"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb713c630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0xb7133c78" loc="28:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0xb7133c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb7137150"/>
        <function-ref name="fired" scoped="" ref="0xb7138908"/>
        <function-ref name="startAt" scoped="" ref="0xb7138df8"/>
        <function-ref name="isRunning" scoped="" ref="0xb7138b80"/>
        <function-ref name="getAlarm" scoped="" ref="0xb71373c8"/>
        <function-ref name="start" scoped="" ref="0xb71383f0"/>
        <function-ref name="stop" scoped="" ref="0xb7138690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0xb70a2010" loc="61:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb70a2010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb70a14e0"/>
        <function-ref name="fired" scoped="" ref="0xb70a2c78"/>
        <function-ref name="startAt" scoped="" ref="0xb70a11a0"/>
        <function-ref name="isRunning" scoped="" ref="0xb70a2ef0"/>
        <function-ref name="getAlarm" scoped="" ref="0xb70a1758"/>
        <function-ref name="start" scoped="" ref="0xb70a2760"/>
        <function-ref name="stop" scoped="" ref="0xb70a2a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb712dbb8" loc="60:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb712dbb8"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0xb73d05d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0xb73d05d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb712dd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb70a1a88" loc="62:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb70a1a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb709f200"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb709f6f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb709f478"/>
        <function-ref name="overflow" scoped="" ref="0xb709f968"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0xb61cd9d0" loc="66:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb61cd9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb61cdba8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb61cdc88"/>
        <function-ref name="getControlA" scoped="" ref="0xb61cdd68"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb61cde48"/>
        <function-ref name="setControlB" scoped="" ref="0xb61cdf28"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb61cc018"/>
        <function-ref name="getControlB" scoped="" ref="0xb61cc0f8"/>
        <function-ref name="setControlA" scoped="" ref="0xb61cc1d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0xb61d3a98" loc="61:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb61d3a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb61d1010"/>
        <function-ref name="fired" scoped="" ref="0xb61d2718"/>
        <function-ref name="startAt" scoped="" ref="0xb61d2c08"/>
        <function-ref name="isRunning" scoped="" ref="0xb61d2990"/>
        <function-ref name="getAlarm" scoped="" ref="0xb61d1288"/>
        <function-ref name="start" scoped="" ref="0xb61d2200"/>
        <function-ref name="stop" scoped="" ref="0xb61d24a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb61d3660" loc="60:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb61d3660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb61d3838"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb61d15b8" loc="62:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb61d15b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb61d1d08"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb61d0288"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb61d0010"/>
        <function-ref name="overflow" scoped="" ref="0xb61d0500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0xb61cbdc0" loc="68:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0xb61cbdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0xb61c9010"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0xb61c90f0"/>
        <function-ref name="controlABusy" scoped="" ref="0xb61c91d0"/>
        <function-ref name="controlBBusy" scoped="" ref="0xb61c92b0"/>
        <function-ref name="countBusy" scoped="" ref="0xb61c9390"/>
        <function-ref name="compareABusy" scoped="" ref="0xb61c9470"/>
        <function-ref name="getAssr" scoped="" ref="0xb61c9550"/>
        <function-ref name="setAssr" scoped="" ref="0xb61c9630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0xb61cc3c8" loc="67:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0xb61cc3c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb61cb918"/>
        <function-ref name="fired" scoped="" ref="0xb61ccf28"/>
        <function-ref name="get" scoped="" ref="0xb61cca10"/>
        <function-ref name="reset" scoped="" ref="0xb61cb1b0"/>
        <function-ref name="isOn" scoped="" ref="0xb61cbb90"/>
        <function-ref name="set" scoped="" ref="0xb61ccc88"/>
        <function-ref name="start" scoped="" ref="0xb61cb428"/>
        <function-ref name="stop" scoped="" ref="0xb61cb6a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb61d07f0" loc="65:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb61d07f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb61cd288"/>
        <function-ref name="test" scoped="" ref="0xb61ced58"/>
        <function-ref name="get" scoped="" ref="0xb61d0e38"/>
        <function-ref name="setScale" scoped="" ref="0xb61cd500"/>
        <function-ref name="getScale" scoped="" ref="0xb61cd7a0"/>
        <function-ref name="reset" scoped="" ref="0xb61ce5f0"/>
        <function-ref name="overflow" scoped="" ref="0xb61ce378"/>
        <function-ref name="isOn" scoped="" ref="0xb61cd010"/>
        <function-ref name="set" scoped="" ref="0xb61ce0d8"/>
        <function-ref name="start" scoped="" ref="0xb61ce868"/>
        <function-ref name="stop" scoped="" ref="0xb61ceae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0xb70e01a0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb70e01a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb70e0378"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb70e0458"/>
        <function-ref name="getControlA" scoped="" ref="0xb70e0538"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb70e0618"/>
        <function-ref name="setControlB" scoped="" ref="0xb70e06f8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb70e07d8"/>
        <function-ref name="getControlB" scoped="" ref="0xb70e08b8"/>
        <function-ref name="setControlA" scoped="" ref="0xb70e0998"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0xb70dd858" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0xb70dd858"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0xb70dda30"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0xb70ddb10"/>
        <function-ref name="controlABusy" scoped="" ref="0xb70ddbf0"/>
        <function-ref name="controlBBusy" scoped="" ref="0xb70ddcd0"/>
        <function-ref name="countBusy" scoped="" ref="0xb70dddb0"/>
        <function-ref name="compareABusy" scoped="" ref="0xb70dde90"/>
        <function-ref name="getAssr" scoped="" ref="0xb70dc010"/>
        <function-ref name="setAssr" scoped="" ref="0xb70dc0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0xb70e0cc0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0xb70e0cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb70dd288"/>
        <function-ref name="fired" scoped="" ref="0xb70df830"/>
        <function-ref name="get" scoped="" ref="0xb70df318"/>
        <function-ref name="reset" scoped="" ref="0xb70dfaa8"/>
        <function-ref name="isOn" scoped="" ref="0xb70dd500"/>
        <function-ref name="set" scoped="" ref="0xb70df590"/>
        <function-ref name="start" scoped="" ref="0xb70dfd20"/>
        <function-ref name="stop" scoped="" ref="0xb70dd010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb70e5e68" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb70e5e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb70e18d8"/>
        <function-ref name="test" scoped="" ref="0xb70e13e8"/>
        <function-ref name="get" scoped="" ref="0xb70e24d8"/>
        <function-ref name="setScale" scoped="" ref="0xb70e1b50"/>
        <function-ref name="getScale" scoped="" ref="0xb70e1df0"/>
        <function-ref name="reset" scoped="" ref="0xb70e2c68"/>
        <function-ref name="overflow" scoped="" ref="0xb70e29f0"/>
        <function-ref name="isOn" scoped="" ref="0xb70e1660"/>
        <function-ref name="set" scoped="" ref="0xb70e2750"/>
        <function-ref name="start" scoped="" ref="0xb70e2ee0"/>
        <function-ref name="stop" scoped="" ref="0xb70e1170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0xb70d61a0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb70d61a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb70d6378"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb70d6458"/>
        <function-ref name="getControlA" scoped="" ref="0xb70d6538"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb70d6618"/>
        <function-ref name="setControlB" scoped="" ref="0xb70d66f8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb70d67d8"/>
        <function-ref name="getControlB" scoped="" ref="0xb70d68b8"/>
        <function-ref name="setControlA" scoped="" ref="0xb70d6998"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0xb70d47b8" loc="85:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0xb70d47b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0xb70d4990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0xb70d4c18" loc="86:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0xb70d4c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0xb70d4df0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0xb70d4ed0"/>
        <function-ref name="controlABusy" scoped="" ref="0xb70d3010"/>
        <function-ref name="controlBBusy" scoped="" ref="0xb70d30f0"/>
        <function-ref name="countBusy" scoped="" ref="0xb70d31d0"/>
        <function-ref name="compareABusy" scoped="" ref="0xb70d32b0"/>
        <function-ref name="getAssr" scoped="" ref="0xb70d3390"/>
        <function-ref name="setAssr" scoped="" ref="0xb70d3470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0xb70d6cc0" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0xb70d6cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb70d4288"/>
        <function-ref name="fired" scoped="" ref="0xb70d5830"/>
        <function-ref name="get" scoped="" ref="0xb70d5318"/>
        <function-ref name="reset" scoped="" ref="0xb70d5aa8"/>
        <function-ref name="isOn" scoped="" ref="0xb70d4500"/>
        <function-ref name="set" scoped="" ref="0xb70d5590"/>
        <function-ref name="start" scoped="" ref="0xb70d5d20"/>
        <function-ref name="stop" scoped="" ref="0xb70d4010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb70dcdd0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb70dcdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb70d8878"/>
        <function-ref name="test" scoped="" ref="0xb70d8388"/>
        <function-ref name="get" scoped="" ref="0xb70d9468"/>
        <function-ref name="setScale" scoped="" ref="0xb70d8af0"/>
        <function-ref name="getScale" scoped="" ref="0xb70d8d90"/>
        <function-ref name="reset" scoped="" ref="0xb70d9bf8"/>
        <function-ref name="overflow" scoped="" ref="0xb70d9980"/>
        <function-ref name="isOn" scoped="" ref="0xb70d8600"/>
        <function-ref name="set" scoped="" ref="0xb70d96e0"/>
        <function-ref name="start" scoped="" ref="0xb70d9e70"/>
        <function-ref name="stop" scoped="" ref="0xb70d8110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0xb7085bd0" loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0xb7085bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb7085da8"/>
        <function-ref name="runTask" scoped="" ref="0xb7085e88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0xb7086248" loc="49:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb7086248"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb7085708"/>
        <function-ref name="fired" scoped="" ref="0xb7086eb0"/>
        <function-ref name="startAt" scoped="" ref="0xb70853c8"/>
        <function-ref name="isRunning" scoped="" ref="0xb7085150"/>
        <function-ref name="getAlarm" scoped="" ref="0xb7085980"/>
        <function-ref name="start" scoped="" ref="0xb7086998"/>
        <function-ref name="stop" scoped="" ref="0xb7086c38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb713af08" loc="48:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb713af08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb7088a18"/>
        <function-ref name="fired" scoped="" ref="0xb709dcb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb70883d8"/>
        <function-ref name="isOneShot" scoped="" ref="0xb7088180"/>
        <function-ref name="getdt" scoped="" ref="0xb7088ec8"/>
        <function-ref name="gett0" scoped="" ref="0xb7088c70"/>
        <function-ref name="isRunning" scoped="" ref="0xb709df08"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb709d558"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb70886f8"/>
        <function-ref name="startOneShot" scoped="" ref="0xb709d7d8"/>
        <function-ref name="stop" scoped="" ref="0xb709da58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0xb7058560" loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0xb7058560"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb7058738"/>
        <function-ref name="runTask" scoped="" ref="0xb7058818"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0xb705a338" loc="49:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0xb705a338"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb7059e38"/>
        <function-ref name="fired" scoped="" ref="0xb70590f0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb70597f8"/>
        <function-ref name="isOneShot" scoped="" ref="0xb70595a0"/>
        <function-ref name="getdt" scoped="" ref="0xb7058310"/>
        <function-ref name="gett0" scoped="" ref="0xb70580b8"/>
        <function-ref name="isRunning" scoped="" ref="0xb7059348"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb705a960"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb7059b18"/>
        <function-ref name="startOneShot" scoped="" ref="0xb705abe0"/>
        <function-ref name="stop" scoped="" ref="0xb705ae60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb7082f00" loc="48:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb7082f00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb705cb40"/>
        <function-ref name="fired" scoped="" ref="0xb705dce0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb705c4e0"/>
        <function-ref name="isOneShot" scoped="" ref="0xb705c278"/>
        <function-ref name="getdt" scoped="" ref="0xb705a048"/>
        <function-ref name="gett0" scoped="" ref="0xb705cda8"/>
        <function-ref name="isRunning" scoped="" ref="0xb705c010"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb705d558"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb705c810"/>
        <function-ref name="startOneShot" scoped="" ref="0xb705d7e8"/>
        <function-ref name="stop" scoped="" ref="0xb705da78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0xb7055940" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0xb7055940"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb7054010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0xb7054360" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb7054360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb7054ab0"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb704f010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb7054d28"/>
        <function-ref name="overflow" scoped="" ref="0xb704f288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb704bea0" loc="20:../../tos/sensorboards/mts300/AccelXC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.Sensor"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb704bea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb704a4d8"/>
        <function-ref name="readDone" scoped="" ref="0xb704a730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadX" ref="0xb7048920" loc="5:../../tos/sensorboards/mts300/AccelReadP.nc">
      <component-ref qname="AccelReadP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadX" scoped="" ref="0xb7048920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb7045010"/>
        <function-ref name="readDone" scoped="" ref="0xb7045268"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActualY" ref="0xb7042a20" loc="11:../../tos/sensorboards/mts300/AccelReadP.nc">
      <component-ref qname="AccelReadP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActualY" scoped="" ref="0xb7042a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb7041068"/>
        <function-ref name="readDone" scoped="" ref="0xb70412c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadY" ref="0xb70459b8" loc="6:../../tos/sensorboards/mts300/AccelReadP.nc">
      <component-ref qname="AccelReadP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadY" scoped="" ref="0xb70459b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb7043010"/>
        <function-ref name="readDone" scoped="" ref="0xb7043268"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActualX" ref="0xb7043a18" loc="10:../../tos/sensorboards/mts300/AccelReadP.nc">
      <component-ref qname="AccelReadP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActualX" scoped="" ref="0xb7043a18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb7042068"/>
        <function-ref name="readDone" scoped="" ref="0xb70422c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigY" ref="0xb703c010" loc="21:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <component-ref qname="AccelConfigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigY" scoped="" ref="0xb703c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb703c1e8"/>
        <function-ref name="getChannel" scoped="" ref="0xb703c2c8"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb703c3a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigX" ref="0xb7038988" loc="20:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <component-ref qname="AccelConfigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigX" scoped="" ref="0xb7038988"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb7038b60"/>
        <function-ref name="getChannel" scoped="" ref="0xb7038c40"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb7038d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb703aec8" loc="19:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <component-ref qname="AccelConfigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb703aec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb703d0c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb703d1a0"/>
        <function-ref name="request" scoped="" ref="0xb703d280"/>
        <function-ref name="granted" scoped="" ref="0xb703d360"/>
        <function-ref name="isOwner" scoped="" ref="0xb703d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb703ca70" loc="17:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb703ca70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb703cc48"/>
        <function-ref name="stopDone" scoped="" ref="0xb703cd28"/>
        <function-ref name="start" scoped="" ref="0xb703ce08"/>
        <function-ref name="stop" scoped="" ref="0xb703cee8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigY" ref="0xb7036738" loc="19:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigY" scoped="" ref="0xb7036738"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb7036910"/>
        <function-ref name="getChannel" scoped="" ref="0xb70369f0"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb7036ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AccelAdcY" ref="0xb702f6b0" loc="25:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AccelAdcY" scoped="" ref="0xb702f6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb702f888"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AccelAdcX" ref="0xb702f2b0" loc="24:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AccelAdcX" scoped="" ref="0xb702f2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb702f488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigX" ref="0xb7036160" loc="18:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigX" scoped="" ref="0xb7036160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb7036338"/>
        <function-ref name="getChannel" scoped="" ref="0xb7036418"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb70364f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDone" ref="0xb70296c8" loc="67:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDone" scoped="" ref="0xb70296c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb70298a0"/>
        <function-ref name="runTask" scoped="" ref="0xb7029980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AccelPin" ref="0xb7032088" loc="23:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AccelPin" scoped="" ref="0xb7032088"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7032260"/>
        <function-ref name="isInput" scoped="" ref="0xb7032340"/>
        <function-ref name="toggle" scoped="" ref="0xb7032420"/>
        <function-ref name="isOutput" scoped="" ref="0xb7032500"/>
        <function-ref name="get" scoped="" ref="0xb70325e0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb70326c0"/>
        <function-ref name="set" scoped="" ref="0xb70327a0"/>
        <function-ref name="clr" scoped="" ref="0xb7032880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb7036d58" loc="22:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb7036d58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb70338a8"/>
        <function-ref name="fired" scoped="" ref="0xb7035b18"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb7033268"/>
        <function-ref name="isOneShot" scoped="" ref="0xb7033010"/>
        <function-ref name="getdt" scoped="" ref="0xb7033d58"/>
        <function-ref name="gett0" scoped="" ref="0xb7033b00"/>
        <function-ref name="isRunning" scoped="" ref="0xb7035d70"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb70353c0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb7033588"/>
        <function-ref name="startOneShot" scoped="" ref="0xb7035640"/>
        <function-ref name="stop" scoped="" ref="0xb70358c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int1_Interrupt" ref="0xb701c198" loc="36:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int1_Interrupt" scoped="" ref="0xb701c198"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb701c370"/>
        <function-ref name="disable" scoped="" ref="0xb701c450"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb701c530"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb701c610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc0" ref="0xb7018598" loc="45:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc0" scoped="" ref="0xb7018598"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb7018770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW3" ref="0xb7023810" loc="23:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW3" scoped="" ref="0xb7023810"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb70239e8"/>
        <function-ref name="isInput" scoped="" ref="0xb7023ac8"/>
        <function-ref name="toggle" scoped="" ref="0xb7023ba8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7023c88"/>
        <function-ref name="get" scoped="" ref="0xb7023d68"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7023e48"/>
        <function-ref name="set" scoped="" ref="0xb7023f28"/>
        <function-ref name="clr" scoped="" ref="0xb7022018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW6" ref="0xb7021650" loc="26:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW6" scoped="" ref="0xb7021650"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7021828"/>
        <function-ref name="isInput" scoped="" ref="0xb7021908"/>
        <function-ref name="toggle" scoped="" ref="0xb70219e8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7021ac8"/>
        <function-ref name="get" scoped="" ref="0xb7021ba8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7021c88"/>
        <function-ref name="set" scoped="" ref="0xb7021d68"/>
        <function-ref name="clr" scoped="" ref="0xb7021e48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc3" ref="0xb7017128" loc="48:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc3" scoped="" ref="0xb7017128"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb7017300"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc5" ref="0xb70178c8" loc="50:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc5" scoped="" ref="0xb70178c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb7017ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int1" ref="0xb701f4a0" loc="30:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int1" scoped="" ref="0xb701f4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb701f678"/>
        <function-ref name="isInput" scoped="" ref="0xb701f758"/>
        <function-ref name="toggle" scoped="" ref="0xb701f838"/>
        <function-ref name="isOutput" scoped="" ref="0xb701f918"/>
        <function-ref name="get" scoped="" ref="0xb701f9f8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb701fad8"/>
        <function-ref name="set" scoped="" ref="0xb701fbb8"/>
        <function-ref name="clr" scoped="" ref="0xb701fc98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="USART1_TXD" ref="0xb7019b08" loc="42:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="USART1_TXD" scoped="" ref="0xb7019b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7019ce0"/>
        <function-ref name="isInput" scoped="" ref="0xb7019dc0"/>
        <function-ref name="toggle" scoped="" ref="0xb7019ea0"/>
        <function-ref name="isOutput" scoped="" ref="0xb7018010"/>
        <function-ref name="get" scoped="" ref="0xb70180f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb70181d0"/>
        <function-ref name="set" scoped="" ref="0xb70182b0"/>
        <function-ref name="clr" scoped="" ref="0xb7018390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW1" ref="0xb70253b0" loc="21:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW1" scoped="" ref="0xb70253b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7025588"/>
        <function-ref name="isInput" scoped="" ref="0xb7025668"/>
        <function-ref name="toggle" scoped="" ref="0xb7025748"/>
        <function-ref name="isOutput" scoped="" ref="0xb7025828"/>
        <function-ref name="get" scoped="" ref="0xb7025908"/>
        <function-ref name="makeOutput" scoped="" ref="0xb70259e8"/>
        <function-ref name="set" scoped="" ref="0xb7025ac8"/>
        <function-ref name="clr" scoped="" ref="0xb7025ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW4" ref="0xb70221f8" loc="24:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW4" scoped="" ref="0xb70221f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb70223d0"/>
        <function-ref name="isInput" scoped="" ref="0xb70224b0"/>
        <function-ref name="toggle" scoped="" ref="0xb7022590"/>
        <function-ref name="isOutput" scoped="" ref="0xb7022670"/>
        <function-ref name="get" scoped="" ref="0xb7022750"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7022830"/>
        <function-ref name="set" scoped="" ref="0xb7022910"/>
        <function-ref name="clr" scoped="" ref="0xb70229f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int3_Interrupt" ref="0xb701b010" loc="38:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int3_Interrupt" scoped="" ref="0xb701b010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb701b1e8"/>
        <function-ref name="disable" scoped="" ref="0xb701b2c8"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb701b3a8"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb701b488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc1" ref="0xb7018968" loc="46:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc1" scoped="" ref="0xb7018968"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb7018b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="USART1_RXD" ref="0xb70190e8" loc="41:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="USART1_RXD" scoped="" ref="0xb70190e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb70192c0"/>
        <function-ref name="isInput" scoped="" ref="0xb70193a0"/>
        <function-ref name="toggle" scoped="" ref="0xb7019480"/>
        <function-ref name="isOutput" scoped="" ref="0xb7019560"/>
        <function-ref name="get" scoped="" ref="0xb7019640"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7019720"/>
        <function-ref name="set" scoped="" ref="0xb7019800"/>
        <function-ref name="clr" scoped="" ref="0xb70198e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW7" ref="0xb7020050" loc="27:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW7" scoped="" ref="0xb7020050"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7020228"/>
        <function-ref name="isInput" scoped="" ref="0xb7020308"/>
        <function-ref name="toggle" scoped="" ref="0xb70203e8"/>
        <function-ref name="isOutput" scoped="" ref="0xb70204c8"/>
        <function-ref name="get" scoped="" ref="0xb70205a8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7020688"/>
        <function-ref name="set" scoped="" ref="0xb7020768"/>
        <function-ref name="clr" scoped="" ref="0xb7020848"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int0_Interrupt" ref="0xb701a9d8" loc="35:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int0_Interrupt" scoped="" ref="0xb701a9d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb701ac30"/>
        <function-ref name="disable" scoped="" ref="0xb701ad10"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb701adf0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb701aed0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc6" ref="0xb7017d98" loc="51:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc6" scoped="" ref="0xb7017d98"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb7016010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int2" ref="0xb701fe88" loc="31:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int2" scoped="" ref="0xb701fe88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb701e070"/>
        <function-ref name="isInput" scoped="" ref="0xb701e150"/>
        <function-ref name="toggle" scoped="" ref="0xb701e230"/>
        <function-ref name="isOutput" scoped="" ref="0xb701e310"/>
        <function-ref name="get" scoped="" ref="0xb701e3f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb701e4d0"/>
        <function-ref name="set" scoped="" ref="0xb701e5b0"/>
        <function-ref name="clr" scoped="" ref="0xb701e690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW2" ref="0xb7025d88" loc="22:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW2" scoped="" ref="0xb7025d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7023010"/>
        <function-ref name="isInput" scoped="" ref="0xb70230f0"/>
        <function-ref name="toggle" scoped="" ref="0xb70231d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb70232b0"/>
        <function-ref name="get" scoped="" ref="0xb7023390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7023470"/>
        <function-ref name="set" scoped="" ref="0xb7023550"/>
        <function-ref name="clr" scoped="" ref="0xb7023630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW5" ref="0xb7022bd0" loc="25:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW5" scoped="" ref="0xb7022bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7022da8"/>
        <function-ref name="isInput" scoped="" ref="0xb7022e88"/>
        <function-ref name="toggle" scoped="" ref="0xb7021010"/>
        <function-ref name="isOutput" scoped="" ref="0xb70210f0"/>
        <function-ref name="get" scoped="" ref="0xb70211d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb70212b0"/>
        <function-ref name="set" scoped="" ref="0xb7021390"/>
        <function-ref name="clr" scoped="" ref="0xb7021470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc2" ref="0xb7018d38" loc="47:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc2" scoped="" ref="0xb7018d38"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb7018f10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc4" ref="0xb70174f8" loc="49:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc4" scoped="" ref="0xb70174f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb70176d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int0" ref="0xb7020a38" loc="29:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int0" scoped="" ref="0xb7020a38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7020c10"/>
        <function-ref name="isInput" scoped="" ref="0xb7020cf0"/>
        <function-ref name="toggle" scoped="" ref="0xb7020dd0"/>
        <function-ref name="isOutput" scoped="" ref="0xb7020eb0"/>
        <function-ref name="get" scoped="" ref="0xb701f010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb701f0f0"/>
        <function-ref name="set" scoped="" ref="0xb701f1d0"/>
        <function-ref name="clr" scoped="" ref="0xb701f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int2_Interrupt" ref="0xb701c888" loc="37:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int2_Interrupt" scoped="" ref="0xb701c888"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb701ca60"/>
        <function-ref name="disable" scoped="" ref="0xb701cb40"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb701cc20"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb701cd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="USART1_CLK" ref="0xb701b6b0" loc="40:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="USART1_CLK" scoped="" ref="0xb701b6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb701b888"/>
        <function-ref name="isInput" scoped="" ref="0xb701b968"/>
        <function-ref name="toggle" scoped="" ref="0xb701ba48"/>
        <function-ref name="isOutput" scoped="" ref="0xb701bb28"/>
        <function-ref name="get" scoped="" ref="0xb701bc08"/>
        <function-ref name="makeOutput" scoped="" ref="0xb701bce8"/>
        <function-ref name="set" scoped="" ref="0xb701bdc8"/>
        <function-ref name="clr" scoped="" ref="0xb701bea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc7" ref="0xb7016208" loc="52:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc7" scoped="" ref="0xb7016208"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb70163e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW0" ref="0xb7037958" loc="20:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW0" scoped="" ref="0xb7037958"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7037b30"/>
        <function-ref name="isInput" scoped="" ref="0xb7037c10"/>
        <function-ref name="toggle" scoped="" ref="0xb7037cf0"/>
        <function-ref name="isOutput" scoped="" ref="0xb7037dd0"/>
        <function-ref name="get" scoped="" ref="0xb7037eb0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7025010"/>
        <function-ref name="set" scoped="" ref="0xb70250f0"/>
        <function-ref name="clr" scoped="" ref="0xb70251d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int3" ref="0xb701e880" loc="32:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int3" scoped="" ref="0xb701e880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb701ea58"/>
        <function-ref name="isInput" scoped="" ref="0xb701eb38"/>
        <function-ref name="toggle" scoped="" ref="0xb701ec18"/>
        <function-ref name="isOutput" scoped="" ref="0xb701ecf8"/>
        <function-ref name="get" scoped="" ref="0xb701edd8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb701eeb8"/>
        <function-ref name="set" scoped="" ref="0xb701d010"/>
        <function-ref name="clr" scoped="" ref="0xb701d0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc0" ref="0xb7016d28" loc="18:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc0" scoped="" ref="0xb7016d28"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb7016f00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc3" ref="0xb70128b8" loc="21:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc3" scoped="" ref="0xb70128b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb7012a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc5" ref="0xb7011090" loc="23:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc5" scoped="" ref="0xb7011090"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb7011268"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc1" ref="0xb7012118" loc="19:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc1" scoped="" ref="0xb7012118"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb70122f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc6" ref="0xb7011460" loc="24:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc6" scoped="" ref="0xb7011460"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb7011638"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc2" ref="0xb70124e8" loc="20:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc2" scoped="" ref="0xb70124e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb70126c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc4" ref="0xb7012c88" loc="22:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc4" scoped="" ref="0xb7012c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb7012e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc7" ref="0xb7011830" loc="25:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc7" scoped="" ref="0xb7011830"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb7011a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int6" ref="0xb70036b8" loc="51:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int6" scoped="" ref="0xb70036b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb7003890"/>
        <function-ref name="fired" scoped="" ref="0xb7003970"/>
        <function-ref name="disable" scoped="" ref="0xb7003a50"/>
        <function-ref name="edge" scoped="" ref="0xb7003b30"/>
        <function-ref name="enable" scoped="" ref="0xb7003c10"/>
        <function-ref name="getValue" scoped="" ref="0xb7003cf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int1" ref="0xb7004a88" loc="46:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int1" scoped="" ref="0xb7004a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb7004c60"/>
        <function-ref name="fired" scoped="" ref="0xb7004d40"/>
        <function-ref name="disable" scoped="" ref="0xb7004e20"/>
        <function-ref name="edge" scoped="" ref="0xb7004f00"/>
        <function-ref name="enable" scoped="" ref="0xb7008010"/>
        <function-ref name="getValue" scoped="" ref="0xb70080f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int4" ref="0xb70074f8" loc="49:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int4" scoped="" ref="0xb70074f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb70076d0"/>
        <function-ref name="fired" scoped="" ref="0xb70077b0"/>
        <function-ref name="disable" scoped="" ref="0xb7007890"/>
        <function-ref name="edge" scoped="" ref="0xb7007970"/>
        <function-ref name="enable" scoped="" ref="0xb7007a50"/>
        <function-ref name="getValue" scoped="" ref="0xb7007b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int7" ref="0xb7002010" loc="52:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int7" scoped="" ref="0xb7002010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb70021e8"/>
        <function-ref name="fired" scoped="" ref="0xb70022c8"/>
        <function-ref name="disable" scoped="" ref="0xb70023a8"/>
        <function-ref name="edge" scoped="" ref="0xb7002488"/>
        <function-ref name="enable" scoped="" ref="0xb7002568"/>
        <function-ref name="getValue" scoped="" ref="0xb7002648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int2" ref="0xb7008338" loc="47:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int2" scoped="" ref="0xb7008338"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb7008510"/>
        <function-ref name="fired" scoped="" ref="0xb70085f0"/>
        <function-ref name="disable" scoped="" ref="0xb70086d0"/>
        <function-ref name="edge" scoped="" ref="0xb70087b0"/>
        <function-ref name="enable" scoped="" ref="0xb7008890"/>
        <function-ref name="getValue" scoped="" ref="0xb7008970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int5" ref="0xb7007d78" loc="50:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int5" scoped="" ref="0xb7007d78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb7003010"/>
        <function-ref name="fired" scoped="" ref="0xb70030f0"/>
        <function-ref name="disable" scoped="" ref="0xb70031d0"/>
        <function-ref name="edge" scoped="" ref="0xb70032b0"/>
        <function-ref name="enable" scoped="" ref="0xb7003390"/>
        <function-ref name="getValue" scoped="" ref="0xb7003470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int0" ref="0xb7004208" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int0" scoped="" ref="0xb7004208"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb70043e0"/>
        <function-ref name="fired" scoped="" ref="0xb70044c0"/>
        <function-ref name="disable" scoped="" ref="0xb70045a0"/>
        <function-ref name="edge" scoped="" ref="0xb7004680"/>
        <function-ref name="enable" scoped="" ref="0xb7004760"/>
        <function-ref name="getValue" scoped="" ref="0xb7004840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int3" ref="0xb7008bb8" loc="48:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int3" scoped="" ref="0xb7008bb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb7008d90"/>
        <function-ref name="fired" scoped="" ref="0xb7008e70"/>
        <function-ref name="disable" scoped="" ref="0xb7007010"/>
        <function-ref name="edge" scoped="" ref="0xb70070f0"/>
        <function-ref name="enable" scoped="" ref="0xb70071d0"/>
        <function-ref name="getValue" scoped="" ref="0xb70072b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig6" ref="0xb6ffd728" loc="49:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig6" scoped="" ref="0xb6ffd728"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6ffd900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig1" ref="0xb6ffe010" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig1" scoped="" ref="0xb6ffe010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6ffe1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig4" ref="0xb6ffed78" loc="47:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig4" scoped="" ref="0xb6ffed78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6ffd010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig7" ref="0xb6ffdba0" loc="50:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig7" scoped="" ref="0xb6ffdba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6ffdd78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig2" ref="0xb6ffe488" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig2" scoped="" ref="0xb6ffe488"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6ffe660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig5" ref="0xb6ffd2b0" loc="48:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig5" scoped="" ref="0xb6ffd2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6ffd488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig0" ref="0xb6fffb00" loc="43:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig0" scoped="" ref="0xb6fffb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fffcd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig3" ref="0xb6ffe900" loc="46:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig3" scoped="" ref="0xb6ffe900"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6ffead8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6fedcf0" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6fedcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fedec8"/>
        <function-ref name="fired" scoped="" ref="0xb6fec010"/>
        <function-ref name="disable" scoped="" ref="0xb6fec0f0"/>
        <function-ref name="edge" scoped="" ref="0xb6fec1d0"/>
        <function-ref name="enable" scoped="" ref="0xb6fec2b0"/>
        <function-ref name="getValue" scoped="" ref="0xb6fec390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6fec510" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6fec510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fec6e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6fe1e68" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6fe1e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fe0050"/>
        <function-ref name="fired" scoped="" ref="0xb6fe0130"/>
        <function-ref name="disable" scoped="" ref="0xb6fe0210"/>
        <function-ref name="edge" scoped="" ref="0xb6fe02f0"/>
        <function-ref name="enable" scoped="" ref="0xb6fe03d0"/>
        <function-ref name="getValue" scoped="" ref="0xb6fe04b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6fe0630" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6fe0630"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fe0808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6fde010" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6fde010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fde1e8"/>
        <function-ref name="fired" scoped="" ref="0xb6fde2c8"/>
        <function-ref name="disable" scoped="" ref="0xb6fde3a8"/>
        <function-ref name="edge" scoped="" ref="0xb6fde488"/>
        <function-ref name="enable" scoped="" ref="0xb6fde568"/>
        <function-ref name="getValue" scoped="" ref="0xb6fde648"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6fde7c8" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6fde7c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fde9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6fdb228" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6fdb228"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fdb400"/>
        <function-ref name="fired" scoped="" ref="0xb6fdb4e0"/>
        <function-ref name="disable" scoped="" ref="0xb6fdb5c0"/>
        <function-ref name="edge" scoped="" ref="0xb6fdb6a0"/>
        <function-ref name="enable" scoped="" ref="0xb6fdb780"/>
        <function-ref name="getValue" scoped="" ref="0xb6fdb860"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6fdb9e0" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6fdb9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fdbbb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6fd93b0" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6fd93b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fd9588"/>
        <function-ref name="fired" scoped="" ref="0xb6fd9668"/>
        <function-ref name="disable" scoped="" ref="0xb6fd9748"/>
        <function-ref name="edge" scoped="" ref="0xb6fd9828"/>
        <function-ref name="enable" scoped="" ref="0xb6fd9908"/>
        <function-ref name="getValue" scoped="" ref="0xb6fd99e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6fd9b68" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6fd9b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fd9d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6fd7538" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6fd7538"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fd7710"/>
        <function-ref name="fired" scoped="" ref="0xb6fd77f0"/>
        <function-ref name="disable" scoped="" ref="0xb6fd78d0"/>
        <function-ref name="edge" scoped="" ref="0xb6fd79b0"/>
        <function-ref name="enable" scoped="" ref="0xb6fd7a90"/>
        <function-ref name="getValue" scoped="" ref="0xb6fd7b70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6fd7cf0" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6fd7cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fd7ec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6fd56c0" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6fd56c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fd5898"/>
        <function-ref name="fired" scoped="" ref="0xb6fd5978"/>
        <function-ref name="disable" scoped="" ref="0xb6fd5a58"/>
        <function-ref name="edge" scoped="" ref="0xb6fd5b38"/>
        <function-ref name="enable" scoped="" ref="0xb6fd5c18"/>
        <function-ref name="getValue" scoped="" ref="0xb6fd5cf8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6fd5e78" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6fd5e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fd4070"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6fd27a8" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6fd27a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fd2980"/>
        <function-ref name="fired" scoped="" ref="0xb6fd2a60"/>
        <function-ref name="disable" scoped="" ref="0xb6fd2b40"/>
        <function-ref name="edge" scoped="" ref="0xb6fd2c20"/>
        <function-ref name="enable" scoped="" ref="0xb6fd2d00"/>
        <function-ref name="getValue" scoped="" ref="0xb6fd2de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6fd1010" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6fd1010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fd11e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Interrupt" ref="0xb6fcbb58" loc="9:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6fcbb58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fcbd30"/>
        <function-ref name="fired" scoped="" ref="0xb6fcbe10"/>
        <function-ref name="disable" scoped="" ref="0xb6fcbef0"/>
        <function-ref name="edge" scoped="" ref="0xb6fca010"/>
        <function-ref name="enable" scoped="" ref="0xb6fca0f0"/>
        <function-ref name="getValue" scoped="" ref="0xb6fca1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0xb6fcb560" loc="8:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Interrupt" scoped="" ref="0xb6fcb560"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fcb738"/>
        <function-ref name="disable" scoped="" ref="0xb6fcb818"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb6fcb8f8"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb6fcb9d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Interrupt" ref="0xb6fc2c30" loc="9:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6fc2c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fc2e08"/>
        <function-ref name="fired" scoped="" ref="0xb6fc2ee8"/>
        <function-ref name="disable" scoped="" ref="0xb6fc1010"/>
        <function-ref name="edge" scoped="" ref="0xb6fc10f0"/>
        <function-ref name="enable" scoped="" ref="0xb6fc11d0"/>
        <function-ref name="getValue" scoped="" ref="0xb6fc12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0xb6fc2638" loc="8:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Interrupt" scoped="" ref="0xb6fc2638"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fc2810"/>
        <function-ref name="disable" scoped="" ref="0xb6fc28f0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb6fc29d0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb6fc2ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Interrupt" ref="0xb6fc0d50" loc="9:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt2C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6fc0d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fc0f28"/>
        <function-ref name="fired" scoped="" ref="0xb6fbf018"/>
        <function-ref name="disable" scoped="" ref="0xb6fbf0f8"/>
        <function-ref name="edge" scoped="" ref="0xb6fbf1d8"/>
        <function-ref name="enable" scoped="" ref="0xb6fbf2b8"/>
        <function-ref name="getValue" scoped="" ref="0xb6fbf398"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0xb6fc0758" loc="8:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt2C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Interrupt" scoped="" ref="0xb6fc0758"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fc0930"/>
        <function-ref name="disable" scoped="" ref="0xb6fc0a10"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb6fc0af0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb6fc0bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Interrupt" ref="0xb6fbee00" loc="9:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6fbee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fbc010"/>
        <function-ref name="fired" scoped="" ref="0xb6fbc0f0"/>
        <function-ref name="disable" scoped="" ref="0xb6fbc1d0"/>
        <function-ref name="edge" scoped="" ref="0xb6fbc2b0"/>
        <function-ref name="enable" scoped="" ref="0xb6fbc390"/>
        <function-ref name="getValue" scoped="" ref="0xb6fbc470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0xb6fbe808" loc="8:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Interrupt" scoped="" ref="0xb6fbe808"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fbe9e0"/>
        <function-ref name="disable" scoped="" ref="0xb6fbeac0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb6fbeba0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb6fbec80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb6fb47e8" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="AccelConfigP.WarmupTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb6fb47e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6fb2330"/>
        <function-ref name="fired" scoped="" ref="0xb6fb3590"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb6fb3c98"/>
        <function-ref name="isOneShot" scoped="" ref="0xb6fb3a40"/>
        <function-ref name="getdt" scoped="" ref="0xb6fb27e0"/>
        <function-ref name="gett0" scoped="" ref="0xb6fb2588"/>
        <function-ref name="isRunning" scoped="" ref="0xb6fb37e8"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb6fb4e10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb6fb2010"/>
        <function-ref name="startOneShot" scoped="" ref="0xb6fb30b8"/>
        <function-ref name="stop" scoped="" ref="0xb6fb3338"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb6fafc28" loc="92:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="AccelConfigP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb6fafc28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb6fafe10"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6fafef0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb6f68bb8" loc="96:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="AccelConfigP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb6f68bb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb6f68da0"/>
        <function-ref name="configure" scoped="" ref="0xb6f68e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0xb6f68070" loc="93:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="AccelConfigP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6f68070"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6f68248"/>
        <function-ref name="requested" scoped="" ref="0xb6f68328"/>
        <function-ref name="granted" scoped="" ref="0xb6f68408"/>
        <function-ref name="isOwner" scoped="" ref="0xb6f684e8"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6f685c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6faf4e8" loc="91:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="AccelConfigP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6faf4e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6faf6d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6faf7b0"/>
        <function-ref name="request" scoped="" ref="0xb6faf890"/>
        <function-ref name="granted" scoped="" ref="0xb6faf970"/>
        <function-ref name="isOwner" scoped="" ref="0xb6fafa50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb6f68708" loc="94:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="AccelConfigP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6f68708"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6f688e0"/>
        <function-ref name="userId" scoped="" ref="0xb6f689c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb615a7c0" loc="44:../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="AccelConfigP.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb615a7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb615a998"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0xb615aaf8" loc="45:../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="AccelConfigP.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0xb615aaf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb615acd0"/>
        <function-ref name="isEmpty" scoped="" ref="0xb615adb0"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb615ae90"/>
        <function-ref name="dequeue" scoped="" ref="0xb6159010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb6157488" loc="55:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb6157488"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb6157670"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6157750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb61563f8" loc="60:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb61563f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb61565e0"/>
        <function-ref name="configure" scoped="" ref="0xb61566c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0xb6156820" loc="61:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb6156820"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb61569f8"/>
        <function-ref name="isEmpty" scoped="" ref="0xb6156ad8"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb6156bb8"/>
        <function-ref name="dequeue" scoped="" ref="0xb6156c98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0xb6157890" loc="56:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6157890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6157a68"/>
        <function-ref name="requested" scoped="" ref="0xb6157b48"/>
        <function-ref name="granted" scoped="" ref="0xb6157c28"/>
        <function-ref name="isOwner" scoped="" ref="0xb6157d08"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6157de8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb6156dd8" loc="62:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb6156dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb6155010"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb61550f0"/>
        <function-ref name="led1On" scoped="" ref="0xb61551d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb61552b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb6155390"/>
        <function-ref name="get" scoped="" ref="0xb6155470"/>
        <function-ref name="led1Off" scoped="" ref="0xb6155550"/>
        <function-ref name="led0On" scoped="" ref="0xb61558d0"/>
        <function-ref name="set" scoped="" ref="0xb6155710"/>
        <function-ref name="led2On" scoped="" ref="0xb6155630"/>
        <function-ref name="led2Off" scoped="" ref="0xb61557f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6159ce8" loc="54:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6159ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6159ed0"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6157010"/>
        <function-ref name="request" scoped="" ref="0xb61570f0"/>
        <function-ref name="granted" scoped="" ref="0xb61571d0"/>
        <function-ref name="isOwner" scoped="" ref="0xb61572b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb6157f28" loc="57:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6157f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6156110"/>
        <function-ref name="userId" scoped="" ref="0xb61561f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0xb6155a50" loc="75:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0xb6155a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6155c28"/>
        <function-ref name="runTask" scoped="" ref="0xb6155d08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControl" ref="0xb6f66c68" loc="69:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="AccelConfigP.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6f66c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6f66e40"/>
        <function-ref name="stopDone" scoped="" ref="0xb6f66f20"/>
        <function-ref name="start" scoped="" ref="0xb6f65018"/>
        <function-ref name="stop" scoped="" ref="0xb6f650f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0xb6f65238" loc="71:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="AccelConfigP.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0xb6f65238"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0xb6f65410"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0xb6f65550" loc="72:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="AccelConfigP.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6f65550"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6f65728"/>
        <function-ref name="requested" scoped="" ref="0xb6f65808"/>
        <function-ref name="granted" scoped="" ref="0xb6f658e8"/>
        <function-ref name="isOwner" scoped="" ref="0xb6f659c8"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6f65aa8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0xb6f65be8" loc="73:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="AccelConfigP.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6f65be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6f65dc0"/>
        <function-ref name="userId" scoped="" ref="0xb6f65ea0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControl" ref="0xb613a970" loc="61:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb613a970"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb613ab48"/>
        <function-ref name="stopDone" scoped="" ref="0xb613ac28"/>
        <function-ref name="start" scoped="" ref="0xb613ad08"/>
        <function-ref name="stop" scoped="" ref="0xb613ade8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0xb613af28" loc="63:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0xb613af28"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0xb6139110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopTask" ref="0xb6139d20" loc="78:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopTask" scoped="" ref="0xb6139d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6139ef8"/>
        <function-ref name="runTask" scoped="" ref="0xb6138010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0xb6139250" loc="64:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6139250"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6139428"/>
        <function-ref name="requested" scoped="" ref="0xb6139508"/>
        <function-ref name="granted" scoped="" ref="0xb61395e8"/>
        <function-ref name="isOwner" scoped="" ref="0xb61396c8"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb61397a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startTask" ref="0xb6138190" loc="73:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startTask" scoped="" ref="0xb6138190"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6138368"/>
        <function-ref name="runTask" scoped="" ref="0xb6138448"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StdControl" ref="0xb613a578" loc="60:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb613a578"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb613a750"/>
        <function-ref name="stop" scoped="" ref="0xb613a830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0xb61398e8" loc="65:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb61398e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6139ac0"/>
        <function-ref name="userId" scoped="" ref="0xb6139ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6f472f8" loc="24:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="AccelReadP.MultiplexX"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6f472f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6f47930"/>
        <function-ref name="readDone" scoped="" ref="0xb6f47b98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0xb6f39010" loc="26:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="AccelReadP.MultiplexX"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0xb6f39010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6f39648"/>
        <function-ref name="readDone" scoped="" ref="0xb6f398b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0xb6f39c30" loc="27:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="AccelReadP.MultiplexX"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6f39c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6f39e18"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6f39ef8"/>
        <function-ref name="request" scoped="" ref="0xb6f38010"/>
        <function-ref name="granted" scoped="" ref="0xb6f380f0"/>
        <function-ref name="isOwner" scoped="" ref="0xb6f381d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6f371b8" loc="24:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="AccelReadP.MultiplexY"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6f371b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6f377f0"/>
        <function-ref name="readDone" scoped="" ref="0xb6f37a58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0xb6f37eb8" loc="26:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="AccelReadP.MultiplexY"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0xb6f37eb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6f35558"/>
        <function-ref name="readDone" scoped="" ref="0xb6f357c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0xb6f35b40" loc="27:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="AccelReadP.MultiplexY"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6f35b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6f35d28"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6f35e08"/>
        <function-ref name="request" scoped="" ref="0xb6f35ee8"/>
        <function-ref name="granted" scoped="" ref="0xb6f34010"/>
        <function-ref name="isOwner" scoped="" ref="0xb6f340f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb6197eb0" loc="25:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.Sensor.AdcX"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb6197eb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb61950c0"/>
        <function-ref name="configure" scoped="" ref="0xb61951a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6198e38" loc="22:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.Sensor.AdcX"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6198e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6197478"/>
        <function-ref name="readDone" scoped="" ref="0xb61976d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0xb61979d8" loc="24:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.Sensor.AdcX"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb61979d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb6197bb0"/>
        <function-ref name="getChannel" scoped="" ref="0xb6197c90"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb6197d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6f2fbc8" loc="19:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6f2fbc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6f2c218"/>
        <function-ref name="readDone" scoped="" ref="0xb6f2c470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0xb6f2b010" loc="20:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0xb6f2b010"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6f2b658"/>
        <function-ref name="readDone" scoped="" ref="0xb6f2b8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0xb6f28010" loc="23:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb6f28010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb6f281e8"/>
        <function-ref name="getChannel" scoped="" ref="0xb6f282c8"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb6f283a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0xb6f28848" loc="24:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6f28848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6f28a20"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6f28b00"/>
        <function-ref name="request" scoped="" ref="0xb6f28be0"/>
        <function-ref name="granted" scoped="" ref="0xb6f28cc0"/>
        <function-ref name="isOwner" scoped="" ref="0xb6f28da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb6f23100" loc="58:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb6f23100"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb6f232d8"/>
        <function-ref name="configure" scoped="" ref="0xb6f233b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0xb6f1c870" loc="56:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0xb6f1c870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0xb6f1ca48"/>
        <function-ref name="dataReady" scoped="" ref="0xb6f1cb28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0xb6f20300" loc="55:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6f20300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0xb6f204d8"/>
        <function-ref name="cancel" scoped="" ref="0xb6f205b8"/>
        <function-ref name="dataReady" scoped="" ref="0xb6f20698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6f27830" loc="54:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6f27830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6f27a08"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6f27ae8"/>
        <function-ref name="request" scoped="" ref="0xb6f27bc8"/>
        <function-ref name="granted" scoped="" ref="0xb6f27ca8"/>
        <function-ref name="isOwner" scoped="" ref="0xb6f27d88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6f23d68" loc="54:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6f23d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6f1a010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0xb6f17c30" loc="57:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0xb6f17c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0xb6f17e08"/>
        <function-ref name="dataReady" scoped="" ref="0xb6f17ee8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0xb6f176a8" loc="56:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6f176a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0xb6f17880"/>
        <function-ref name="cancel" scoped="" ref="0xb6f17960"/>
        <function-ref name="dataReady" scoped="" ref="0xb6f17a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0xb6f0e498" loc="60:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6f0e498"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0xb6f0e670"/>
        <function-ref name="getAdmux" scoped="" ref="0xb6f0e750"/>
        <function-ref name="setPrescaler" scoped="" ref="0xb6f0e830"/>
        <function-ref name="isEnabled" scoped="" ref="0xb6f0e910"/>
        <function-ref name="enableAdc" scoped="" ref="0xb6f0e9f0"/>
        <function-ref name="setAdmux" scoped="" ref="0xb6f0ead0"/>
        <function-ref name="enableInterruption" scoped="" ref="0xb6f0ebb0"/>
        <function-ref name="isComplete" scoped="" ref="0xb6f0ec90"/>
        <function-ref name="cancel" scoped="" ref="0xb6f0ed70"/>
        <function-ref name="disableAdc" scoped="" ref="0xb6f0ee50"/>
        <function-ref name="resetInterrupt" scoped="" ref="0xb6f18010"/>
        <function-ref name="disableInterruption" scoped="" ref="0xb6f180f0"/>
        <function-ref name="startConversion" scoped="" ref="0xb6f181d0"/>
        <function-ref name="isStarted" scoped="" ref="0xb6f18330"/>
        <function-ref name="setAdcsra" scoped="" ref="0xb6f18410"/>
        <function-ref name="setContinuous" scoped="" ref="0xb6f184f0"/>
        <function-ref name="getAdcsra" scoped="" ref="0xb6f185d0"/>
        <function-ref name="getValue" scoped="" ref="0xb6f186b0"/>
        <function-ref name="dataReady" scoped="" ref="0xb6f18790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0xb6f17218" loc="55:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0xb6f17218"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6f173f0"/>
        <function-ref name="stop" scoped="" ref="0xb6f174d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0xb6f18968" loc="61:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0xb6f18968"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0xb6f18b40"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0xb6f18c20"/>
        <function-ref name="calibrateMicro" scoped="" ref="0xb6f18d00"/>
        <function-ref name="actualMicro" scoped="" ref="0xb6f18de0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0xb6f18ec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0xb6f22a38" loc="45:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6f22a38"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0xb6f22c10"/>
        <function-ref name="getAdmux" scoped="" ref="0xb6f22cf0"/>
        <function-ref name="setPrescaler" scoped="" ref="0xb6f22dd0"/>
        <function-ref name="isEnabled" scoped="" ref="0xb6f22eb0"/>
        <function-ref name="enableAdc" scoped="" ref="0xb6ef0010"/>
        <function-ref name="setAdmux" scoped="" ref="0xb6ef00f0"/>
        <function-ref name="enableInterruption" scoped="" ref="0xb6ef01d0"/>
        <function-ref name="isComplete" scoped="" ref="0xb6ef02b0"/>
        <function-ref name="cancel" scoped="" ref="0xb6ef0390"/>
        <function-ref name="disableAdc" scoped="" ref="0xb6ef0470"/>
        <function-ref name="resetInterrupt" scoped="" ref="0xb6ef0550"/>
        <function-ref name="disableInterruption" scoped="" ref="0xb6ef0630"/>
        <function-ref name="startConversion" scoped="" ref="0xb6ef0710"/>
        <function-ref name="isStarted" scoped="" ref="0xb6ef0870"/>
        <function-ref name="setAdcsra" scoped="" ref="0xb6ef0950"/>
        <function-ref name="setContinuous" scoped="" ref="0xb6ef0a30"/>
        <function-ref name="getAdcsra" scoped="" ref="0xb6ef0b10"/>
        <function-ref name="getValue" scoped="" ref="0xb6ef0bf0"/>
        <function-ref name="dataReady" scoped="" ref="0xb6ef0cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0xb6eef718" loc="48:../../tos/chips/atm1281/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6eef718"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0xb6eef8f0"/>
        <function-ref name="getAdmux" scoped="" ref="0xb6eef9d0"/>
        <function-ref name="setPrescaler" scoped="" ref="0xb6eefab0"/>
        <function-ref name="isEnabled" scoped="" ref="0xb6eefb90"/>
        <function-ref name="enableAdc" scoped="" ref="0xb6eefc70"/>
        <function-ref name="setAdmux" scoped="" ref="0xb6eefd50"/>
        <function-ref name="enableInterruption" scoped="" ref="0xb6eefe30"/>
        <function-ref name="isComplete" scoped="" ref="0xb6eeff10"/>
        <function-ref name="cancel" scoped="" ref="0xb6eec010"/>
        <function-ref name="disableAdc" scoped="" ref="0xb6eec0f0"/>
        <function-ref name="resetInterrupt" scoped="" ref="0xb6eec1d0"/>
        <function-ref name="disableInterruption" scoped="" ref="0xb6eec2b0"/>
        <function-ref name="startConversion" scoped="" ref="0xb6eec390"/>
        <function-ref name="isStarted" scoped="" ref="0xb6eec4f0"/>
        <function-ref name="setAdcsra" scoped="" ref="0xb6eec5d0"/>
        <function-ref name="setContinuous" scoped="" ref="0xb6eec6b0"/>
        <function-ref name="getAdcsra" scoped="" ref="0xb6eec790"/>
        <function-ref name="getValue" scoped="" ref="0xb6eec870"/>
        <function-ref name="dataReady" scoped="" ref="0xb6eec950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0xb6eecb38" loc="49:../../tos/chips/atm1281/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0xb6eecb38"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0xb6eecd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb6ef2ea0" loc="92:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb6ef2ea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb6ece0c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6ece1a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb6ecee28" loc="96:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb6ecee28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb6ecd050"/>
        <function-ref name="configure" scoped="" ref="0xb6ecd130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0xb6ece2e0" loc="93:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6ece2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6ece4b8"/>
        <function-ref name="requested" scoped="" ref="0xb6ece598"/>
        <function-ref name="granted" scoped="" ref="0xb6ece678"/>
        <function-ref name="isOwner" scoped="" ref="0xb6ece758"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6ece838"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6ef2760" loc="91:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6ef2760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6ef2948"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6ef2a28"/>
        <function-ref name="request" scoped="" ref="0xb6ef2b08"/>
        <function-ref name="granted" scoped="" ref="0xb6ef2be8"/>
        <function-ref name="isOwner" scoped="" ref="0xb6ef2cc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb6ece978" loc="94:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6ece978"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6eceb50"/>
        <function-ref name="userId" scoped="" ref="0xb6ecec30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb611f640" loc="44:../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb611f640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb611f818"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0xb611f978" loc="45:../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0xb611f978"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb611fb50"/>
        <function-ref name="isEmpty" scoped="" ref="0xb611fc30"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb611fd10"/>
        <function-ref name="dequeue" scoped="" ref="0xb611fdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb611d3a8" loc="55:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb611d3a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb611d590"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb611d670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb611c338" loc="60:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb611c338"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb611c520"/>
        <function-ref name="configure" scoped="" ref="0xb611c600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0xb611c760" loc="61:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb611c760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb611c938"/>
        <function-ref name="isEmpty" scoped="" ref="0xb611ca18"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb611caf8"/>
        <function-ref name="dequeue" scoped="" ref="0xb611cbd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0xb611d7b0" loc="56:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb611d7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb611d988"/>
        <function-ref name="requested" scoped="" ref="0xb611da68"/>
        <function-ref name="granted" scoped="" ref="0xb611db48"/>
        <function-ref name="isOwner" scoped="" ref="0xb611dc28"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb611dd08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb611cd18" loc="62:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb611cd18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb611cef0"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb611a010"/>
        <function-ref name="led1On" scoped="" ref="0xb611a0f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb611a1d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb611a2b0"/>
        <function-ref name="get" scoped="" ref="0xb611a390"/>
        <function-ref name="led1Off" scoped="" ref="0xb611a470"/>
        <function-ref name="led0On" scoped="" ref="0xb611a7f0"/>
        <function-ref name="set" scoped="" ref="0xb611a630"/>
        <function-ref name="led2On" scoped="" ref="0xb611a550"/>
        <function-ref name="led2Off" scoped="" ref="0xb611a710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb611ebc0" loc="54:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb611ebc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb611eda8"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb611ee88"/>
        <function-ref name="request" scoped="" ref="0xb611d010"/>
        <function-ref name="granted" scoped="" ref="0xb611d0f0"/>
        <function-ref name="isOwner" scoped="" ref="0xb611d1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb611de48" loc="57:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb611de48"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb611c050"/>
        <function-ref name="userId" scoped="" ref="0xb611c130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0xb611a970" loc="75:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0xb611a970"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb611ab48"/>
        <function-ref name="runTask" scoped="" ref="0xb611ac28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0xb6ecb230" loc="72:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0xb6ecb230"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0xb6ecb408"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0xb6ecb548" loc="73:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6ecb548"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6ecb720"/>
        <function-ref name="requested" scoped="" ref="0xb6ecb800"/>
        <function-ref name="granted" scoped="" ref="0xb6ecb8e0"/>
        <function-ref name="isOwner" scoped="" ref="0xb6ecb9c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6ecbaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0xb6eccda8" loc="70:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0xb6eccda8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6ecb010"/>
        <function-ref name="stop" scoped="" ref="0xb6ecb0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0xb6ecbbe0" loc="74:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6ecbbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6ecbdb8"/>
        <function-ref name="userId" scoped="" ref="0xb6ecbe98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0xb60ff7a8" loc="62:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0xb60ff7a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0xb60ff980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0xb60ffac0" loc="63:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb60ffac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb60ffc98"/>
        <function-ref name="requested" scoped="" ref="0xb60ffd78"/>
        <function-ref name="granted" scoped="" ref="0xb60ffe58"/>
        <function-ref name="isOwner" scoped="" ref="0xb60fe010"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb60fe0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0xb60ff3b0" loc="60:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0xb60ff3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb60ff588"/>
        <function-ref name="stop" scoped="" ref="0xb60ff668"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0xb60fe230" loc="64:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb60fe230"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb60fe408"/>
        <function-ref name="userId" scoped="" ref="0xb60fe4e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0xb6eb4260" loc="54:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0xb6eb4260"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0xb6eb49b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6ebb5f8" loc="48:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6ebb5f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6ebbc20"/>
        <function-ref name="readDone" scoped="" ref="0xb6ebbe78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0xb6eb9598" loc="49:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0xb6eb9598"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6eb9be0"/>
        <function-ref name="readDone" scoped="" ref="0xb6eb9e58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0xb6eb8ab0" loc="53:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb6eb8ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb6eb8c88"/>
        <function-ref name="getChannel" scoped="" ref="0xb6eb8d68"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb6eb8e48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0xb6eb8238" loc="52:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6eb8238"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0xb6eb8410"/>
        <function-ref name="cancel" scoped="" ref="0xb6eb84f0"/>
        <function-ref name="dataReady" scoped="" ref="0xb6eb85d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0xb6eade90" loc="104:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0xb6eade90"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6eab080"/>
        <function-ref name="runTask" scoped="" ref="0xb6eab160"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0xb6e9f010" loc="36:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0xb6e9f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0xb6e9f760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6ebcab8" loc="24:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6ebcab8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6ea1108"/>
        <function-ref name="readDone" scoped="" ref="0xb6ea1370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0xb6ea17d0" loc="26:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0xb6ea17d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6ea1e08"/>
        <function-ref name="readDone" scoped="" ref="0xb6e9c088"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0xb6e9c408" loc="27:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6e9c408"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6e9c5f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6e9c6d0"/>
        <function-ref name="request" scoped="" ref="0xb6e9c7b0"/>
        <function-ref name="granted" scoped="" ref="0xb6e9c890"/>
        <function-ref name="isOwner" scoped="" ref="0xb6e9c970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RootControl" ref="0xb6e73b90" loc="59:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0xb6e73b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0xb6e73d68"/>
        <function-ref name="setRoot" scoped="" ref="0xb6e73e48"/>
        <function-ref name="unsetRoot" scoped="" ref="0xb6e73f28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionPacket" ref="0xb6e8a498" loc="54:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionPacket" scoped="" ref="0xb6e8a498"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6e8a670"/>
        <function-ref name="setOrigin" scoped="" ref="0xb6e8a750"/>
        <function-ref name="setType" scoped="" ref="0xb6e8a830"/>
        <function-ref name="getOrigin" scoped="" ref="0xb6e8a910"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6e8a9f0"/>
        <function-ref name="getType" scoped="" ref="0xb6e8aad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionDebug" ref="0xb6e6b550" loc="65:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0xb6e6b550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0xb6e6b728"/>
        <function-ref name="logEventMsg" scoped="" ref="0xb6e6b808"/>
        <function-ref name="logEventSimple" scoped="" ref="0xb6e6b8e8"/>
        <function-ref name="logEventRoute" scoped="" ref="0xb6e6b9c8"/>
        <function-ref name="logEventDbg" scoped="" ref="0xb6e6baa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Intercept" ref="0xb6e8bc10" loc="51:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Intercept" scoped="" ref="0xb6e8bc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0xb6e8bde8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6e86ce8" loc="53:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6e86ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e86ec0"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6e8a010"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e8a0f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e8a1d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6e8a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6e8e010" loc="50:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6e8e010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e8e1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6e91e38" loc="48:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6e91e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6e8f050"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e8f130"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e8f210"/>
        <function-ref name="cancel" scoped="" ref="0xb6e8f2f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6e8f3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpInfo" ref="0xb6e75e68" loc="57:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpInfo" scoped="" ref="0xb6e75e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getNeighborLinkQuality" scoped="" ref="0xb6e85050"/>
        <function-ref name="recomputeRoutes" scoped="" ref="0xb6e85130"/>
        <function-ref name="numNeighbors" scoped="" ref="0xb6e85210"/>
        <function-ref name="triggerRouteUpdate" scoped="" ref="0xb6e852f0"/>
        <function-ref name="getEtx" scoped="" ref="0xb6e853d0"/>
        <function-ref name="triggerImmediateRouteUpdate" scoped="" ref="0xb6e854b0"/>
        <function-ref name="setNeighborCongested" scoped="" ref="0xb6e85590"/>
        <function-ref name="getNeighborAddr" scoped="" ref="0xb6e85670"/>
        <function-ref name="getParent" scoped="" ref="0xb6e85750"/>
        <function-ref name="getNeighborRouteQuality" scoped="" ref="0xb6e85830"/>
        <function-ref name="isNeighborCongested" scoped="" ref="0xb6e85910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6e8f888" loc="49:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6e8f888"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e8fa60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpCongestion" ref="0xb6e73728" loc="58:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpCongestion" scoped="" ref="0xb6e73728"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpCongestion"/>
      </instance>
      <interface-functions>
        <function-ref name="isCongested" scoped="" ref="0xb6e73900"/>
        <function-ref name="setClientCongested" scoped="" ref="0xb6e739e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnicastNameFreeRouting" ref="0xb6e70570" loc="60:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb6e70570"/></type-interface>
      <instance>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
      </instance>
      <interface-functions>
        <function-ref name="hasRoute" scoped="" ref="0xb6e70748"/>
        <function-ref name="routeFound" scoped="" ref="0xb6e70828"/>
        <function-ref name="nextHop" scoped="" ref="0xb6e70908"/>
        <function-ref name="noRoute" scoped="" ref="0xb6e709e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpPacket" ref="0xb6e7b920" loc="55:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpPacket" scoped="" ref="0xb6e7b920"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6e7baf8"/>
        <function-ref name="option" scoped="" ref="0xb6e7bbd8"/>
        <function-ref name="setEtx" scoped="" ref="0xb6e7bcb8"/>
        <function-ref name="setOrigin" scoped="" ref="0xb6e7bd98"/>
        <function-ref name="clearOption" scoped="" ref="0xb6e7be78"/>
        <function-ref name="getEtx" scoped="" ref="0xb6e89010"/>
        <function-ref name="getOrigin" scoped="" ref="0xb6e890f0"/>
        <function-ref name="setType" scoped="" ref="0xb6e891d0"/>
        <function-ref name="setOption" scoped="" ref="0xb6e892b0"/>
        <function-ref name="matchPacket" scoped="" ref="0xb6e89390"/>
        <function-ref name="getThl" scoped="" ref="0xb6e89470"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6e89550"/>
        <function-ref name="matchInstance" scoped="" ref="0xb6e89630"/>
        <function-ref name="getType" scoped="" ref="0xb6e89790"/>
        <function-ref name="setThl" scoped="" ref="0xb6e89870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb6e91708" loc="47:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb6e91708"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6e918e0"/>
        <function-ref name="stop" scoped="" ref="0xb6e919c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionId" ref="0xb6e6f780" loc="64:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionId" scoped="" ref="0xb6e6f780"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionId"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fetch" scoped="" ref="0xb6e6f9d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RootControl" ref="0xb6e632a0" loc="92:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0xb6e632a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0xb6e63478"/>
        <function-ref name="setRoot" scoped="" ref="0xb6e63558"/>
        <function-ref name="unsetRoot" scoped="" ref="0xb6e63638"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionPacket" ref="0xb6e67bf0" loc="86:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionPacket" scoped="" ref="0xb6e67bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6e67dc8"/>
        <function-ref name="setOrigin" scoped="" ref="0xb6e67ea8"/>
        <function-ref name="setType" scoped="" ref="0xb6e66010"/>
        <function-ref name="getOrigin" scoped="" ref="0xb6e660f0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6e661d0"/>
        <function-ref name="getType" scoped="" ref="0xb6e662b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkEstimator" ref="0xb6e5e460" loc="90:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkEstimator" scoped="" ref="0xb6e5e460"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkEstimator"/>
      </instance>
      <interface-functions>
        <function-ref name="txAck" scoped="" ref="0xb6e5e638"/>
        <function-ref name="pinNeighbor" scoped="" ref="0xb6e5e718"/>
        <function-ref name="txNoAck" scoped="" ref="0xb6e5e7f8"/>
        <function-ref name="insertNeighbor" scoped="" ref="0xb6e5e8d8"/>
        <function-ref name="evicted" scoped="" ref="0xb6e5e9b8"/>
        <function-ref name="clearDLQ" scoped="" ref="0xb6e5ea98"/>
        <function-ref name="unpinNeighbor" scoped="" ref="0xb6e5eb78"/>
        <function-ref name="getLinkQuality" scoped="" ref="0xb6e5ec58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionDebug" ref="0xb6e62630" loc="98:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0xb6e62630"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0xb6e62808"/>
        <function-ref name="logEventMsg" scoped="" ref="0xb6e628e8"/>
        <function-ref name="logEventSimple" scoped="" ref="0xb6e629c8"/>
        <function-ref name="logEventRoute" scoped="" ref="0xb6e62aa8"/>
        <function-ref name="logEventDbg" scoped="" ref="0xb6e62b88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Intercept" ref="0xb6e67158" loc="83:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Intercept" scoped="" ref="0xb6e67158"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0xb6e67330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6e674b0" loc="85:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6e674b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e67688"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6e67768"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e67848"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e67928"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6e67a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6e68a88" loc="82:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6e68a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e68c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6e69970" loc="80:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6e69970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6e69b48"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e69c28"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e69d08"/>
        <function-ref name="cancel" scoped="" ref="0xb6e69de8"/>
        <function-ref name="sendDone" scoped="" ref="0xb6e69ec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpInfo" ref="0xb6e654b8" loc="89:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpInfo" scoped="" ref="0xb6e654b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getNeighborLinkQuality" scoped="" ref="0xb6e65690"/>
        <function-ref name="recomputeRoutes" scoped="" ref="0xb6e65770"/>
        <function-ref name="numNeighbors" scoped="" ref="0xb6e65850"/>
        <function-ref name="triggerRouteUpdate" scoped="" ref="0xb6e65930"/>
        <function-ref name="getEtx" scoped="" ref="0xb6e65a10"/>
        <function-ref name="triggerImmediateRouteUpdate" scoped="" ref="0xb6e65af0"/>
        <function-ref name="setNeighborCongested" scoped="" ref="0xb6e65bd0"/>
        <function-ref name="getNeighborAddr" scoped="" ref="0xb6e65cb0"/>
        <function-ref name="getParent" scoped="" ref="0xb6e65d90"/>
        <function-ref name="getNeighborRouteQuality" scoped="" ref="0xb6e65e70"/>
        <function-ref name="isNeighborCongested" scoped="" ref="0xb6e64010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6e683d8" loc="81:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6e683d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e685b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpCongestion" ref="0xb6e5ee20" loc="91:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpCongestion" scoped="" ref="0xb6e5ee20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpCongestion"/>
      </instance>
      <interface-functions>
        <function-ref name="isCongested" scoped="" ref="0xb6e63010"/>
        <function-ref name="setClientCongested" scoped="" ref="0xb6e630f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnicastNameFreeRouting" ref="0xb6e63858" loc="93:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb6e63858"/></type-interface>
      <instance>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
      </instance>
      <interface-functions>
        <function-ref name="hasRoute" scoped="" ref="0xb6e63ab0"/>
        <function-ref name="routeFound" scoped="" ref="0xb6e63b90"/>
        <function-ref name="nextHop" scoped="" ref="0xb6e63c70"/>
        <function-ref name="noRoute" scoped="" ref="0xb6e63d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpPacket" ref="0xb6e66450" loc="87:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpPacket" scoped="" ref="0xb6e66450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6e66628"/>
        <function-ref name="option" scoped="" ref="0xb6e66708"/>
        <function-ref name="setEtx" scoped="" ref="0xb6e667e8"/>
        <function-ref name="setOrigin" scoped="" ref="0xb6e668c8"/>
        <function-ref name="clearOption" scoped="" ref="0xb6e669a8"/>
        <function-ref name="getEtx" scoped="" ref="0xb6e66a88"/>
        <function-ref name="getOrigin" scoped="" ref="0xb6e66b68"/>
        <function-ref name="setType" scoped="" ref="0xb6e66c48"/>
        <function-ref name="setOption" scoped="" ref="0xb6e66d28"/>
        <function-ref name="matchPacket" scoped="" ref="0xb6e66e08"/>
        <function-ref name="getThl" scoped="" ref="0xb6e66ee8"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6e65010"/>
        <function-ref name="matchInstance" scoped="" ref="0xb6e650f0"/>
        <function-ref name="getType" scoped="" ref="0xb6e65250"/>
        <function-ref name="setThl" scoped="" ref="0xb6e65330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb6e69240" loc="79:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb6e69240"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6e69418"/>
        <function-ref name="stop" scoped="" ref="0xb6e694f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionId" ref="0xb6e62280" loc="97:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionId" scoped="" ref="0xb6e62280"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionId"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fetch" scoped="" ref="0xb6e62458"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6e5c3b8" loc="41:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6e5c3b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6e5c590"/>
        <function-ref name="stopDone" scoped="" ref="0xb6e5c670"/>
        <function-ref name="start" scoped="" ref="0xb6e5c750"/>
        <function-ref name="stop" scoped="" ref="0xb6e5c830"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0xb6e53538" loc="46:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0xb6e53538"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6e53710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6e53890" loc="48:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6e53890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e53a68"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6e53b48"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e53c28"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e53d08"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6e53de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb6e5cc90" loc="43:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb6e5cc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6e5ce68"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e59010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e590f0"/>
        <function-ref name="cancel" scoped="" ref="0xb6e591d0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6e592b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6e59db0" loc="45:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6e59db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e57010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0xb6e4ded0" loc="52:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0xb6e4ded0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0xb6e550c0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0xb6e551a0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0xb6e55280"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0xb6e55360"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6e59718" loc="44:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6e59718"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e598f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0xb6e4e248" loc="51:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6e4e248"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6e4e420"/>
        <function-ref name="noAck" scoped="" ref="0xb6e4e500"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6e4e5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0xb6e487d0" loc="53:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0xb6e487d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0xb6e489a8"/>
        <function-ref name="setRetries" scoped="" ref="0xb6e48a88"/>
        <function-ref name="getRetries" scoped="" ref="0xb6e48b68"/>
        <function-ref name="setRetryDelay" scoped="" ref="0xb6e48c48"/>
        <function-ref name="wasDelivered" scoped="" ref="0xb6e48d28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb6e56010" loc="49:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb6e56010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6e561e8"/>
        <function-ref name="source" scoped="" ref="0xb6e562c8"/>
        <function-ref name="address" scoped="" ref="0xb6e563a8"/>
        <function-ref name="destination" scoped="" ref="0xb6e56488"/>
        <function-ref name="setSource" scoped="" ref="0xb6e56568"/>
        <function-ref name="setDestination" scoped="" ref="0xb6e56648"/>
        <function-ref name="type" scoped="" ref="0xb6e56728"/>
        <function-ref name="setType" scoped="" ref="0xb6e56808"/>
        <function-ref name="isForMe" scoped="" ref="0xb6e568e8"/>
        <function-ref name="setGroup" scoped="" ref="0xb6e569c8"/>
        <function-ref name="localGroup" scoped="" ref="0xb6e56aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0xb6e451a8" loc="54:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0xb6e451a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0xb6e45380"/>
        <function-ref name="setChannel" scoped="" ref="0xb6e45460"/>
        <function-ref name="getChannel" scoped="" ref="0xb6e45540"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMicro" ref="0xb6e41c68" loc="56:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMicro" scoped="" ref="0xb6e41c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6e4c7a0"/>
        <function-ref name="clear" scoped="" ref="0xb6e4cb50"/>
        <function-ref name="isValid" scoped="" ref="0xb6e4c3f0"/>
        <function-ref name="set" scoped="" ref="0xb6e4cf00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0xb6e44650" loc="57:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6e44650"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6e3e1f8"/>
        <function-ref name="clear" scoped="" ref="0xb6e3e5a8"/>
        <function-ref name="isValid" scoped="" ref="0xb6e44e20"/>
        <function-ref name="set" scoped="" ref="0xb6e3e958"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6e3d3d8" loc="45:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6e3d3d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6e3d5b0"/>
        <function-ref name="stopDone" scoped="" ref="0xb6e3d690"/>
        <function-ref name="start" scoped="" ref="0xb6e3d770"/>
        <function-ref name="stop" scoped="" ref="0xb6e3d850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0xb6e2fb60" loc="66:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0xb6e2fb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e2e780"/>
        <function-ref name="get" scoped="" ref="0xb6e2e4c0"/>
        <function-ref name="isSet" scoped="" ref="0xb6e2e200"/>
        <function-ref name="set" scoped="" ref="0xb6e2ea40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0xb6e28748" loc="71:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6e28748"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6e27260"/>
        <function-ref name="clear" scoped="" ref="0xb6e27610"/>
        <function-ref name="isValid" scoped="" ref="0xb6e28e98"/>
        <function-ref name="set" scoped="" ref="0xb6e279c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0xb6e394b0" loc="50:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0xb6e394b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6e39688"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6e37600" loc="56:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6e37600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e377d8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6e378b8"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e37998"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e37a78"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6e37b58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb6e3dcb0" loc="47:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb6e3dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6e3de88"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e3a010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e3a0f0"/>
        <function-ref name="cancel" scoped="" ref="0xb6e3a1d0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6e3a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6e3adb0" loc="49:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6e3adb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e39010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0xb6e327f0" loc="65:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6e327f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e2f3d8"/>
        <function-ref name="get" scoped="" ref="0xb6e2f118"/>
        <function-ref name="isSet" scoped="" ref="0xb6e32e38"/>
        <function-ref name="set" scoped="" ref="0xb6e2f698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0xb6e35010" loc="60:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0xb6e35010"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0xb6e351e8"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0xb6e352c8"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0xb6e353a8"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0xb6e35488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6e3a718" loc="48:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6e3a718"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e3a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0xb6e2cd78" loc="70:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6e2cd78"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6e2b898"/>
        <function-ref name="clear" scoped="" ref="0xb6e2bc48"/>
        <function-ref name="isValid" scoped="" ref="0xb6e2b4e8"/>
        <function-ref name="set" scoped="" ref="0xb6e28010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0xb6e2c1e0" loc="69:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6e2c1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6e2c828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0xb6e30410" loc="64:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6e30410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e32010"/>
        <function-ref name="get" scoped="" ref="0xb6e30d18"/>
        <function-ref name="isSet" scoped="" ref="0xb6e30a58"/>
        <function-ref name="set" scoped="" ref="0xb6e322d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0xb6e36a10" loc="59:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6e36a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6e36be8"/>
        <function-ref name="noAck" scoped="" ref="0xb6e36cc8"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6e36da8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveDefault" ref="0xb6e39bb0" loc="53:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveDefault" scoped="" ref="0xb6e39bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e39d88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0xb6e35630" loc="61:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0xb6e35630"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0xb6e35808"/>
        <function-ref name="setRetries" scoped="" ref="0xb6e358e8"/>
        <function-ref name="getRetries" scoped="" ref="0xb6e359c8"/>
        <function-ref name="setRetryDelay" scoped="" ref="0xb6e35aa8"/>
        <function-ref name="wasDelivered" scoped="" ref="0xb6e35b88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb6e37cf0" loc="57:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb6e37cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6e37ec8"/>
        <function-ref name="source" scoped="" ref="0xb6e36010"/>
        <function-ref name="address" scoped="" ref="0xb6e360f0"/>
        <function-ref name="destination" scoped="" ref="0xb6e361d0"/>
        <function-ref name="setSource" scoped="" ref="0xb6e362b0"/>
        <function-ref name="setDestination" scoped="" ref="0xb6e36390"/>
        <function-ref name="type" scoped="" ref="0xb6e36470"/>
        <function-ref name="setType" scoped="" ref="0xb6e36550"/>
        <function-ref name="isForMe" scoped="" ref="0xb6e36630"/>
        <function-ref name="setGroup" scoped="" ref="0xb6e36710"/>
        <function-ref name="localGroup" scoped="" ref="0xb6e367f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0xb6e35d48" loc="62:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0xb6e35d48"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0xb6e34010"/>
        <function-ref name="setChannel" scoped="" ref="0xb6e340f0"/>
        <function-ref name="getChannel" scoped="" ref="0xb6e341d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0xb6e2acc8" loc="67:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6e2acc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0xb6e2aea0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SnoopDefault" ref="0xb6e372a8" loc="54:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SnoopDefault" scoped="" ref="0xb6e372a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e37480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6e25380" loc="41:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6e25380"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6e25558"/>
        <function-ref name="stopDone" scoped="" ref="0xb6e25638"/>
        <function-ref name="start" scoped="" ref="0xb6e25718"/>
        <function-ref name="stop" scoped="" ref="0xb6e257f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0xb6e0e4d8" loc="90:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0xb6e0e4d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e0c0b8"/>
        <function-ref name="get" scoped="" ref="0xb6e0ede0"/>
        <function-ref name="isSet" scoped="" ref="0xb6e0eb20"/>
        <function-ref name="set" scoped="" ref="0xb6e0c378"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Notifier" ref="0xb6e1e778" loc="70:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Notifier" scoped="" ref="0xb6e1e778"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6e1e950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendResource" ref="0xb6e1ee88" loc="72:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendResource" scoped="" ref="0xb6e1ee88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6e1d0f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6e1d1d0"/>
        <function-ref name="request" scoped="" ref="0xb6e1d2b0"/>
        <function-ref name="granted" scoped="" ref="0xb6e1d390"/>
        <function-ref name="isOwner" scoped="" ref="0xb6e1d470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0xb6e213c0" loc="57:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0xb6e213c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6e21598"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb6e25c58" loc="54:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb6e25c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6e25e30"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e25f10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e22010"/>
        <function-ref name="cancel" scoped="" ref="0xb6e220f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6e221d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6e22cd0" loc="56:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6e22cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e22ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0xb6e18010" loc="74:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0xb6e18010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0xb6e181e8"/>
        <function-ref name="address" scoped="" ref="0xb6e182c8"/>
        <function-ref name="destination" scoped="" ref="0xb6e183a8"/>
        <function-ref name="setSource" scoped="" ref="0xb6e18488"/>
        <function-ref name="setDestination" scoped="" ref="0xb6e18568"/>
        <function-ref name="pan" scoped="" ref="0xb6e18648"/>
        <function-ref name="setPan" scoped="" ref="0xb6e18728"/>
        <function-ref name="isForMe" scoped="" ref="0xb6e18808"/>
        <function-ref name="localPan" scoped="" ref="0xb6e188e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForIeee154Message" ref="0xb6e18b70" loc="75:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForIeee154Message" scoped="" ref="0xb6e18b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e18d48"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6e18e28"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e18f08"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e17010"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6e170f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0xb6e0f0f0" loc="89:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6e0f0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e0fcb8"/>
        <function-ref name="get" scoped="" ref="0xb6e0f9f8"/>
        <function-ref name="isSet" scoped="" ref="0xb6e0f738"/>
        <function-ref name="set" scoped="" ref="0xb6e0e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0xb6e17898" loc="79:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0xb6e17898"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0xb6e17a70"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0xb6e17b50"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0xb6e17c30"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0xb6e17d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForActiveMessage" ref="0xb6e1f298" loc="64:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForActiveMessage" scoped="" ref="0xb6e1f298"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e1f470"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6e1f550"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e1f630"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e1f710"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6e1f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6e22638" loc="55:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6e22638"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e22810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0xb6e0b7c8" loc="94:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6e0b7c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6e0a3f8"/>
        <function-ref name="clear" scoped="" ref="0xb6e0a7a8"/>
        <function-ref name="isValid" scoped="" ref="0xb6e0a048"/>
        <function-ref name="set" scoped="" ref="0xb6e0ab58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0xb6e0cc20" loc="93:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6e0cc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6e0b278"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0xb6e12cf0" loc="88:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6e12cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e118f0"/>
        <function-ref name="get" scoped="" ref="0xb6e11630"/>
        <function-ref name="isSet" scoped="" ref="0xb6e11370"/>
        <function-ref name="set" scoped="" ref="0xb6e11bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0xb6e17310" loc="78:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6e17310"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6e174e8"/>
        <function-ref name="noAck" scoped="" ref="0xb6e175c8"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6e176a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0xb6e19ab8" loc="68:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0xb6e19ab8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6e19c90"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e19d70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e19e50"/>
        <function-ref name="cancel" scoped="" ref="0xb6e1e010"/>
        <function-ref name="sendDone" scoped="" ref="0xb6e1e0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveDefault" ref="0xb6e21ac0" loc="60:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveDefault" scoped="" ref="0xb6e21ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e21c98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0xb6e17eb8" loc="80:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0xb6e17eb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0xb6e120c0"/>
        <function-ref name="setRetries" scoped="" ref="0xb6e121a0"/>
        <function-ref name="getRetries" scoped="" ref="0xb6e12280"/>
        <function-ref name="setRetryDelay" scoped="" ref="0xb6e12360"/>
        <function-ref name="wasDelivered" scoped="" ref="0xb6e12440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0xb6e12600" loc="86:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0xb6e12600"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0xb6e127d8"/>
        <function-ref name="setChannel" scoped="" ref="0xb6e128b8"/>
        <function-ref name="getChannel" scoped="" ref="0xb6e12998"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb6e20568" loc="63:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb6e20568"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6e20740"/>
        <function-ref name="source" scoped="" ref="0xb6e20820"/>
        <function-ref name="address" scoped="" ref="0xb6e20900"/>
        <function-ref name="destination" scoped="" ref="0xb6e209e0"/>
        <function-ref name="setSource" scoped="" ref="0xb6e20ac0"/>
        <function-ref name="setDestination" scoped="" ref="0xb6e20ba0"/>
        <function-ref name="type" scoped="" ref="0xb6e20c80"/>
        <function-ref name="setType" scoped="" ref="0xb6e20d60"/>
        <function-ref name="isForMe" scoped="" ref="0xb6e20e40"/>
        <function-ref name="setGroup" scoped="" ref="0xb6e20f20"/>
        <function-ref name="localGroup" scoped="" ref="0xb6e1f018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0xb6e082a8" loc="95:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6e082a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6e08da8"/>
        <function-ref name="clear" scoped="" ref="0xb6e07170"/>
        <function-ref name="isValid" scoped="" ref="0xb6e089f8"/>
        <function-ref name="set" scoped="" ref="0xb6e07520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0xb6e1e328" loc="69:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0xb6e1e328"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e1e500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0xb6e0c728" loc="91:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6e0c728"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0xb6e0c900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SnoopDefault" ref="0xb6e201f8" loc="61:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SnoopDefault" scoped="" ref="0xb6e201f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e203d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Tasklet" ref="0xb6dfca68" loc="44:../../tos/lib/rfxlink/util/TaskletC.nc">
      <component-ref qname="RF230RadioC.TaskletC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb6dfca68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb6dfcc40"/>
        <function-ref name="suspend" scoped="" ref="0xb6dfcd20"/>
        <function-ref name="resume" scoped="" ref="0xb6dfce00"/>
        <function-ref name="run" scoped="" ref="0xb6dfcee0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DummyConfig" ref="0xb6de0478" loc="51:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DummyConfig" scoped="" ref="0xb6de0478"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0xb6de0650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TrafficMonitorConfig" ref="0xb6dec098" loc="47:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TrafficMonitorConfig" scoped="" ref="0xb6dec098"/></type-interface>
      <instance>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getBytes" scoped="" ref="0xb6dec270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageConfig" ref="0xb6de2500" loc="50:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageConfig" scoped="" ref="0xb6de2500"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6de26d8"/>
        <function-ref name="checkFrame" scoped="" ref="0xb6de27b8"/>
        <function-ref name="source" scoped="" ref="0xb6de2898"/>
        <function-ref name="destination" scoped="" ref="0xb6de2978"/>
        <function-ref name="setSource" scoped="" ref="0xb6de2a58"/>
        <function-ref name="setDestination" scoped="" ref="0xb6de2b38"/>
        <function-ref name="setGroup" scoped="" ref="0xb6de2c18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlottedCollisionConfig" ref="0xb6de7a70" loc="49:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlottedCollisionConfig" scoped="" ref="0xb6de7a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getInitialDelay" scoped="" ref="0xb6de7c48"/>
        <function-ref name="getScheduleExponent" scoped="" ref="0xb6de7d28"/>
        <function-ref name="getCollisionWindowLength" scoped="" ref="0xb6de7e08"/>
        <function-ref name="getTransmitTime" scoped="" ref="0xb6de7ee8"/>
        <function-ref name="getCollisionWindowStart" scoped="" ref="0xb6df5010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0xb6dcd270" loc="61:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6dcd270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6dcd448"/>
        <function-ref name="wait" scoped="" ref="0xb6dcd528"/>
        <function-ref name="cancel" scoped="" ref="0xb6dcd608"/>
        <function-ref name="isFree" scoped="" ref="0xb6dcd6e8"/>
        <function-ref name="getNow" scoped="" ref="0xb6dcd7c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RF230Packet" ref="0xb6dc93b8" loc="62:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230Packet" scoped="" ref="0xb6dc93b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6dc9590"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6dc9670"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6dc9750"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6dc9830"/>
        <function-ref name="headerLength" scoped="" ref="0xb6dc9910"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6dc99f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0xb6dc9d80" loc="64:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6dc9d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6dd1920"/>
        <function-ref name="clear" scoped="" ref="0xb6dd1cd0"/>
        <function-ref name="isValid" scoped="" ref="0xb6dd1570"/>
        <function-ref name="set" scoped="" ref="0xb6dc80a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RF230DriverConfig" ref="0xb6df7a18" loc="43:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230DriverConfig" scoped="" ref="0xb6df7a18"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6df7bf0"/>
        <function-ref name="headerLength" scoped="" ref="0xb6df7cd0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6df7db0"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0xb6df7e90"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0xb6dfa010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaConfig" ref="0xb6ded368" loc="46:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaConfig" scoped="" ref="0xb6ded368"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="requiresSoftwareCCA" scoped="" ref="0xb6ded540"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareAckConfig" ref="0xb6df2cf8" loc="44:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareAckConfig" scoped="" ref="0xb6df2cf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0xb6df2ed0"/>
        <function-ref name="createAckPacket" scoped="" ref="0xb6df9010"/>
        <function-ref name="requiresAckWait" scoped="" ref="0xb6df90f0"/>
        <function-ref name="isAckPacket" scoped="" ref="0xb6df91d0"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0xb6df92b0"/>
        <function-ref name="getAckTimeout" scoped="" ref="0xb6df9390"/>
        <function-ref name="setAckRequired" scoped="" ref="0xb6df9470"/>
        <function-ref name="requiresAckReply" scoped="" ref="0xb6df9550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0xb6dd2d18" loc="60:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6dd2d18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0xb6dd2ef0"/>
        <function-ref name="getDSN" scoped="" ref="0xb6df0010"/>
        <function-ref name="setFCF" scoped="" ref="0xb6df00f0"/>
        <function-ref name="isAckFrame" scoped="" ref="0xb6df01d0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0xb6df02b0"/>
        <function-ref name="createDataFrame" scoped="" ref="0xb6df0390"/>
        <function-ref name="setDSN" scoped="" ref="0xb6df0470"/>
        <function-ref name="createAckReply" scoped="" ref="0xb6df0550"/>
        <function-ref name="getSrcAddr" scoped="" ref="0xb6df0630"/>
        <function-ref name="isDataFrame" scoped="" ref="0xb6df0710"/>
        <function-ref name="getAckRequired" scoped="" ref="0xb6df07f0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0xb6df08d0"/>
        <function-ref name="localAddr" scoped="" ref="0xb6df09b0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0xb6df0b10"/>
        <function-ref name="localPan" scoped="" ref="0xb6df0bf0"/>
        <function-ref name="setDestAddr" scoped="" ref="0xb6df0cd0"/>
        <function-ref name="createAckFrame" scoped="" ref="0xb6df0db0"/>
        <function-ref name="setFramePending" scoped="" ref="0xb6df0e90"/>
        <function-ref name="setDestPan" scoped="" ref="0xb6de5010"/>
        <function-ref name="isForMe" scoped="" ref="0xb6de50f0"/>
        <function-ref name="setAckRequired" scoped="" ref="0xb6de51d0"/>
        <function-ref name="getFCF" scoped="" ref="0xb6de52b0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0xb6de5390"/>
        <function-ref name="getDestAddr" scoped="" ref="0xb6de5470"/>
        <function-ref name="getFramePending" scoped="" ref="0xb6de5550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UniqueConfig" ref="0xb6dee410" loc="45:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0xb6dee410"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6dee5e8"/>
        <function-ref name="reportChannelError" scoped="" ref="0xb6dee6c8"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6dee7a8"/>
        <function-ref name="getSender" scoped="" ref="0xb6dee888"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RandomCollisionConfig" ref="0xb6de9198" loc="48:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RandomCollisionConfig" scoped="" ref="0xb6de9198"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0xb6de9370"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0xb6de9450"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0xb6de9530"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0xb6de9610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0xb6d964e0" loc="41:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6d964e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6d966c8"/>
        <function-ref name="wait" scoped="" ref="0xb6d967a8"/>
        <function-ref name="cancel" scoped="" ref="0xb6d96888"/>
        <function-ref name="isFree" scoped="" ref="0xb6d96968"/>
        <function-ref name="getNow" scoped="" ref="0xb6d96a48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0xb6d95410" loc="47:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb6d95410"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0xb73d07d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0xb73d07d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0xb71e8b38"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6d7d8b8"/>
        <function-ref name="fired" scoped="" ref="0xb6d7d088"/>
        <function-ref name="startAt" scoped="" ref="0xb6d7d578"/>
        <function-ref name="isRunning" scoped="" ref="0xb6d7d300"/>
        <function-ref name="getAlarm" scoped="" ref="0xb6d7db30"/>
        <function-ref name="start" scoped="" ref="0xb6d95b60"/>
        <function-ref name="stop" scoped="" ref="0xb6d95e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0xb6d96bb8" loc="46:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb6d96bb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb6d96d90"/>
        <function-ref name="suspend" scoped="" ref="0xb6d96e70"/>
        <function-ref name="resume" scoped="" ref="0xb6d95010"/>
        <function-ref name="run" scoped="" ref="0xb6d950f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0xb60d8f08" loc="54:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb60d8f08"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb60d6108"/>
        <function-ref name="wait" scoped="" ref="0xb60d61e8"/>
        <function-ref name="cancel" scoped="" ref="0xb60d62c8"/>
        <function-ref name="isFree" scoped="" ref="0xb60d63a8"/>
        <function-ref name="getNow" scoped="" ref="0xb60d6488"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0xb60d6718" loc="59:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb60d6718"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0xb71e8b38"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb60d5bd8"/>
        <function-ref name="fired" scoped="" ref="0xb60d53a8"/>
        <function-ref name="startAt" scoped="" ref="0xb60d5898"/>
        <function-ref name="isRunning" scoped="" ref="0xb60d5620"/>
        <function-ref name="getAlarm" scoped="" ref="0xb60d5e50"/>
        <function-ref name="start" scoped="" ref="0xb60d6e68"/>
        <function-ref name="stop" scoped="" ref="0xb60d5130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0xb60d3070" loc="60:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb60d3070"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb60d3248"/>
        <function-ref name="suspend" scoped="" ref="0xb60d3328"/>
        <function-ref name="resume" scoped="" ref="0xb60d3408"/>
        <function-ref name="run" scoped="" ref="0xb60d34e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6d14f20" loc="54:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6d14f20"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6d13110"/>
        <function-ref name="cancel" scoped="" ref="0xb6d131f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6d132d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6d13430" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6d13430"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6d13608"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0xb6d16c28" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0xb6d16c28"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6d16e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6d175b0" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6d175b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6d17788"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6d17868"/>
        <function-ref name="getPayload" scoped="" ref="0xb6d17948"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6d17a28"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6d17b08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb6d17ce0" loc="41:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb6d17ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6d17ec8"/>
        <function-ref name="getPayload" scoped="" ref="0xb6d16010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6d160f0"/>
        <function-ref name="cancel" scoped="" ref="0xb6d161d0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6d162b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6d16868" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6d16868"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6d16a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6d14788" loc="53:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6d14788"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6d14960"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6d14a40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6d14b20"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6d14c00"/>
        <function-ref name="headerLength" scoped="" ref="0xb6d14ce0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6d14dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6d13768" loc="56:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6d13768"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6d13940"/>
        <function-ref name="checkFrame" scoped="" ref="0xb6d13a20"/>
        <function-ref name="source" scoped="" ref="0xb6d13b00"/>
        <function-ref name="destination" scoped="" ref="0xb6d13be0"/>
        <function-ref name="setSource" scoped="" ref="0xb6d13cc0"/>
        <function-ref name="setDestination" scoped="" ref="0xb6d13da0"/>
        <function-ref name="setGroup" scoped="" ref="0xb6d13e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6d16488" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6d16488"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6d16670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveDefault" ref="0xb6d14030" loc="47:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveDefault" scoped="" ref="0xb6d14030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6d14218"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb6d18940" loc="39:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb6d18940"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6d18b18"/>
        <function-ref name="source" scoped="" ref="0xb6d18bf8"/>
        <function-ref name="address" scoped="" ref="0xb6d18cd8"/>
        <function-ref name="destination" scoped="" ref="0xb6d18db8"/>
        <function-ref name="setSource" scoped="" ref="0xb6d18e98"/>
        <function-ref name="setDestination" scoped="" ref="0xb6d17010"/>
        <function-ref name="type" scoped="" ref="0xb6d170f0"/>
        <function-ref name="setType" scoped="" ref="0xb6d171d0"/>
        <function-ref name="isForMe" scoped="" ref="0xb6d172b0"/>
        <function-ref name="setGroup" scoped="" ref="0xb6d17390"/>
        <function-ref name="localGroup" scoped="" ref="0xb6d17470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SnoopDefault" ref="0xb6d14410" loc="48:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SnoopDefault" scoped="" ref="0xb6d14410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6d145f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb60b7ac8" loc="59:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb60b7ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb60b7ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb60b75d0" loc="58:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb60b75d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb60b77a8"/>
        <function-ref name="cancel" scoped="" ref="0xb60b7888"/>
        <function-ref name="sendDone" scoped="" ref="0xb60b7968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0xb60b8298" loc="48:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0xb60b8298"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb60b8480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb60bac18" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb60bac18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb60badf0"/>
        <function-ref name="payloadLength" scoped="" ref="0xb60baed0"/>
        <function-ref name="getPayload" scoped="" ref="0xb60b9010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb60b90f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb60b91d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb60b93a8" loc="45:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb60b93a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb60b9590"/>
        <function-ref name="getPayload" scoped="" ref="0xb60b9670"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb60b9750"/>
        <function-ref name="cancel" scoped="" ref="0xb60b9830"/>
        <function-ref name="sendDone" scoped="" ref="0xb60b9910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb60b9ec8" loc="47:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb60b9ec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb60b80c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb60cb8b0" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb60cb8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb60cba88"/>
        <function-ref name="payloadLength" scoped="" ref="0xb60cbb68"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb60cbc48"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb60cbd28"/>
        <function-ref name="headerLength" scoped="" ref="0xb60cbe08"/>
        <function-ref name="metadataLength" scoped="" ref="0xb60cbee8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb60b7e00" loc="60:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb60b7e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb60b6070"/>
        <function-ref name="checkFrame" scoped="" ref="0xb60b6150"/>
        <function-ref name="source" scoped="" ref="0xb60b6230"/>
        <function-ref name="destination" scoped="" ref="0xb60b6310"/>
        <function-ref name="setSource" scoped="" ref="0xb60b63f0"/>
        <function-ref name="setDestination" scoped="" ref="0xb60b64d0"/>
        <function-ref name="setGroup" scoped="" ref="0xb60b65b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0xb60b66f0" loc="61:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb60b66f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0xb60b68c8"/>
        <function-ref name="changed" scoped="" ref="0xb60b69a8"/>
        <function-ref name="amGroup" scoped="" ref="0xb60b6a88"/>
        <function-ref name="setAddress" scoped="" ref="0xb60b6b68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb60b8dd0" loc="57:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb60b8dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb60b7010"/>
        <function-ref name="payloadLength" scoped="" ref="0xb60b70f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb60b71d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb60b72b0"/>
        <function-ref name="headerLength" scoped="" ref="0xb60b7390"/>
        <function-ref name="metadataLength" scoped="" ref="0xb60b7470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb60b9ae8" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb60b9ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb60b9cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveDefault" ref="0xb60b8678" loc="51:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveDefault" scoped="" ref="0xb60b8678"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb60b8860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb60ba040" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb60ba040"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb60ba218"/>
        <function-ref name="source" scoped="" ref="0xb60ba2f8"/>
        <function-ref name="address" scoped="" ref="0xb60ba3d8"/>
        <function-ref name="destination" scoped="" ref="0xb60ba4b8"/>
        <function-ref name="setSource" scoped="" ref="0xb60ba598"/>
        <function-ref name="setDestination" scoped="" ref="0xb60ba678"/>
        <function-ref name="type" scoped="" ref="0xb60ba758"/>
        <function-ref name="setType" scoped="" ref="0xb60ba838"/>
        <function-ref name="isForMe" scoped="" ref="0xb60ba918"/>
        <function-ref name="setGroup" scoped="" ref="0xb60ba9f8"/>
        <function-ref name="localGroup" scoped="" ref="0xb60baad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SnoopDefault" ref="0xb60b8a58" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SnoopDefault" scoped="" ref="0xb60b8a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb60b8c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0xb6d25428" loc="54:../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb6d25428"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0xb6d25600"/>
        <function-ref name="changed" scoped="" ref="0xb6d256e0"/>
        <function-ref name="amGroup" scoped="" ref="0xb6d257c0"/>
        <function-ref name="setAddress" scoped="" ref="0xb6d258a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6d0ea60" loc="44:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6d0ea60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6d0ec38"/>
        <function-ref name="cancel" scoped="" ref="0xb6d0ed18"/>
        <function-ref name="sendDone" scoped="" ref="0xb6d0edf8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0xb6d05010" loc="45:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6d05010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6d051e8"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6d052c8"/>
        <function-ref name="request" scoped="" ref="0xb6d053a8"/>
        <function-ref name="granted" scoped="" ref="0xb6d05488"/>
        <function-ref name="isOwner" scoped="" ref="0xb6d05568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0xb6d0e538" loc="39:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0xb6d0e538"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6d0e710"/>
        <function-ref name="cancel" scoped="" ref="0xb6d0e7f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6d0e8d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb6d02490" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb6d02490"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb6d02678"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6d02758"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb6d02d48" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb6d02d48"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb6cd2010"/>
        <function-ref name="configure" scoped="" ref="0xb6cd20f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6d03d40" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6d03d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6d03f28"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6d02018"/>
        <function-ref name="request" scoped="" ref="0xb6d020f8"/>
        <function-ref name="granted" scoped="" ref="0xb6d021d8"/>
        <function-ref name="isOwner" scoped="" ref="0xb6d022b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb6d02898" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6d02898"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6d02a70"/>
        <function-ref name="userId" scoped="" ref="0xb6d02b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb608adc0" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb608adc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6087010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0xb6087170" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0xb6087170"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb6087348"/>
        <function-ref name="isEmpty" scoped="" ref="0xb6087428"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb6087508"/>
        <function-ref name="dequeue" scoped="" ref="0xb60875e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb60868c0" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb60868c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb6086aa8"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6086b88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb6085218" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb6085218"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb6085400"/>
        <function-ref name="configure" scoped="" ref="0xb60854e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0xb6085640" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb6085640"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb6085818"/>
        <function-ref name="isEmpty" scoped="" ref="0xb60858f8"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb60859d8"/>
        <function-ref name="dequeue" scoped="" ref="0xb6085ab8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6086180" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6086180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6086368"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6086448"/>
        <function-ref name="request" scoped="" ref="0xb6086528"/>
        <function-ref name="granted" scoped="" ref="0xb6086608"/>
        <function-ref name="isOwner" scoped="" ref="0xb60866e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb6086cc8" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6086cc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6086ea0"/>
        <function-ref name="userId" scoped="" ref="0xb6085010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0xb6085c38" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0xb6085c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6085e10"/>
        <function-ref name="runTask" scoped="" ref="0xb6085ef0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6cb2250" loc="49:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6cb2250"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6cb2428"/>
        <function-ref name="cancel" scoped="" ref="0xb6cb2508"/>
        <function-ref name="sendDone" scoped="" ref="0xb6cb25e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6cb2748" loc="50:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6cb2748"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6cb2920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0xb6ccfce8" loc="42:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0xb6ccfce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6ccfec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6cd0c68" loc="39:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6cd0c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6cd0e40"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6cd0f20"/>
        <function-ref name="getPayload" scoped="" ref="0xb6ccf018"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6ccf0f8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6ccf1d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPacket" ref="0xb6cb3a30" loc="48:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6cb3a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6cb3c08"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6cb3ce8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6cb3dc8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6cb3ea8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6cb2010"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6cb20f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0xb6cb4070" loc="47:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6cb4070"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0xb6cb4248"/>
        <function-ref name="getDSN" scoped="" ref="0xb6cb4328"/>
        <function-ref name="setFCF" scoped="" ref="0xb6cb4408"/>
        <function-ref name="isAckFrame" scoped="" ref="0xb6cb44e8"/>
        <function-ref name="setSrcAddr" scoped="" ref="0xb6cb45c8"/>
        <function-ref name="createDataFrame" scoped="" ref="0xb6cb46a8"/>
        <function-ref name="setDSN" scoped="" ref="0xb6cb4788"/>
        <function-ref name="createAckReply" scoped="" ref="0xb6cb4868"/>
        <function-ref name="getSrcAddr" scoped="" ref="0xb6cb4948"/>
        <function-ref name="isDataFrame" scoped="" ref="0xb6cb4a28"/>
        <function-ref name="getAckRequired" scoped="" ref="0xb6cb4b08"/>
        <function-ref name="verifyAckReply" scoped="" ref="0xb6cb4be8"/>
        <function-ref name="localAddr" scoped="" ref="0xb6cb4cc8"/>
        <function-ref name="requiresAckWait" scoped="" ref="0xb6cb4e28"/>
        <function-ref name="localPan" scoped="" ref="0xb6cb4f08"/>
        <function-ref name="setDestAddr" scoped="" ref="0xb6cb3010"/>
        <function-ref name="createAckFrame" scoped="" ref="0xb6cb30f0"/>
        <function-ref name="setFramePending" scoped="" ref="0xb6cb31d0"/>
        <function-ref name="setDestPan" scoped="" ref="0xb6cb32b0"/>
        <function-ref name="isForMe" scoped="" ref="0xb6cb3390"/>
        <function-ref name="setAckRequired" scoped="" ref="0xb6cb3470"/>
        <function-ref name="getFCF" scoped="" ref="0xb6cb3550"/>
        <function-ref name="requiresAckReply" scoped="" ref="0xb6cb3630"/>
        <function-ref name="getDestAddr" scoped="" ref="0xb6cb3710"/>
        <function-ref name="getFramePending" scoped="" ref="0xb6cb37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0xb6ccf318" loc="40:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0xb6ccf318"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6ccf4f0"/>
        <function-ref name="getPayload" scoped="" ref="0xb6ccf5d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6ccf6b0"/>
        <function-ref name="cancel" scoped="" ref="0xb6ccf790"/>
        <function-ref name="sendDone" scoped="" ref="0xb6ccf870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0xb6ccf9d0" loc="41:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0xb6ccf9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6ccfba8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6c8f050" loc="69:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6c8f050"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6c8f228"/>
        <function-ref name="cancel" scoped="" ref="0xb6c8f308"/>
        <function-ref name="sendDone" scoped="" ref="0xb6c8f3e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6c8f548" loc="70:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6c8f548"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6c8f720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0xb6cad880" loc="57:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0xb6cad880"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6cada58"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6cadb38"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6cadc18"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6cadcf8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6caddd8"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6cadeb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosReceive" ref="0xb6c90528" loc="62:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosReceive" scoped="" ref="0xb6c90528"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6c90700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6c8f880" loc="71:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6c8f880"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6c8fa58"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6c8fb38"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6c8fc18"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6c8fcf8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6c8fdd8"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6c8feb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosSend" ref="0xb6c90030" loc="61:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosSend" scoped="" ref="0xb6c90030"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6c90208"/>
        <function-ref name="cancel" scoped="" ref="0xb6c902e8"/>
        <function-ref name="sendDone" scoped="" ref="0xb6c903c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0xb6cad050" loc="55:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0xb6cad050"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6cad228"/>
        <function-ref name="cancel" scoped="" ref="0xb6cad308"/>
        <function-ref name="sendDone" scoped="" ref="0xb6cad3e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0xb6cad548" loc="56:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0xb6cad548"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6cad720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosPacket" ref="0xb6c90860" loc="63:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosPacket" scoped="" ref="0xb6c90860"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6c90a38"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6c90b18"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6c90bf8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6c90cd8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6c90db8"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6c90e98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6c34c70" loc="48:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6c34c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6c34e48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0xb6c36f10" loc="40:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0xb6c36f10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0xb6c35108"/>
        <function-ref name="address" scoped="" ref="0xb6c351e8"/>
        <function-ref name="destination" scoped="" ref="0xb6c352c8"/>
        <function-ref name="setSource" scoped="" ref="0xb6c353a8"/>
        <function-ref name="setDestination" scoped="" ref="0xb6c35488"/>
        <function-ref name="pan" scoped="" ref="0xb6c35568"/>
        <function-ref name="setPan" scoped="" ref="0xb6c35648"/>
        <function-ref name="isForMe" scoped="" ref="0xb6c35728"/>
        <function-ref name="localPan" scoped="" ref="0xb6c35808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6c35948" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6c35948"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6c35b20"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6c35c00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6c35ce0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6c35dc0"/>
        <function-ref name="headerLength" scoped="" ref="0xb6c35ea0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6c34010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0xb6c37530" loc="39:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6c37530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0xb6c37708"/>
        <function-ref name="getDSN" scoped="" ref="0xb6c377e8"/>
        <function-ref name="setFCF" scoped="" ref="0xb6c378c8"/>
        <function-ref name="isAckFrame" scoped="" ref="0xb6c379a8"/>
        <function-ref name="setSrcAddr" scoped="" ref="0xb6c37a88"/>
        <function-ref name="createDataFrame" scoped="" ref="0xb6c37b68"/>
        <function-ref name="setDSN" scoped="" ref="0xb6c37c48"/>
        <function-ref name="createAckReply" scoped="" ref="0xb6c37d28"/>
        <function-ref name="getSrcAddr" scoped="" ref="0xb6c37e08"/>
        <function-ref name="isDataFrame" scoped="" ref="0xb6c37ee8"/>
        <function-ref name="getAckRequired" scoped="" ref="0xb6c36010"/>
        <function-ref name="verifyAckReply" scoped="" ref="0xb6c360f0"/>
        <function-ref name="localAddr" scoped="" ref="0xb6c361d0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0xb6c36330"/>
        <function-ref name="localPan" scoped="" ref="0xb6c36410"/>
        <function-ref name="setDestAddr" scoped="" ref="0xb6c364f0"/>
        <function-ref name="createAckFrame" scoped="" ref="0xb6c365d0"/>
        <function-ref name="setFramePending" scoped="" ref="0xb6c366b0"/>
        <function-ref name="setDestPan" scoped="" ref="0xb6c36790"/>
        <function-ref name="isForMe" scoped="" ref="0xb6c36870"/>
        <function-ref name="setAckRequired" scoped="" ref="0xb6c36950"/>
        <function-ref name="getFCF" scoped="" ref="0xb6c36a30"/>
        <function-ref name="requiresAckReply" scoped="" ref="0xb6c36b10"/>
        <function-ref name="getDestAddr" scoped="" ref="0xb6c36bf0"/>
        <function-ref name="getFramePending" scoped="" ref="0xb6c36cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6c344d8" loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6c344d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6c346b0"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6c34790"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6c34870"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6c34950"/>
        <function-ref name="headerLength" scoped="" ref="0xb6c34a30"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6c34b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6c34170" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6c34170"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6c34348"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb60497a8" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb60497a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6049980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0xb604b4f0" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0xb604b4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0xb604b6c8"/>
        <function-ref name="address" scoped="" ref="0xb604b7a8"/>
        <function-ref name="destination" scoped="" ref="0xb604b888"/>
        <function-ref name="setSource" scoped="" ref="0xb604b968"/>
        <function-ref name="setDestination" scoped="" ref="0xb604ba48"/>
        <function-ref name="pan" scoped="" ref="0xb604bb28"/>
        <function-ref name="setPan" scoped="" ref="0xb604bc08"/>
        <function-ref name="isForMe" scoped="" ref="0xb604bce8"/>
        <function-ref name="localPan" scoped="" ref="0xb604bdc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb604bf08" loc="43:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb604bf08"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb604a0f0"/>
        <function-ref name="payloadLength" scoped="" ref="0xb604a1d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb604a2b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb604a390"/>
        <function-ref name="headerLength" scoped="" ref="0xb604a470"/>
        <function-ref name="metadataLength" scoped="" ref="0xb604a550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0xb60529f0" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb60529f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0xb6052bc8"/>
        <function-ref name="getDSN" scoped="" ref="0xb6052ca8"/>
        <function-ref name="setFCF" scoped="" ref="0xb6052d88"/>
        <function-ref name="isAckFrame" scoped="" ref="0xb6052e68"/>
        <function-ref name="setSrcAddr" scoped="" ref="0xb604c010"/>
        <function-ref name="createDataFrame" scoped="" ref="0xb604c0f0"/>
        <function-ref name="setDSN" scoped="" ref="0xb604c1d0"/>
        <function-ref name="createAckReply" scoped="" ref="0xb604c2b0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0xb604c390"/>
        <function-ref name="isDataFrame" scoped="" ref="0xb604c470"/>
        <function-ref name="getAckRequired" scoped="" ref="0xb604c550"/>
        <function-ref name="verifyAckReply" scoped="" ref="0xb604c630"/>
        <function-ref name="localAddr" scoped="" ref="0xb604c710"/>
        <function-ref name="requiresAckWait" scoped="" ref="0xb604c870"/>
        <function-ref name="localPan" scoped="" ref="0xb604c950"/>
        <function-ref name="setDestAddr" scoped="" ref="0xb604ca30"/>
        <function-ref name="createAckFrame" scoped="" ref="0xb604cb10"/>
        <function-ref name="setFramePending" scoped="" ref="0xb604cbf0"/>
        <function-ref name="setDestPan" scoped="" ref="0xb604ccd0"/>
        <function-ref name="isForMe" scoped="" ref="0xb604cdb0"/>
        <function-ref name="setAckRequired" scoped="" ref="0xb604ce90"/>
        <function-ref name="getFCF" scoped="" ref="0xb604b010"/>
        <function-ref name="requiresAckReply" scoped="" ref="0xb604b0f0"/>
        <function-ref name="getDestAddr" scoped="" ref="0xb604b1d0"/>
        <function-ref name="getFramePending" scoped="" ref="0xb604b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0xb604a9f8" loc="49:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb604a9f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0xb604abd0"/>
        <function-ref name="changed" scoped="" ref="0xb604acb0"/>
        <function-ref name="amGroup" scoped="" ref="0xb604ad90"/>
        <function-ref name="setAddress" scoped="" ref="0xb604ae70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb604a6b0" loc="44:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb604a6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb604a888"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6049010" loc="50:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6049010"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb60491e8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb60492c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb60493a8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6049488"/>
        <function-ref name="headerLength" scoped="" ref="0xb6049568"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6049648"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6c30678" loc="45:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6c30678"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6c30850"/>
        <function-ref name="cancel" scoped="" ref="0xb6c30930"/>
        <function-ref name="sendDone" scoped="" ref="0xb6c30a10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6c30b70" loc="46:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6c30b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6c30d48"/>
        <function-ref name="header" scoped="" ref="0xb6c30e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6c31d18" loc="40:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6c31d18"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6c31ef0"/>
        <function-ref name="cancel" scoped="" ref="0xb6c30010"/>
        <function-ref name="sendDone" scoped="" ref="0xb6c300f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6bf5010" loc="48:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6bf5010"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6bf51e8"/>
        <function-ref name="reportChannelError" scoped="" ref="0xb6bf52c8"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6bf53a8"/>
        <function-ref name="getSender" scoped="" ref="0xb6bf5488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6c30230" loc="41:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6c30230"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6c30408"/>
        <function-ref name="header" scoped="" ref="0xb6c304e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb601d770" loc="50:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb601d770"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb601d948"/>
        <function-ref name="cancel" scoped="" ref="0xb601da28"/>
        <function-ref name="sendDone" scoped="" ref="0xb601db08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb601dc68" loc="51:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb601dc68"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb601de40"/>
        <function-ref name="header" scoped="" ref="0xb601df20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0xb601bcc8" loc="55:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb601bcc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb601bea0"/>
        <function-ref name="clearAll" scoped="" ref="0xb601a010"/>
        <function-ref name="get" scoped="" ref="0xb601a0f0"/>
        <function-ref name="set" scoped="" ref="0xb601a1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6020b18" loc="42:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6020b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6020cf0"/>
        <function-ref name="cancel" scoped="" ref="0xb6020dd0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6020eb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0xb601b630" loc="54:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0xb601b630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0xb601b808"/>
        <function-ref name="insertNode" scoped="" ref="0xb601b8e8"/>
        <function-ref name="getNode" scoped="" ref="0xb601b9c8"/>
        <function-ref name="evicted" scoped="" ref="0xb601baa8"/>
        <function-ref name="getIndex" scoped="" ref="0xb601bb88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb601d010" loc="43:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb601d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb601d1e8"/>
        <function-ref name="header" scoped="" ref="0xb601d2c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb601d408" loc="45:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb601d408"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb601d5e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UniqueConfig" ref="0xb601b078" loc="53:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0xb601b078"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb601b250"/>
        <function-ref name="reportChannelError" scoped="" ref="0xb601b330"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb601b410"/>
        <function-ref name="getSender" scoped="" ref="0xb601b4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0xb6c11010" loc="37:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0xb6c11010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0xb6c111e8"/>
        <function-ref name="insertNode" scoped="" ref="0xb6c112c8"/>
        <function-ref name="getNode" scoped="" ref="0xb6c113a8"/>
        <function-ref name="evicted" scoped="" ref="0xb6c11488"/>
        <function-ref name="getIndex" scoped="" ref="0xb6c11568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0xb6c0ea38" loc="43:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb6c0ea38"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6c0ec10"/>
        <function-ref name="clearAll" scoped="" ref="0xb6c0ecf0"/>
        <function-ref name="get" scoped="" ref="0xb6c0edd0"/>
        <function-ref name="set" scoped="" ref="0xb6c0eeb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0xb6c0e010" loc="42:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0xb6c0e010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0xb6c0e1e8"/>
        <function-ref name="insertNode" scoped="" ref="0xb6c0e2c8"/>
        <function-ref name="getNode" scoped="" ref="0xb6c0e3a8"/>
        <function-ref name="evicted" scoped="" ref="0xb6c0e488"/>
        <function-ref name="getIndex" scoped="" ref="0xb6c0e568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6c11bd0" loc="41:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6c11bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6c11da8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0xb60191b0" loc="37:../../tos/lib/rfxlink/util/NeighborhoodFlagC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.NeighborhoodFlagC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb60191b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6019388"/>
        <function-ref name="clearAll" scoped="" ref="0xb6019468"/>
        <function-ref name="get" scoped="" ref="0xb6019548"/>
        <function-ref name="set" scoped="" ref="0xb6019628"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6bf2e70" loc="85:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6bf2e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6bec070"/>
        <function-ref name="cancel" scoped="" ref="0xb6bec150"/>
        <function-ref name="sendDone" scoped="" ref="0xb6bec230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6bec390" loc="86:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6bec390"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6bec568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedPacketAcks" ref="0xb6beba68" loc="93:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0xb6beba68"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6bebc40"/>
        <function-ref name="noAck" scoped="" ref="0xb6bebd20"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6bebe00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6bf3760" loc="77:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6bf3760"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6bf3938"/>
        <function-ref name="cancel" scoped="" ref="0xb6bf3a18"/>
        <function-ref name="sendDone" scoped="" ref="0xb6bf3af8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6bf26a8" loc="80:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6bf26a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6bf2880"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6bf2960"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6bf2a40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6bf2b20"/>
        <function-ref name="headerLength" scoped="" ref="0xb6bf2c00"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6bf2ce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6bec6c8" loc="87:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6bec6c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6bec8a0"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6bec980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6beca60"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6becb40"/>
        <function-ref name="headerLength" scoped="" ref="0xb6becc20"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6becd00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UnconnectedPacketLink" ref="0xb6beb390" loc="92:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketLink" scoped="" ref="0xb6beb390"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0xb6beb568"/>
        <function-ref name="setRetries" scoped="" ref="0xb6beb648"/>
        <function-ref name="getRetries" scoped="" ref="0xb6beb728"/>
        <function-ref name="setRetryDelay" scoped="" ref="0xb6beb808"/>
        <function-ref name="wasDelivered" scoped="" ref="0xb6beb8e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6bf3c58" loc="78:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6bf3c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6bf3e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0xb6bece40" loc="88:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6bece40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6beb050"/>
        <function-ref name="noAck" scoped="" ref="0xb6beb130"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6beb210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0xb6bf2010" loc="79:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0xb6bf2010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0xb6bf21e8"/>
        <function-ref name="setRetries" scoped="" ref="0xb6bf22c8"/>
        <function-ref name="getRetries" scoped="" ref="0xb6bf23a8"/>
        <function-ref name="setRetryDelay" scoped="" ref="0xb6bf2488"/>
        <function-ref name="wasDelivered" scoped="" ref="0xb6bf2568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6be7728" loc="39:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6be7728"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6be7900"/>
        <function-ref name="stopDone" scoped="" ref="0xb6be79e0"/>
        <function-ref name="start" scoped="" ref="0xb6be7ac0"/>
        <function-ref name="stop" scoped="" ref="0xb6be7ba0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6bda938" loc="49:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6bda938"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6bdab10"/>
        <function-ref name="cancel" scoped="" ref="0xb6bdabf0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6bdacd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6bdae30" loc="50:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6bdae30"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6bd8050"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6be7d00" loc="40:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6be7d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6be7ed8"/>
        <function-ref name="cancel" scoped="" ref="0xb6be6010"/>
        <function-ref name="sendDone" scoped="" ref="0xb6be60f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6be6568" loc="42:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6be6568"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6be6740"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6be6820"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6be6900"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6be69e0"/>
        <function-ref name="headerLength" scoped="" ref="0xb6be6ac0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6be6ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0xb6be6ce0" loc="44:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0xb6be6ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0xb6be6eb8"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0xb6bda010"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0xb6bda0f0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0xb6bda1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0xb6bda360" loc="48:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0xb6bda360"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6bda538"/>
        <function-ref name="stopDone" scoped="" ref="0xb6bda618"/>
        <function-ref name="start" scoped="" ref="0xb6bda6f8"/>
        <function-ref name="stop" scoped="" ref="0xb6bda7d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6be6250" loc="41:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6be6250"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6be6428"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6bd81b0" loc="51:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6bd81b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6bd8388"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6bd8468"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6bd8548"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6bd8628"/>
        <function-ref name="headerLength" scoped="" ref="0xb6bd8708"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6bd87e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0xb6009b68" loc="37:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0xb6009b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0xb6009d40"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0xb6009e20"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0xb6009f00"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0xb6005010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6bd5d20" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6bd5d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6bd5ef8"/>
        <function-ref name="stopDone" scoped="" ref="0xb6bd4010"/>
        <function-ref name="start" scoped="" ref="0xb6bd40f0"/>
        <function-ref name="stop" scoped="" ref="0xb6bd41d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0xb6b98628" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0xb6b98628"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6b98800"/>
        <function-ref name="turnOn" scoped="" ref="0xb6b988e0"/>
        <function-ref name="setChannel" scoped="" ref="0xb6b989c0"/>
        <function-ref name="done" scoped="" ref="0xb6b98aa0"/>
        <function-ref name="standby" scoped="" ref="0xb6b98b80"/>
        <function-ref name="getChannel" scoped="" ref="0xb6b98c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6bd4330" loc="40:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6bd4330"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6bd4508"/>
        <function-ref name="cancel" scoped="" ref="0xb6bd45e8"/>
        <function-ref name="sendDone" scoped="" ref="0xb6bd46c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0xb6b97310" loc="49:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6b97310"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b974e8"/>
        <function-ref name="header" scoped="" ref="0xb6b975c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6bd4828" loc="41:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6bd4828"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6bd4a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0xb6b98da0" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6b98da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b97010"/>
        <function-ref name="ready" scoped="" ref="0xb6b970f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b971d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0xb6bd4b40" loc="42:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0xb6bd4b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0xb6bd4d18"/>
        <function-ref name="setChannel" scoped="" ref="0xb6bd4df8"/>
        <function-ref name="getChannel" scoped="" ref="0xb6bd4ed8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0xb6b98070" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb6b98070"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb6b98248"/>
        <function-ref name="suspend" scoped="" ref="0xb6b98328"/>
        <function-ref name="resume" scoped="" ref="0xb6b98408"/>
        <function-ref name="run" scoped="" ref="0xb6b984e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6004ee0" loc="43:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6004ee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb60010e0"/>
        <function-ref name="stopDone" scoped="" ref="0xb60011c0"/>
        <function-ref name="start" scoped="" ref="0xb60012a0"/>
        <function-ref name="stop" scoped="" ref="0xb6001380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0xb60014e0" loc="44:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0xb60014e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb60016b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0xb6000548" loc="52:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0xb6000548"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6000720"/>
        <function-ref name="turnOn" scoped="" ref="0xb6000800"/>
        <function-ref name="setChannel" scoped="" ref="0xb60008e0"/>
        <function-ref name="done" scoped="" ref="0xb60009c0"/>
        <function-ref name="standby" scoped="" ref="0xb6000aa0"/>
        <function-ref name="getChannel" scoped="" ref="0xb6000b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6001818" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6001818"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb60019f0"/>
        <function-ref name="cancel" scoped="" ref="0xb6001ad0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6001bb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0xb5ffd080" loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0xb5ffd080"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb5ffd258"/>
        <function-ref name="runTask" scoped="" ref="0xb5ffd338"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0xb5ffe7e8" loc="55:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb5ffe7e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb5ffe9c0"/>
        <function-ref name="header" scoped="" ref="0xb5ffeaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stateDoneTask" ref="0xb5ffd4b8" loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stateDoneTask" scoped="" ref="0xb5ffd4b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb5ffd690"/>
        <function-ref name="runTask" scoped="" ref="0xb5ffd770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6001d10" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6001d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6001ee8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="deliverTask" ref="0xb5ffec20" loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="deliverTask" scoped="" ref="0xb5ffec20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb5ffedf8"/>
        <function-ref name="runTask" scoped="" ref="0xb5ffeed8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0xb5ffe310" loc="54:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb5ffe310"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5ffe4e8"/>
        <function-ref name="ready" scoped="" ref="0xb5ffe5c8"/>
        <function-ref name="sendDone" scoped="" ref="0xb5ffe6a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0xb6000040" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0xb6000040"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0xb6000218"/>
        <function-ref name="setChannel" scoped="" ref="0xb60002f8"/>
        <function-ref name="getChannel" scoped="" ref="0xb60003d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0xb6000cc0" loc="53:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb6000cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb6000e98"/>
        <function-ref name="suspend" scoped="" ref="0xb5ffe010"/>
        <function-ref name="resume" scoped="" ref="0xb5ffe0f0"/>
        <function-ref name="run" scoped="" ref="0xb5ffe1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6b93930" loc="44:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6b93930"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b93b08"/>
        <function-ref name="ready" scoped="" ref="0xb6b93be8"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b93cc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6b93e28" loc="45:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6b93e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b72050"/>
        <function-ref name="header" scoped="" ref="0xb6b72130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0xb6b72270" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6b72270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6b72448"/>
        <function-ref name="wait" scoped="" ref="0xb6b72528"/>
        <function-ref name="cancel" scoped="" ref="0xb6b72608"/>
        <function-ref name="isFree" scoped="" ref="0xb6b726e8"/>
        <function-ref name="getNow" scoped="" ref="0xb6b727c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6b72928" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6b72928"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0xb6b72b00"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0xb6b72be0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0xb6b72cc0"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0xb6b72da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6b934e8" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6b934e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b936c0"/>
        <function-ref name="header" scoped="" ref="0xb6b937a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb6b93010" loc="39:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6b93010"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b931e8"/>
        <function-ref name="ready" scoped="" ref="0xb6b932c8"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b933a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb5fdf4b8" loc="47:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb5fdf4b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5fdf690"/>
        <function-ref name="ready" scoped="" ref="0xb5fdf770"/>
        <function-ref name="sendDone" scoped="" ref="0xb5fdf850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb5fdf9b0" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb5fdf9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb5fdfb88"/>
        <function-ref name="header" scoped="" ref="0xb5fdfc68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0xb5fdfda8" loc="49:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb5fdfda8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb5fde010"/>
        <function-ref name="wait" scoped="" ref="0xb5fde0f0"/>
        <function-ref name="cancel" scoped="" ref="0xb5fde1d0"/>
        <function-ref name="isFree" scoped="" ref="0xb5fde2b0"/>
        <function-ref name="getNow" scoped="" ref="0xb5fde390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0xb5fde4d0" loc="50:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0xb5fde4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0xb5fde6a8"/>
        <function-ref name="rand32" scoped="" ref="0xb5fde788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb5fde8e8" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb5fde8e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0xb5fdeac0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0xb5fdeba0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0xb5fdec80"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0xb5fded60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb5fdf070" loc="43:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb5fdf070"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb5fdf248"/>
        <function-ref name="header" scoped="" ref="0xb5fdf328"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb5fe2b78" loc="42:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb5fe2b78"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5fe2d50"/>
        <function-ref name="ready" scoped="" ref="0xb5fe2e30"/>
        <function-ref name="sendDone" scoped="" ref="0xb5fe2f10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="calcNextRandom" ref="0xb5fdeee0" loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="calcNextRandom" scoped="" ref="0xb5fdeee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb5fdd0e0"/>
        <function-ref name="runTask" scoped="" ref="0xb5fdd1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0xb6b71478" loc="46:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0xb6b71478"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0xb6b71650"/>
        <function-ref name="rand32" scoped="" ref="0xb6b71730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0xb6b6fb58" loc="45:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0xb6b6fb58"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6b711e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6b74900" loc="44:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6b74900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6b74ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0xb6b6cec8" loc="48:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0xb6b6cec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0xb6b6b0c0"/>
        <function-ref name="rand32" scoped="" ref="0xb6b6b1a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0xb6b6c608" loc="47:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0xb6b6c608"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6b6cc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6b6c0e8" loc="46:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6b6c0e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6b6c2c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6b61b50" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6b61b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b61d28"/>
        <function-ref name="ready" scoped="" ref="0xb6b61e08"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b61ee8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6b48060" loc="50:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6b48060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b48238"/>
        <function-ref name="header" scoped="" ref="0xb6b48318"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0xb6b48458" loc="51:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6b48458"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6b48630"/>
        <function-ref name="wait" scoped="" ref="0xb6b48710"/>
        <function-ref name="cancel" scoped="" ref="0xb6b487f0"/>
        <function-ref name="isFree" scoped="" ref="0xb6b488d0"/>
        <function-ref name="getNow" scoped="" ref="0xb6b489b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AckReceivedFlag" ref="0xb6b474f0" loc="54:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AckReceivedFlag" scoped="" ref="0xb6b474f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6b476c8"/>
        <function-ref name="get" scoped="" ref="0xb6b477a8"/>
        <function-ref name="setValue" scoped="" ref="0xb6b47888"/>
        <function-ref name="set" scoped="" ref="0xb6b47968"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6b48b10" loc="53:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6b48b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0xb6b48ce8"/>
        <function-ref name="createAckPacket" scoped="" ref="0xb6b48dc8"/>
        <function-ref name="requiresAckWait" scoped="" ref="0xb6b48ea8"/>
        <function-ref name="isAckPacket" scoped="" ref="0xb6b47010"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0xb6b470f0"/>
        <function-ref name="getAckTimeout" scoped="" ref="0xb6b471d0"/>
        <function-ref name="setAckRequired" scoped="" ref="0xb6b472b0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0xb6b47390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6b61230" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6b61230"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b61408"/>
        <function-ref name="header" scoped="" ref="0xb6b614e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb6b62cf8" loc="42:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6b62cf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b62ed0"/>
        <function-ref name="ready" scoped="" ref="0xb6b61010"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b610f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0xb6b61628" loc="44:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6b61628"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6b61800"/>
        <function-ref name="noAck" scoped="" ref="0xb6b618e0"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6b619c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6b428a0" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6b428a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6b42a78"/>
        <function-ref name="stopDone" scoped="" ref="0xb6b42b58"/>
        <function-ref name="start" scoped="" ref="0xb6b42c38"/>
        <function-ref name="stop" scoped="" ref="0xb6b42d18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0xb6b37708" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0xb6b37708"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0xb6b378e0"/>
        <function-ref name="request" scoped="" ref="0xb6b379c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6b35cc8" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6b35cc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b35ea0"/>
        <function-ref name="ready" scoped="" ref="0xb6b33010"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b330f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6b33250" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6b33250"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b33428"/>
        <function-ref name="header" scoped="" ref="0xb6b33508"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0xb6b38668" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0xb6b38668"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6b38840"/>
        <function-ref name="turnOn" scoped="" ref="0xb6b38920"/>
        <function-ref name="setChannel" scoped="" ref="0xb6b38a00"/>
        <function-ref name="done" scoped="" ref="0xb6b38ae0"/>
        <function-ref name="standby" scoped="" ref="0xb6b38bc0"/>
        <function-ref name="getChannel" scoped="" ref="0xb6b38ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6b37b00" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6b37b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6b37cd8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6b37db8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6b37e98"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6b36010"/>
        <function-ref name="headerLength" scoped="" ref="0xb6b360f0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6b361d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0xb6b354b0" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0xb6b354b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6b35708"/>
        <function-ref name="turnOn" scoped="" ref="0xb6b357e8"/>
        <function-ref name="setChannel" scoped="" ref="0xb6b358c8"/>
        <function-ref name="done" scoped="" ref="0xb6b359a8"/>
        <function-ref name="standby" scoped="" ref="0xb6b35a88"/>
        <function-ref name="getChannel" scoped="" ref="0xb6b35b68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0xb6b36330" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0xb6b36330"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0xb6b36508"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6b37310" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6b37310"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b374e8"/>
        <function-ref name="header" scoped="" ref="0xb6b375c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0xb6b35178" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0xb6b35178"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b35350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0xb6b36698" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0xb6b36698"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6b36870"/>
        <function-ref name="stopDone" scoped="" ref="0xb6b36950"/>
        <function-ref name="start" scoped="" ref="0xb6b36a30"/>
        <function-ref name="stop" scoped="" ref="0xb6b36b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6b33a80" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6b33a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6b33c58"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6b33d38"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6b33e18"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6b33ef8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6b32010"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6b320f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0xb6b38350" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0xb6b38350"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b38528"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6b32250" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6b32250"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0xb6b32428"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0xb6b36c70" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0xb6b36c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b36e48"/>
        <function-ref name="cancel" scoped="" ref="0xb6b36f28"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b35018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb6b38de0" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6b38de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b37010"/>
        <function-ref name="ready" scoped="" ref="0xb6b370f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b371d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0xb6b33668" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0xb6b33668"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0xb6b33840"/>
        <function-ref name="request" scoped="" ref="0xb6b33920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0xb6b42e58" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0xb6b42e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b38050"/>
        <function-ref name="cancel" scoped="" ref="0xb6b38130"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b38210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0xb6af9098" loc="50:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0xb6af9098"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6af9270"/>
        <function-ref name="get" scoped="" ref="0xb6af9350"/>
        <function-ref name="setValue" scoped="" ref="0xb6af9430"/>
        <function-ref name="set" scoped="" ref="0xb6af9510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6afc7f0" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6afc7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6afc9c8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6afcaa8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6afcb88"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6afcc68"/>
        <function-ref name="headerLength" scoped="" ref="0xb6afcd48"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6afce28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6afa8f0" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6afa8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6afaac8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6afaba8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6afac88"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6afad68"/>
        <function-ref name="headerLength" scoped="" ref="0xb6afae48"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6afaf28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0xb6afd180" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6afd180"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6afdc80"/>
        <function-ref name="clear" scoped="" ref="0xb6afc048"/>
        <function-ref name="isValid" scoped="" ref="0xb6afd8d0"/>
        <function-ref name="set" scoped="" ref="0xb6afc3f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0xb6afa078" loc="48:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6afa078"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6afa6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0xb6b2e998" loc="41:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6b2e998"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6b004d0"/>
        <function-ref name="clear" scoped="" ref="0xb6b00880"/>
        <function-ref name="isValid" scoped="" ref="0xb6b00120"/>
        <function-ref name="set" scoped="" ref="0xb6b00c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0xb5fb1520" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0xb5fb1520"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5fb16f8"/>
        <function-ref name="get" scoped="" ref="0xb5fb17d8"/>
        <function-ref name="setValue" scoped="" ref="0xb5fb18b8"/>
        <function-ref name="set" scoped="" ref="0xb5fb1998"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb5fb3d10" loc="44:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb5fb3d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5fb3ee8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb5fb1010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5fb10f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb5fb11d0"/>
        <function-ref name="headerLength" scoped="" ref="0xb5fb12b0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb5fb1390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb5fb0d38" loc="54:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb5fb0d38"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5fb0f10"/>
        <function-ref name="payloadLength" scoped="" ref="0xb5faf010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5faf0f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb5faf1d0"/>
        <function-ref name="headerLength" scoped="" ref="0xb5faf2b0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb5faf390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0xb5fb4688" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb5fb4688"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb5fb31b8"/>
        <function-ref name="clear" scoped="" ref="0xb5fb3568"/>
        <function-ref name="isValid" scoped="" ref="0xb5fb4dd8"/>
        <function-ref name="set" scoped="" ref="0xb5fb3918"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0xb5fb1b88" loc="51:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0xb5fb1b88"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb5fb0200"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0xb5fb04c0" loc="52:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0xb5fb04c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb5fb0b08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0xb5fb9e88" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb5fb9e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb5fb59b0"/>
        <function-ref name="clear" scoped="" ref="0xb5fb5d60"/>
        <function-ref name="isValid" scoped="" ref="0xb5fb5600"/>
        <function-ref name="set" scoped="" ref="0xb5fb4150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0xb6b035c8" loc="20:../../tos/system/LocalTimeMilliC.nc">
      <component-ref qname="LocalTimeMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0xb6b035c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6b03c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6af64a0" loc="43:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6af64a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6af6678"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6af6758"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6af6838"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6af6918"/>
        <function-ref name="headerLength" scoped="" ref="0xb6af69f8"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6af6ad8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6af6c68" loc="48:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6af6c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6af6e40"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6af6f20"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6af5018"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6af50f8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6af51d8"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6af52b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0xb6ae3eb8" loc="42:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0xb6ae3eb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6af60c0"/>
        <function-ref name="get" scoped="" ref="0xb6af61a0"/>
        <function-ref name="setValue" scoped="" ref="0xb6af6280"/>
        <function-ref name="set" scoped="" ref="0xb6af6360"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6ae2450" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6ae2450"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6ae2628"/>
        <function-ref name="stopDone" scoped="" ref="0xb6ae2708"/>
        <function-ref name="start" scoped="" ref="0xb6ae27e8"/>
        <function-ref name="stop" scoped="" ref="0xb6ae28c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0xb6ae0290" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0xb6ae0290"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0xb6ae0468"/>
        <function-ref name="request" scoped="" ref="0xb6ae0548"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6add828" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6add828"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6adda00"/>
        <function-ref name="ready" scoped="" ref="0xb6addae0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6addbc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6addd20" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6addd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6addef8"/>
        <function-ref name="header" scoped="" ref="0xb6adc010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0xb6ae1220" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0xb6ae1220"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6ae13f8"/>
        <function-ref name="turnOn" scoped="" ref="0xb6ae14d8"/>
        <function-ref name="setChannel" scoped="" ref="0xb6ae15b8"/>
        <function-ref name="done" scoped="" ref="0xb6ae1698"/>
        <function-ref name="standby" scoped="" ref="0xb6ae1778"/>
        <function-ref name="getChannel" scoped="" ref="0xb6ae1858"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6ae0688" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6ae0688"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6ae0860"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6ae0940"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6ae0a20"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6ae0b00"/>
        <function-ref name="headerLength" scoped="" ref="0xb6ae0be0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6ae0cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0xb6add010" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0xb6add010"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6add268"/>
        <function-ref name="turnOn" scoped="" ref="0xb6add348"/>
        <function-ref name="setChannel" scoped="" ref="0xb6add428"/>
        <function-ref name="done" scoped="" ref="0xb6add508"/>
        <function-ref name="standby" scoped="" ref="0xb6add5e8"/>
        <function-ref name="getChannel" scoped="" ref="0xb6add6c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0xb6ae0e20" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0xb6ae0e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0xb6adf010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6ae1e70" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6ae1e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6ae0070"/>
        <function-ref name="header" scoped="" ref="0xb6ae0150"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0xb6adfc70" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0xb6adfc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6adfe48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0xb6adf1a0" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0xb6adf1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6adf378"/>
        <function-ref name="stopDone" scoped="" ref="0xb6adf458"/>
        <function-ref name="start" scoped="" ref="0xb6adf538"/>
        <function-ref name="stop" scoped="" ref="0xb6adf618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6adc588" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6adc588"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6adc760"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6adc840"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6adc920"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6adca00"/>
        <function-ref name="headerLength" scoped="" ref="0xb6adcae0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6adcbc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0xb6ae2ee0" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0xb6ae2ee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6ae10e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6adcd20" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6adcd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0xb6adcef8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0xb6adf778" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0xb6adf778"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6adf950"/>
        <function-ref name="cancel" scoped="" ref="0xb6adfa30"/>
        <function-ref name="sendDone" scoped="" ref="0xb6adfb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb6ae1998" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6ae1998"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6ae1b70"/>
        <function-ref name="ready" scoped="" ref="0xb6ae1c50"/>
        <function-ref name="sendDone" scoped="" ref="0xb6ae1d30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0xb6adc170" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0xb6adc170"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0xb6adc348"/>
        <function-ref name="request" scoped="" ref="0xb6adc428"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0xb6ae2a08" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0xb6ae2a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6ae2be0"/>
        <function-ref name="cancel" scoped="" ref="0xb6ae2cc0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6ae2da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0xb6ad6820" loc="45:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0xb6ad6820"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0xb6ad69f8"/>
        <function-ref name="request" scoped="" ref="0xb6ad6ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0xb6ad4a58" loc="49:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0xb6ad4a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6ad2638"/>
        <function-ref name="get" scoped="" ref="0xb6ad2378"/>
        <function-ref name="isSet" scoped="" ref="0xb6ad20b8"/>
        <function-ref name="set" scoped="" ref="0xb6ad28f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0xb6ac7778" loc="64:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0xb6ac7778"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6ac7950"/>
        <function-ref name="get" scoped="" ref="0xb6ac7a30"/>
        <function-ref name="setValue" scoped="" ref="0xb6ac7b10"/>
        <function-ref name="set" scoped="" ref="0xb6ac7bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0xb6aca898" loc="61:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6aca898"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6ac93c0"/>
        <function-ref name="clear" scoped="" ref="0xb6ac9770"/>
        <function-ref name="isValid" scoped="" ref="0xb6ac9010"/>
        <function-ref name="set" scoped="" ref="0xb6ac9b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0xb6ad9658" loc="42:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0xb6ad9658"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6ad9830"/>
        <function-ref name="turnOn" scoped="" ref="0xb6ad9910"/>
        <function-ref name="setChannel" scoped="" ref="0xb6ad99f0"/>
        <function-ref name="done" scoped="" ref="0xb6ad9ad0"/>
        <function-ref name="standby" scoped="" ref="0xb6ad9bb0"/>
        <function-ref name="getChannel" scoped="" ref="0xb6ad9c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0xb6ac6498" loc="66:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6ac6498"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6ac6670"/>
        <function-ref name="wait" scoped="" ref="0xb6ac6750"/>
        <function-ref name="cancel" scoped="" ref="0xb6ac6830"/>
        <function-ref name="isFree" scoped="" ref="0xb6ac6910"/>
        <function-ref name="getNow" scoped="" ref="0xb6ac69f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0xb6ad56f8" loc="48:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6ad56f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6ad42d0"/>
        <function-ref name="get" scoped="" ref="0xb6ad4010"/>
        <function-ref name="isSet" scoped="" ref="0xb6ad5d40"/>
        <function-ref name="set" scoped="" ref="0xb6ad4590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6ad6c88" loc="46:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6ad6c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6ad6e60"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6ad5010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6ad50f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6ad51d0"/>
        <function-ref name="headerLength" scoped="" ref="0xb6ad52b0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6ad5390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6acbec0" loc="60:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6acbec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6aca188"/>
        <function-ref name="headerLength" scoped="" ref="0xb6aca268"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6aca348"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0xb6aca428"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0xb6aca508"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6ad63d0" loc="44:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6ad63d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6ad65a8"/>
        <function-ref name="header" scoped="" ref="0xb6ad6688"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0xb6acd428" loc="55:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb6acd428"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0xb71e8b38"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6acb8d8"/>
        <function-ref name="fired" scoped="" ref="0xb6acb0a8"/>
        <function-ref name="startAt" scoped="" ref="0xb6acb598"/>
        <function-ref name="isRunning" scoped="" ref="0xb6acb320"/>
        <function-ref name="getAlarm" scoped="" ref="0xb6acbb50"/>
        <function-ref name="start" scoped="" ref="0xb6acdb78"/>
        <function-ref name="stop" scoped="" ref="0xb6acde18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0xb6ad2e28" loc="50:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0xb6ad2e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6ad1a08"/>
        <function-ref name="get" scoped="" ref="0xb6ad1748"/>
        <function-ref name="isSet" scoped="" ref="0xb6ad1488"/>
        <function-ref name="set" scoped="" ref="0xb6ad1cc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0xb6ace950" loc="54:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6ace950"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6acd010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb6ad9e30" loc="43:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6ad9e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6ad6050"/>
        <function-ref name="ready" scoped="" ref="0xb6ad6130"/>
        <function-ref name="sendDone" scoped="" ref="0xb6ad6210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0xb6acf208" loc="51:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6acf208"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6acfdd0"/>
        <function-ref name="get" scoped="" ref="0xb6acfb10"/>
        <function-ref name="isSet" scoped="" ref="0xb6acf850"/>
        <function-ref name="set" scoped="" ref="0xb6ace0a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0xb6ac7e38" loc="65:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0xb6ac7e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6ac6050"/>
        <function-ref name="get" scoped="" ref="0xb6ac6130"/>
        <function-ref name="setValue" scoped="" ref="0xb6ac6210"/>
        <function-ref name="set" scoped="" ref="0xb6ac62f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0xb6ac70e0" loc="63:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0xb6ac70e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6ac72b8"/>
        <function-ref name="get" scoped="" ref="0xb6ac7398"/>
        <function-ref name="setValue" scoped="" ref="0xb6ac7478"/>
        <function-ref name="set" scoped="" ref="0xb6ac7558"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0xb6ace458" loc="52:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6ace458"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0xb6ace630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0xb6ac6b78" loc="67:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb6ac6b78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb6ac6d50"/>
        <function-ref name="suspend" scoped="" ref="0xb6ac6e30"/>
        <function-ref name="resume" scoped="" ref="0xb6ac6f10"/>
        <function-ref name="run" scoped="" ref="0xb6ac5010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0xb6ac0a08" loc="52:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0xb6ac0a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0xb6ac0be0"/>
        <function-ref name="request" scoped="" ref="0xb6ac0cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0xb6ab1528" loc="74:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0xb6ab1528"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0xb6ab1c78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0xb6abeb98" loc="56:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0xb6abeb98"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6abc780"/>
        <function-ref name="get" scoped="" ref="0xb6abc4c0"/>
        <function-ref name="isSet" scoped="" ref="0xb6abc200"/>
        <function-ref name="set" scoped="" ref="0xb6abca40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0xb6aad830" loc="80:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0xb6aad830"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6aada08"/>
        <function-ref name="get" scoped="" ref="0xb6aadae8"/>
        <function-ref name="setValue" scoped="" ref="0xb6aadbc8"/>
        <function-ref name="set" scoped="" ref="0xb6aadca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0xb6ac14d8" loc="47:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0xb6ac14d8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0xb73d07d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0xb73d07d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6ac16b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0xb6aac710" loc="83:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6aac710"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6aab3c0"/>
        <function-ref name="clear" scoped="" ref="0xb6aab770"/>
        <function-ref name="isValid" scoped="" ref="0xb6aab010"/>
        <function-ref name="set" scoped="" ref="0xb6aabb20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0xb6ab6bf8" loc="70:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0xb6ab6bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6ab6dd0"/>
        <function-ref name="isInput" scoped="" ref="0xb6ab6eb0"/>
        <function-ref name="toggle" scoped="" ref="0xb6ab5010"/>
        <function-ref name="isOutput" scoped="" ref="0xb6ab50f0"/>
        <function-ref name="get" scoped="" ref="0xb6ab51d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6ab52b0"/>
        <function-ref name="set" scoped="" ref="0xb6ab5390"/>
        <function-ref name="clr" scoped="" ref="0xb6ab5470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0xb6aaa630" loc="86:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6aaa630"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6aaa808"/>
        <function-ref name="wait" scoped="" ref="0xb6aaa8e8"/>
        <function-ref name="cancel" scoped="" ref="0xb6aaa9c8"/>
        <function-ref name="isFree" scoped="" ref="0xb6aaaaa8"/>
        <function-ref name="getNow" scoped="" ref="0xb6aaab88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0xb6ac1858" loc="49:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0xb6ac1858"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6ac1a30"/>
        <function-ref name="turnOn" scoped="" ref="0xb6ac1b10"/>
        <function-ref name="setChannel" scoped="" ref="0xb6ac1bf0"/>
        <function-ref name="done" scoped="" ref="0xb6ac1cd0"/>
        <function-ref name="standby" scoped="" ref="0xb6ac1db0"/>
        <function-ref name="getChannel" scoped="" ref="0xb6ac1e90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0xb6ab0010" loc="75:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0xb6ab0010"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6ab0658"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0xb6abf838" loc="55:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6abf838"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6abe410"/>
        <function-ref name="get" scoped="" ref="0xb6abe150"/>
        <function-ref name="isSet" scoped="" ref="0xb6abfe80"/>
        <function-ref name="set" scoped="" ref="0xb6abe6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6ac0e70" loc="53:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6ac0e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6abf070"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6abf150"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6abf230"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6abf310"/>
        <function-ref name="headerLength" scoped="" ref="0xb6abf3f0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6abf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SLP_TR" ref="0xb6ab6210" loc="69:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0xb6ab6210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6ab63e8"/>
        <function-ref name="isInput" scoped="" ref="0xb6ab64c8"/>
        <function-ref name="toggle" scoped="" ref="0xb6ab65a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb6ab6688"/>
        <function-ref name="get" scoped="" ref="0xb6ab6768"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6ab6848"/>
        <function-ref name="set" scoped="" ref="0xb6ab6928"/>
        <function-ref name="clr" scoped="" ref="0xb6ab6a08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6ab0978" loc="77:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6ab0978"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6ab0b50"/>
        <function-ref name="headerLength" scoped="" ref="0xb6ab0c30"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6ab0d10"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0xb6ab0df0"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0xb6ab0ed0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6ac05b8" loc="51:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6ac05b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6ac0790"/>
        <function-ref name="header" scoped="" ref="0xb6ac0870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="releaseSpi" ref="0xb6a56910" loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="releaseSpi" scoped="" ref="0xb6a56910"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6a56ae8"/>
        <function-ref name="runTask" scoped="" ref="0xb6a56bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0xb6abb010" loc="57:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0xb6abb010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6abbbd8"/>
        <function-ref name="get" scoped="" ref="0xb6abb918"/>
        <function-ref name="isSet" scoped="" ref="0xb6abb658"/>
        <function-ref name="set" scoped="" ref="0xb6abbe98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0xb6ac2e40" loc="46:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0xb6ac2e40"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0xb73d07d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0xb73d07d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6ac1050"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0xb6ab75b8" loc="65:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0xb6ab75b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6ab7790"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6ab7870"/>
        <function-ref name="request" scoped="" ref="0xb6ab7950"/>
        <function-ref name="granted" scoped="" ref="0xb6ab7a30"/>
        <function-ref name="isOwner" scoped="" ref="0xb6ab7b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SELN" ref="0xb6ab8a98" loc="64:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0xb6ab8a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6ab8cf0"/>
        <function-ref name="isInput" scoped="" ref="0xb6ab8dd0"/>
        <function-ref name="toggle" scoped="" ref="0xb6ab8eb0"/>
        <function-ref name="isOutput" scoped="" ref="0xb6ab7010"/>
        <function-ref name="get" scoped="" ref="0xb6ab70f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6ab71d0"/>
        <function-ref name="set" scoped="" ref="0xb6ab72b0"/>
        <function-ref name="clr" scoped="" ref="0xb6ab7390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0xb6ab93d8" loc="58:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6ab93d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6ab8010"/>
        <function-ref name="get" scoped="" ref="0xb6ab9ce0"/>
        <function-ref name="isSet" scoped="" ref="0xb6ab9a20"/>
        <function-ref name="set" scoped="" ref="0xb6ab82d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb6ac0060" loc="50:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6ac0060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6ac0238"/>
        <function-ref name="ready" scoped="" ref="0xb6ac0318"/>
        <function-ref name="sendDone" scoped="" ref="0xb6ac03f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IRQ" ref="0xb6aafd50" loc="72:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0xb6aafd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0xb6aaff28"/>
        <function-ref name="disable" scoped="" ref="0xb6ab1018"/>
        <function-ref name="captured" scoped="" ref="0xb6ab10f8"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0xb6ab11d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FastSpiByte" ref="0xb6ab2b40" loc="67:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0xb6ab2b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0xb6ab2d18"/>
        <function-ref name="splitReadWrite" scoped="" ref="0xb6ab2df8"/>
        <function-ref name="splitRead" scoped="" ref="0xb6ab2ed8"/>
        <function-ref name="write" scoped="" ref="0xb6ab6010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0xb6aadef0" loc="81:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0xb6aadef0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6aac0e0"/>
        <function-ref name="get" scoped="" ref="0xb6aac1c0"/>
        <function-ref name="setValue" scoped="" ref="0xb6aac2a0"/>
        <function-ref name="set" scoped="" ref="0xb6aac380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0xb6aad198" loc="79:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0xb6aad198"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6aad370"/>
        <function-ref name="get" scoped="" ref="0xb6aad450"/>
        <function-ref name="setValue" scoped="" ref="0xb6aad530"/>
        <function-ref name="set" scoped="" ref="0xb6aad610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0xb6ab8680" loc="59:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6ab8680"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0xb6ab8858"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0xb6aaa010" loc="85:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb6aaa010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb6aaa1e8"/>
        <function-ref name="suspend" scoped="" ref="0xb6aaa2c8"/>
        <function-ref name="resume" scoped="" ref="0xb6aaa3a8"/>
        <function-ref name="run" scoped="" ref="0xb6aaa488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0xb6a2fdb8" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0xb6a2fdb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6a2e010"/>
        <function-ref name="isInput" scoped="" ref="0xb6a2e0f0"/>
        <function-ref name="toggle" scoped="" ref="0xb6a2e1d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb6a2e2b0"/>
        <function-ref name="get" scoped="" ref="0xb6a2e390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6a2e470"/>
        <function-ref name="set" scoped="" ref="0xb6a2e550"/>
        <function-ref name="clr" scoped="" ref="0xb6a2e630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SLP_TR" ref="0xb6a2f3d0" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0xb6a2f3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6a2f5a8"/>
        <function-ref name="isInput" scoped="" ref="0xb6a2f688"/>
        <function-ref name="toggle" scoped="" ref="0xb6a2f768"/>
        <function-ref name="isOutput" scoped="" ref="0xb6a2f848"/>
        <function-ref name="get" scoped="" ref="0xb6a2f928"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6a2fa08"/>
        <function-ref name="set" scoped="" ref="0xb6a2fae8"/>
        <function-ref name="clr" scoped="" ref="0xb6a2fbc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0xb6a2c030" loc="49:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb6a2c030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6a2b4e0"/>
        <function-ref name="fired" scoped="" ref="0xb6a2cc98"/>
        <function-ref name="startAt" scoped="" ref="0xb6a2b1a0"/>
        <function-ref name="isRunning" scoped="" ref="0xb6a2cf10"/>
        <function-ref name="getAlarm" scoped="" ref="0xb6a2b758"/>
        <function-ref name="start" scoped="" ref="0xb6a2c780"/>
        <function-ref name="stop" scoped="" ref="0xb6a2ca20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiResource" ref="0xb6a305b8" loc="42:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0xb6a305b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6a30790"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6a30870"/>
        <function-ref name="request" scoped="" ref="0xb6a30950"/>
        <function-ref name="granted" scoped="" ref="0xb6a30a30"/>
        <function-ref name="isOwner" scoped="" ref="0xb6a30b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SELN" ref="0xb6a33af8" loc="41:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0xb6a33af8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6a33cd0"/>
        <function-ref name="isInput" scoped="" ref="0xb6a33db0"/>
        <function-ref name="toggle" scoped="" ref="0xb6a33e90"/>
        <function-ref name="isOutput" scoped="" ref="0xb6a30010"/>
        <function-ref name="get" scoped="" ref="0xb6a300f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6a301d0"/>
        <function-ref name="set" scoped="" ref="0xb6a302b0"/>
        <function-ref name="clr" scoped="" ref="0xb6a30390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0xb6a2e820" loc="48:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0xb6a2e820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0xb6a2e9f8"/>
        <function-ref name="disable" scoped="" ref="0xb6a2ead8"/>
        <function-ref name="captured" scoped="" ref="0xb6a2ebb8"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0xb6a2ec98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0xb6a30cc0" loc="43:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0xb6a30cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0xb6a30e98"/>
        <function-ref name="splitReadWrite" scoped="" ref="0xb6a2f010"/>
        <function-ref name="splitRead" scoped="" ref="0xb6a2f0f0"/>
        <function-ref name="write" scoped="" ref="0xb6a2f1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0xb6a2bb48" loc="50:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6a2bb48"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb71e8890"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6a2a200"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortCLKM" ref="0xb6a25c18" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortCLKM" scoped="" ref="0xb6a25c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6a25df0"/>
        <function-ref name="isInput" scoped="" ref="0xb6a25ed0"/>
        <function-ref name="toggle" scoped="" ref="0xb6a1f010"/>
        <function-ref name="isOutput" scoped="" ref="0xb6a1f0f0"/>
        <function-ref name="get" scoped="" ref="0xb6a1f1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6a1f2b0"/>
        <function-ref name="set" scoped="" ref="0xb6a1f390"/>
        <function-ref name="clr" scoped="" ref="0xb6a1f470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Capture" ref="0xb6a21e68" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0xb6a21e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0xb6a25908"/>
        <function-ref name="test" scoped="" ref="0xb6a25418"/>
        <function-ref name="get" scoped="" ref="0xb6a264d8"/>
        <function-ref name="captured" scoped="" ref="0xb6a269f0"/>
        <function-ref name="reset" scoped="" ref="0xb6a26c90"/>
        <function-ref name="isOn" scoped="" ref="0xb6a25690"/>
        <function-ref name="set" scoped="" ref="0xb6a26750"/>
        <function-ref name="start" scoped="" ref="0xb6a26f08"/>
        <function-ref name="stop" scoped="" ref="0xb6a251a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortIRQ" ref="0xb6a1f678" loc="47:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortIRQ" scoped="" ref="0xb6a1f678"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6a1f850"/>
        <function-ref name="isInput" scoped="" ref="0xb6a1f930"/>
        <function-ref name="toggle" scoped="" ref="0xb6a1fa10"/>
        <function-ref name="isOutput" scoped="" ref="0xb6a1faf0"/>
        <function-ref name="get" scoped="" ref="0xb6a1fbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6a1fcb0"/>
        <function-ref name="set" scoped="" ref="0xb6a1fd90"/>
        <function-ref name="clr" scoped="" ref="0xb6a1fe70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0xb6a27858" loc="40:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0xb6a27858"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6a27a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0xb6a271d0" loc="39:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0xb6a271d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0xb6a273a8"/>
        <function-ref name="disable" scoped="" ref="0xb6a27488"/>
        <function-ref name="captured" scoped="" ref="0xb6a27568"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0xb6a27648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0xb6a11dc8" loc="84:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0xb6a11dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6a16010"/>
        <function-ref name="sendDone" scoped="" ref="0xb6a160f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0xb6a14248" loc="82:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0xb6a14248"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0xb6a14420"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6a285a8" loc="81:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6a285a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6a28780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0xb6a145f0" loc="83:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0xb6a145f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0xb6a147c8"/>
        <function-ref name="splitReadWrite" scoped="" ref="0xb6a148a8"/>
        <function-ref name="splitRead" scoped="" ref="0xb6a14988"/>
        <function-ref name="write" scoped="" ref="0xb6a14a68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6a16588" loc="85:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6a16588"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6a16760"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6a16840"/>
        <function-ref name="request" scoped="" ref="0xb6a16920"/>
        <function-ref name="granted" scoped="" ref="0xb6a16a00"/>
        <function-ref name="isOwner" scoped="" ref="0xb6a16ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0xb6a0cbd8" loc="95:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb6a0cbd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb6a0cdb0"/>
        <function-ref name="configure" scoped="" ref="0xb6a0ce90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="zeroTask" ref="0xb69e51e0" loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="zeroTask" scoped="" ref="0xb69e51e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb69e53b8"/>
        <function-ref name="runTask" scoped="" ref="0xb69e5498"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0xb6a0c450" loc="94:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0xb6a0c450"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6a0c628"/>
        <function-ref name="sendDone" scoped="" ref="0xb6a0c708"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0xb6a0e9f0" loc="92:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0xb6a0e9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0xb6a0ebc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6a0e690" loc="91:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6a0e690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6a0e868"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Spi" ref="0xb69fcbc8" loc="98:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Spi" scoped="" ref="0xb69fcbc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0xb69fcda0"/>
        <function-ref name="sleep" scoped="" ref="0xb6a092b0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0xb6a0a010"/>
        <function-ref name="dataReady" scoped="" ref="0xb6a09390"/>
        <function-ref name="initMaster" scoped="" ref="0xb6a0a1d0"/>
        <function-ref name="setMasterBit" scoped="" ref="0xb6a0a2b0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0xb6a0a390"/>
        <function-ref name="read" scoped="" ref="0xb6a0a470"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0xb6a0a550"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0xb6a0a630"/>
        <function-ref name="setClock" scoped="" ref="0xb6a0a710"/>
        <function-ref name="isInterruptPending" scoped="" ref="0xb6a0a7f0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0xb6a0a8d0"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0xb6a0aa30"/>
        <function-ref name="setDataOrder" scoped="" ref="0xb6a0ab10"/>
        <function-ref name="write" scoped="" ref="0xb6a0abf0"/>
        <function-ref name="enableSpi" scoped="" ref="0xb6a0acd0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0xb6a0adb0"/>
        <function-ref name="getClockPhase" scoped="" ref="0xb6a0ae90"/>
        <function-ref name="getClock" scoped="" ref="0xb6a09010"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0xb6a090f0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0xb69fce80"/>
        <function-ref name="setClockPhase" scoped="" ref="0xb6a0a0f0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0xb6a091d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0xb6a0ed78" loc="93:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0xb6a0ed78"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0xb6a0c010"/>
        <function-ref name="splitReadWrite" scoped="" ref="0xb6a0c0f0"/>
        <function-ref name="splitRead" scoped="" ref="0xb6a0c1d0"/>
        <function-ref name="write" scoped="" ref="0xb6a0c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0xb6a09558" loc="99:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0xb6a09558"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0xb6a09730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiBus" ref="0xb6a0fd10" loc="76:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <component-ref qname="HplAtm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiBus" scoped="" ref="0xb6a0fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0xb6a0fee8"/>
        <function-ref name="sleep" scoped="" ref="0xb69d2390"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0xb69d30f0"/>
        <function-ref name="dataReady" scoped="" ref="0xb69d2470"/>
        <function-ref name="initMaster" scoped="" ref="0xb69d32b0"/>
        <function-ref name="setMasterBit" scoped="" ref="0xb69d3390"/>
        <function-ref name="enableInterrupt" scoped="" ref="0xb69d3470"/>
        <function-ref name="read" scoped="" ref="0xb69d3550"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0xb69d3630"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0xb69d3710"/>
        <function-ref name="setClock" scoped="" ref="0xb69d37f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0xb69d38d0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0xb69d39b0"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0xb69d3b10"/>
        <function-ref name="setDataOrder" scoped="" ref="0xb69d3bf0"/>
        <function-ref name="write" scoped="" ref="0xb69d3cd0"/>
        <function-ref name="enableSpi" scoped="" ref="0xb69d3db0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0xb69d3e90"/>
        <function-ref name="getClockPhase" scoped="" ref="0xb69d2010"/>
        <function-ref name="getClock" scoped="" ref="0xb69d20f0"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0xb69d21d0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0xb69d3010"/>
        <function-ref name="setClockPhase" scoped="" ref="0xb69d31d0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0xb69d22b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MISO" ref="0xb69cbcc8" loc="81:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MISO" scoped="" ref="0xb69cbcc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb69cbea0"/>
        <function-ref name="isInput" scoped="" ref="0xb69ca010"/>
        <function-ref name="toggle" scoped="" ref="0xb69ca0f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb69ca1d0"/>
        <function-ref name="get" scoped="" ref="0xb69ca2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb69ca390"/>
        <function-ref name="set" scoped="" ref="0xb69ca470"/>
        <function-ref name="clr" scoped="" ref="0xb69ca550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0xb69cc8c0" loc="79:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0xb69cc8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb69cca98"/>
        <function-ref name="isInput" scoped="" ref="0xb69ccb78"/>
        <function-ref name="toggle" scoped="" ref="0xb69ccc58"/>
        <function-ref name="isOutput" scoped="" ref="0xb69ccd38"/>
        <function-ref name="get" scoped="" ref="0xb69cce18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb69ccef8"/>
        <function-ref name="set" scoped="" ref="0xb69cb010"/>
        <function-ref name="clr" scoped="" ref="0xb69cb0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SS" ref="0xb69cdea8" loc="78:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SS" scoped="" ref="0xb69cdea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb69cc0c0"/>
        <function-ref name="isInput" scoped="" ref="0xb69cc1a0"/>
        <function-ref name="toggle" scoped="" ref="0xb69cc280"/>
        <function-ref name="isOutput" scoped="" ref="0xb69cc360"/>
        <function-ref name="get" scoped="" ref="0xb69cc440"/>
        <function-ref name="makeOutput" scoped="" ref="0xb69cc520"/>
        <function-ref name="set" scoped="" ref="0xb69cc600"/>
        <function-ref name="clr" scoped="" ref="0xb69cc6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0xb69cd9e8" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0xb69cd9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb69cdbc0"/>
        <function-ref name="stop" scoped="" ref="0xb69cdca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Mcu" ref="0xb69ca758" loc="82:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Mcu" scoped="" ref="0xb69ca758"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0xb69ca930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SPI" ref="0xb69ce100" loc="74:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SPI" scoped="" ref="0xb69ce100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0xb69ce2d8"/>
        <function-ref name="sleep" scoped="" ref="0xb69cd710"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0xb69ce498"/>
        <function-ref name="dataReady" scoped="" ref="0xb69cd7f0"/>
        <function-ref name="initMaster" scoped="" ref="0xb69ce658"/>
        <function-ref name="setMasterBit" scoped="" ref="0xb69ce738"/>
        <function-ref name="enableInterrupt" scoped="" ref="0xb69ce818"/>
        <function-ref name="read" scoped="" ref="0xb69ce8f8"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0xb69ce9d8"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0xb69ceab8"/>
        <function-ref name="setClock" scoped="" ref="0xb69ceb98"/>
        <function-ref name="isInterruptPending" scoped="" ref="0xb69cec78"/>
        <function-ref name="setClockPolarity" scoped="" ref="0xb69ced58"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0xb69ceeb8"/>
        <function-ref name="setDataOrder" scoped="" ref="0xb69cd010"/>
        <function-ref name="write" scoped="" ref="0xb69cd0f0"/>
        <function-ref name="enableSpi" scoped="" ref="0xb69cd1d0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0xb69cd2b0"/>
        <function-ref name="getClockPhase" scoped="" ref="0xb69cd390"/>
        <function-ref name="getClock" scoped="" ref="0xb69cd470"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0xb69cd550"/>
        <function-ref name="getClockPolarity" scoped="" ref="0xb69ce3b8"/>
        <function-ref name="setClockPhase" scoped="" ref="0xb69ce578"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0xb69cd630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MOSI" ref="0xb69cb2e0" loc="80:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MOSI" scoped="" ref="0xb69cb2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb69cb4b8"/>
        <function-ref name="isInput" scoped="" ref="0xb69cb598"/>
        <function-ref name="toggle" scoped="" ref="0xb69cb678"/>
        <function-ref name="isOutput" scoped="" ref="0xb69cb758"/>
        <function-ref name="get" scoped="" ref="0xb69cb838"/>
        <function-ref name="makeOutput" scoped="" ref="0xb69cb918"/>
        <function-ref name="set" scoped="" ref="0xb69cb9f8"/>
        <function-ref name="clr" scoped="" ref="0xb69cbad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb69a3568" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb69a3568"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb69a3750"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb69a3830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb69a3e20" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb69a3e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb69a2050"/>
        <function-ref name="configure" scoped="" ref="0xb69a2130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb69a4e00" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb69a4e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb69a3010"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb69a30f0"/>
        <function-ref name="request" scoped="" ref="0xb69a31d0"/>
        <function-ref name="granted" scoped="" ref="0xb69a32b0"/>
        <function-ref name="isOwner" scoped="" ref="0xb69a3390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb69a3970" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb69a3970"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb69a3b48"/>
        <function-ref name="userId" scoped="" ref="0xb69a3c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5f89948" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5f89948"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5f89b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0xb5f89c80" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0xb5f89c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb5f89e58"/>
        <function-ref name="isEmpty" scoped="" ref="0xb5f86010"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb5f860f0"/>
        <function-ref name="dequeue" scoped="" ref="0xb5f861d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb5f85490" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb5f85490"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb5f85678"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb5f85758"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb5f85d58" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb5f85d58"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb5f84010"/>
        <function-ref name="configure" scoped="" ref="0xb5f840f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0xb5f84250" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb5f84250"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb5f84428"/>
        <function-ref name="isEmpty" scoped="" ref="0xb5f84508"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb5f845e8"/>
        <function-ref name="dequeue" scoped="" ref="0xb5f846c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb5f86d38" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb5f86d38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb5f86f20"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb5f85018"/>
        <function-ref name="request" scoped="" ref="0xb5f850f8"/>
        <function-ref name="granted" scoped="" ref="0xb5f851d8"/>
        <function-ref name="isOwner" scoped="" ref="0xb5f852b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb5f85898" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb5f85898"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb5f85a70"/>
        <function-ref name="userId" scoped="" ref="0xb5f85b50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0xb5f84848" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0xb5f84848"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb5f84a20"/>
        <function-ref name="runTask" scoped="" ref="0xb5f84b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0xb69947f8" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb69947f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0xb69949d0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb6994ab0"/>
        <function-ref name="getControlA" scoped="" ref="0xb6994b90"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb6994c70"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb6994d50"/>
        <function-ref name="setControlB" scoped="" ref="0xb6994e30"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb6994f10"/>
        <function-ref name="getControlB" scoped="" ref="0xb6999010"/>
        <function-ref name="setControlC" scoped="" ref="0xb69990f0"/>
        <function-ref name="setControlA" scoped="" ref="0xb69991d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0xb6999508" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0xb6999508"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0xb6992010"/>
        <function-ref name="test" scoped="" ref="0xb6998a90"/>
        <function-ref name="get" scoped="" ref="0xb6999b50"/>
        <function-ref name="captured" scoped="" ref="0xb6998088"/>
        <function-ref name="reset" scoped="" ref="0xb6998328"/>
        <function-ref name="isOn" scoped="" ref="0xb6998d08"/>
        <function-ref name="set" scoped="" ref="0xb6999dc8"/>
        <function-ref name="start" scoped="" ref="0xb69985a0"/>
        <function-ref name="stop" scoped="" ref="0xb6998818"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0xb6992720" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0xb6992720"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb6991c90"/>
        <function-ref name="fired" scoped="" ref="0xb69912b0"/>
        <function-ref name="get" scoped="" ref="0xb6992d68"/>
        <function-ref name="reset" scoped="" ref="0xb6991528"/>
        <function-ref name="isOn" scoped="" ref="0xb6991f08"/>
        <function-ref name="set" scoped="" ref="0xb6991010"/>
        <function-ref name="start" scoped="" ref="0xb69917a0"/>
        <function-ref name="stop" scoped="" ref="0xb6991a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb69a0ec0" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb69a0ec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb699b918"/>
        <function-ref name="test" scoped="" ref="0xb699b428"/>
        <function-ref name="get" scoped="" ref="0xb699c520"/>
        <function-ref name="setScale" scoped="" ref="0xb699bb90"/>
        <function-ref name="getScale" scoped="" ref="0xb699be30"/>
        <function-ref name="reset" scoped="" ref="0xb699ccb0"/>
        <function-ref name="overflow" scoped="" ref="0xb699ca38"/>
        <function-ref name="isOn" scoped="" ref="0xb699b6a0"/>
        <function-ref name="set" scoped="" ref="0xb699c798"/>
        <function-ref name="start" scoped="" ref="0xb699cf28"/>
        <function-ref name="stop" scoped="" ref="0xb699b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0xb698be98" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb698be98"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0xb698a0c0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb698a1a0"/>
        <function-ref name="getControlA" scoped="" ref="0xb698a280"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb698a360"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb698a440"/>
        <function-ref name="setControlB" scoped="" ref="0xb698a520"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb698a600"/>
        <function-ref name="getControlB" scoped="" ref="0xb698a6e0"/>
        <function-ref name="setControlC" scoped="" ref="0xb698a7c0"/>
        <function-ref name="setControlA" scoped="" ref="0xb698a8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0xb6987aa0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0xb6987aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb6985048"/>
        <function-ref name="fired" scoped="" ref="0xb6986638"/>
        <function-ref name="get" scoped="" ref="0xb6986120"/>
        <function-ref name="reset" scoped="" ref="0xb69868b0"/>
        <function-ref name="isOn" scoped="" ref="0xb69852c0"/>
        <function-ref name="set" scoped="" ref="0xb6986398"/>
        <function-ref name="start" scoped="" ref="0xb6986b28"/>
        <function-ref name="stop" scoped="" ref="0xb6986da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0xb698abd8" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0xb698abd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0xb6987660"/>
        <function-ref name="test" scoped="" ref="0xb6987170"/>
        <function-ref name="get" scoped="" ref="0xb6989238"/>
        <function-ref name="captured" scoped="" ref="0xb6989750"/>
        <function-ref name="reset" scoped="" ref="0xb69899f0"/>
        <function-ref name="isOn" scoped="" ref="0xb69873e8"/>
        <function-ref name="set" scoped="" ref="0xb69894b0"/>
        <function-ref name="start" scoped="" ref="0xb6989c68"/>
        <function-ref name="stop" scoped="" ref="0xb6989ee0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0xb69856d8" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0xb69856d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb6983c90"/>
        <function-ref name="fired" scoped="" ref="0xb69832b0"/>
        <function-ref name="get" scoped="" ref="0xb6985d20"/>
        <function-ref name="reset" scoped="" ref="0xb6983528"/>
        <function-ref name="isOn" scoped="" ref="0xb6983f08"/>
        <function-ref name="set" scoped="" ref="0xb6983010"/>
        <function-ref name="start" scoped="" ref="0xb69837a0"/>
        <function-ref name="stop" scoped="" ref="0xb6983a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0xb6982340" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0xb6982340"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb6981898"/>
        <function-ref name="fired" scoped="" ref="0xb6982ea0"/>
        <function-ref name="get" scoped="" ref="0xb6982988"/>
        <function-ref name="reset" scoped="" ref="0xb6981130"/>
        <function-ref name="isOn" scoped="" ref="0xb6981b10"/>
        <function-ref name="set" scoped="" ref="0xb6982c00"/>
        <function-ref name="start" scoped="" ref="0xb69813a8"/>
        <function-ref name="stop" scoped="" ref="0xb6981620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb6990bb8" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb6990bb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb698b620"/>
        <function-ref name="test" scoped="" ref="0xb698b130"/>
        <function-ref name="get" scoped="" ref="0xb698c210"/>
        <function-ref name="setScale" scoped="" ref="0xb698b898"/>
        <function-ref name="getScale" scoped="" ref="0xb698bb38"/>
        <function-ref name="reset" scoped="" ref="0xb698c9a0"/>
        <function-ref name="overflow" scoped="" ref="0xb698c728"/>
        <function-ref name="isOn" scoped="" ref="0xb698b3a8"/>
        <function-ref name="set" scoped="" ref="0xb698c488"/>
        <function-ref name="start" scoped="" ref="0xb698cc18"/>
        <function-ref name="stop" scoped="" ref="0xb698ce90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0xb693e670" loc="30:../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="HplRF230C.AlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb693e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TOne" ref="0xb733fdb0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6910b30"/>
        <function-ref name="fired" scoped="" ref="0xb6910300"/>
        <function-ref name="startAt" scoped="" ref="0xb69107f0"/>
        <function-ref name="isRunning" scoped="" ref="0xb6910578"/>
        <function-ref name="getAlarm" scoped="" ref="0xb6910da8"/>
        <function-ref name="start" scoped="" ref="0xb693edc0"/>
        <function-ref name="stop" scoped="" ref="0xb6910088"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb69372b0" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb69372b0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0xb73d05d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0xb73d05d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6937488"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb6937698" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb6937698"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb692e1a0"/>
        <function-ref name="test" scoped="" ref="0xb6936c90"/>
        <function-ref name="get" scoped="" ref="0xb6937ce0"/>
        <function-ref name="setScale" scoped="" ref="0xb692e418"/>
        <function-ref name="getScale" scoped="" ref="0xb692e6b8"/>
        <function-ref name="reset" scoped="" ref="0xb6936528"/>
        <function-ref name="overflow" scoped="" ref="0xb69362b0"/>
        <function-ref name="isOn" scoped="" ref="0xb6936f08"/>
        <function-ref name="set" scoped="" ref="0xb6936010"/>
        <function-ref name="start" scoped="" ref="0xb69367a0"/>
        <function-ref name="stop" scoped="" ref="0xb6936a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0xb5f6eac0" loc="55:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb5f6eac0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0xb73d03d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0xb73d03d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TOne" ref="0xb733fdb0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb5f6c010"/>
        <function-ref name="fired" scoped="" ref="0xb5f6d740"/>
        <function-ref name="startAt" scoped="" ref="0xb5f6dc30"/>
        <function-ref name="isRunning" scoped="" ref="0xb5f6d9b8"/>
        <function-ref name="getAlarm" scoped="" ref="0xb5f6c288"/>
        <function-ref name="start" scoped="" ref="0xb5f6d228"/>
        <function-ref name="stop" scoped="" ref="0xb5f6d4c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0xb5f697e8" loc="58:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0xb5f697e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb5f68d58"/>
        <function-ref name="fired" scoped="" ref="0xb5f68378"/>
        <function-ref name="get" scoped="" ref="0xb5f69e30"/>
        <function-ref name="reset" scoped="" ref="0xb5f685f0"/>
        <function-ref name="isOn" scoped="" ref="0xb5f67010"/>
        <function-ref name="set" scoped="" ref="0xb5f680d8"/>
        <function-ref name="start" scoped="" ref="0xb5f68868"/>
        <function-ref name="stop" scoped="" ref="0xb5f68ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0xb5f6c548" loc="57:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0xb5f6c548"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb5f69010"/>
        <function-ref name="test" scoped="" ref="0xb5f6bab8"/>
        <function-ref name="get" scoped="" ref="0xb5f6cb90"/>
        <function-ref name="setScale" scoped="" ref="0xb5f69288"/>
        <function-ref name="getScale" scoped="" ref="0xb5f69528"/>
        <function-ref name="reset" scoped="" ref="0xb5f6b350"/>
        <function-ref name="overflow" scoped="" ref="0xb5f6b0d8"/>
        <function-ref name="isOn" scoped="" ref="0xb5f6bd30"/>
        <function-ref name="set" scoped="" ref="0xb5f6ce08"/>
        <function-ref name="start" scoped="" ref="0xb5f6b5c8"/>
        <function-ref name="stop" scoped="" ref="0xb5f6b840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0xb690b010" loc="39:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <component-ref qname="LocalTimeMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0xb690b010"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb690b658"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb6908128" loc="24:../../tos/platforms/mica/CounterOne16C.nc">
      <component-ref qname="CounterOne16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb6908128"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TOne" ref="0xb733fdb0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6908878"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb6908d68"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb6908af0"/>
        <function-ref name="overflow" scoped="" ref="0xb6907010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb6906890" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb6906890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TOne" ref="0xb733fdb0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6905010"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb6905500"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb6905288"/>
        <function-ref name="overflow" scoped="" ref="0xb6905778"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb6905a58" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb6905a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb68f9500"/>
        <function-ref name="test" scoped="" ref="0xb68f9010"/>
        <function-ref name="get" scoped="" ref="0xb68fa0b8"/>
        <function-ref name="setScale" scoped="" ref="0xb68f9778"/>
        <function-ref name="getScale" scoped="" ref="0xb68f9a18"/>
        <function-ref name="reset" scoped="" ref="0xb68fa848"/>
        <function-ref name="overflow" scoped="" ref="0xb68fa5d0"/>
        <function-ref name="isOn" scoped="" ref="0xb68f9288"/>
        <function-ref name="set" scoped="" ref="0xb68fa330"/>
        <function-ref name="start" scoped="" ref="0xb68faac0"/>
        <function-ref name="stop" scoped="" ref="0xb68fad38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0xb68e7b40" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0xb68e7b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb68e6308"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb68e67f8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb68e6580"/>
        <function-ref name="overflow" scoped="" ref="0xb68e6a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb68f7908" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb68f7908"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb68e7068"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb68e7558"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb68e72e0"/>
        <function-ref name="overflow" scoped="" ref="0xb68e77d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0xb68e5988" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0xb68e5988"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb68e3010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0xb68e3360" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb68e3360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb68e3ab0"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb68e2010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb68e3d28"/>
        <function-ref name="overflow" scoped="" ref="0xb68e2288"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb67f6d68" loc="142:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb67f6d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb67f4010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RootControl" ref="0xb67f3078" loc="145:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0xb67f3078"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0xb67f3250"/>
        <function-ref name="setRoot" scoped="" ref="0xb67f3330"/>
        <function-ref name="unsetRoot" scoped="" ref="0xb67f3410"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb68020c0" loc="126:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb68020c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6802298"/>
        <function-ref name="getPayload" scoped="" ref="0xb6802378"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6802458"/>
        <function-ref name="cancel" scoped="" ref="0xb6802538"/>
        <function-ref name="sendDone" scoped="" ref="0xb6802618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionDebug" ref="0xb67f1708" loc="156:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0xb67f1708"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0xb67f18e0"/>
        <function-ref name="logEventMsg" scoped="" ref="0xb67f19c0"/>
        <function-ref name="logEventSimple" scoped="" ref="0xb67f1aa0"/>
        <function-ref name="logEventRoute" scoped="" ref="0xb67f1b80"/>
        <function-ref name="logEventDbg" scoped="" ref="0xb67f1c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionPacket" ref="0xb68044d0" loc="116:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionPacket" scoped="" ref="0xb68044d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb68046a8"/>
        <function-ref name="setOrigin" scoped="" ref="0xb6804788"/>
        <function-ref name="setType" scoped="" ref="0xb6804868"/>
        <function-ref name="getOrigin" scoped="" ref="0xb6804948"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6804a28"/>
        <function-ref name="getType" scoped="" ref="0xb6804b08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LinkEstimator" ref="0xb67fe010" loc="129:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkEstimator" scoped="" ref="0xb67fe010"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkEstimator"/>
      </instance>
      <interface-functions>
        <function-ref name="txAck" scoped="" ref="0xb67fe1e8"/>
        <function-ref name="pinNeighbor" scoped="" ref="0xb67fe2c8"/>
        <function-ref name="txNoAck" scoped="" ref="0xb67fe3a8"/>
        <function-ref name="insertNeighbor" scoped="" ref="0xb67fe488"/>
        <function-ref name="evicted" scoped="" ref="0xb67fe568"/>
        <function-ref name="clearDLQ" scoped="" ref="0xb67fe648"/>
        <function-ref name="unpinNeighbor" scoped="" ref="0xb67fe728"/>
        <function-ref name="getLinkQuality" scoped="" ref="0xb67fe808"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SentCache" ref="0xb67f6010" loc="140:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SentCache" scoped="" ref="0xb67f6010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Cache"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
              <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="insert" scoped="" ref="0xb67f6638"/>
        <function-ref name="flush" scoped="" ref="0xb67f6b38"/>
        <function-ref name="lookup" scoped="" ref="0xb67f68b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Intercept" ref="0xb6805a70" loc="114:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Intercept" scoped="" ref="0xb6805a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0xb6805c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6805d98" loc="115:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6805d98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6804010"/>
        <function-ref name="payloadLength" scoped="" ref="0xb68040f0"/>
        <function-ref name="getPayload" scoped="" ref="0xb68041d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb68042b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6804390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb68056b0" loc="113:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb68056b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6805898"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0xb67f1310" loc="149:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0xb67f1310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0xb67f14e8"/>
        <function-ref name="rand32" scoped="" ref="0xb67f15c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6806b78" loc="111:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6806b78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6806d60"/>
        <function-ref name="getPayload" scoped="" ref="0xb6806e40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6806f20"/>
        <function-ref name="cancel" scoped="" ref="0xb6805018"/>
        <function-ref name="sendDone" scoped="" ref="0xb68050f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RetxmitTimer" ref="0xb6802ce0" loc="128:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RetxmitTimer" scoped="" ref="0xb6802ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb67ff8a8"/>
        <function-ref name="fired" scoped="" ref="0xb6801b18"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb67ff268"/>
        <function-ref name="isOneShot" scoped="" ref="0xb67ff010"/>
        <function-ref name="getdt" scoped="" ref="0xb67ffd58"/>
        <function-ref name="gett0" scoped="" ref="0xb67ffb00"/>
        <function-ref name="isRunning" scoped="" ref="0xb6801d70"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb68013c0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb67ff588"/>
        <function-ref name="startOneShot" scoped="" ref="0xb6801640"/>
        <function-ref name="stop" scoped="" ref="0xb68018c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0xb67f1dc0" loc="162:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0xb67f1dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb67f0010"/>
        <function-ref name="stopDone" scoped="" ref="0xb67f00f0"/>
        <function-ref name="start" scoped="" ref="0xb67f01d0"/>
        <function-ref name="stop" scoped="" ref="0xb67f02b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0xb67f0430" loc="234:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0xb67f0430"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb67f0608"/>
        <function-ref name="runTask" scoped="" ref="0xb67f06e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendQueue" ref="0xb67fd6a0" loc="137:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendQueue" scoped="" ref="0xb67fd6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb68b13a0"/>
              <typename><typedef-ref name="fe_queue_entry_t" ref="0xb68b1628"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0xb67fc640"/>
        <function-ref name="enqueue" scoped="" ref="0xb67fcd20"/>
        <function-ref name="element" scoped="" ref="0xb67fa088"/>
        <function-ref name="full" scoped="" ref="0xb67fdf20"/>
        <function-ref name="maxSize" scoped="" ref="0xb67fc3e8"/>
        <function-ref name="dequeue" scoped="" ref="0xb67fc9b0"/>
        <function-ref name="empty" scoped="" ref="0xb67fdcc8"/>
        <function-ref name="size" scoped="" ref="0xb67fc190"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CtpInfo" ref="0xb67f4488" loc="144:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpInfo" scoped="" ref="0xb67f4488"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getNeighborLinkQuality" scoped="" ref="0xb67f4660"/>
        <function-ref name="recomputeRoutes" scoped="" ref="0xb67f4740"/>
        <function-ref name="numNeighbors" scoped="" ref="0xb67f4820"/>
        <function-ref name="triggerRouteUpdate" scoped="" ref="0xb67f4900"/>
        <function-ref name="getEtx" scoped="" ref="0xb67f49e0"/>
        <function-ref name="triggerImmediateRouteUpdate" scoped="" ref="0xb67f4ac0"/>
        <function-ref name="setNeighborCongested" scoped="" ref="0xb67f4ba0"/>
        <function-ref name="getNeighborAddr" scoped="" ref="0xb67f4c80"/>
        <function-ref name="getParent" scoped="" ref="0xb67f4d60"/>
        <function-ref name="getNeighborRouteQuality" scoped="" ref="0xb67f4e40"/>
        <function-ref name="isNeighborCongested" scoped="" ref="0xb67f4f20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb67fef20" loc="131:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb67fef20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb67fd110"/>
        <function-ref name="payloadLength" scoped="" ref="0xb67fd1f0"/>
        <function-ref name="getPayload" scoped="" ref="0xb67fd2d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb67fd3b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb67fd490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb68063d0" loc="109:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb68063d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb68065a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb68052d0" loc="112:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb68052d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb68054b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpCongestion" ref="0xb6803c50" loc="118:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpCongestion" scoped="" ref="0xb6803c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpCongestion"/>
      </instance>
      <interface-functions>
        <function-ref name="isCongested" scoped="" ref="0xb6803e28"/>
        <function-ref name="setClientCongested" scoped="" ref="0xb6803f08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UnicastNameFreeRouting" ref="0xb67fe948" loc="130:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb67fe948"/></type-interface>
      <instance>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
      </instance>
      <interface-functions>
        <function-ref name="hasRoute" scoped="" ref="0xb67feb20"/>
        <function-ref name="routeFound" scoped="" ref="0xb67fec00"/>
        <function-ref name="nextHop" scoped="" ref="0xb67fece0"/>
        <function-ref name="noRoute" scoped="" ref="0xb67fedc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb67f2690" loc="148:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb67f2690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb67f2868"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb67f2948"/>
        <function-ref name="led1On" scoped="" ref="0xb67f2a28"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb67f2b08"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb67f2be8"/>
        <function-ref name="get" scoped="" ref="0xb67f2cc8"/>
        <function-ref name="led1Off" scoped="" ref="0xb67f2da8"/>
        <function-ref name="led2On" scoped="" ref="0xb67f11d0"/>
        <function-ref name="set" scoped="" ref="0xb67f1010"/>
        <function-ref name="led2Off" scoped="" ref="0xb67f2e88"/>
        <function-ref name="led0On" scoped="" ref="0xb67f10f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0xb6802758" loc="127:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6802758"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6802930"/>
        <function-ref name="noAck" scoped="" ref="0xb6802a10"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6802af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpPacket" ref="0xb6804c48" loc="117:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpPacket" scoped="" ref="0xb6804c48"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6804e20"/>
        <function-ref name="option" scoped="" ref="0xb6804f00"/>
        <function-ref name="setEtx" scoped="" ref="0xb6803010"/>
        <function-ref name="setOrigin" scoped="" ref="0xb68030f0"/>
        <function-ref name="clearOption" scoped="" ref="0xb68031d0"/>
        <function-ref name="getEtx" scoped="" ref="0xb68032b0"/>
        <function-ref name="getOrigin" scoped="" ref="0xb6803390"/>
        <function-ref name="setType" scoped="" ref="0xb6803470"/>
        <function-ref name="setOption" scoped="" ref="0xb6803550"/>
        <function-ref name="matchPacket" scoped="" ref="0xb6803630"/>
        <function-ref name="getThl" scoped="" ref="0xb6803710"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb68037f0"/>
        <function-ref name="matchInstance" scoped="" ref="0xb68038d0"/>
        <function-ref name="getType" scoped="" ref="0xb6803a30"/>
        <function-ref name="setThl" scoped="" ref="0xb6803b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="QEntryPool" ref="0xb67fa488" loc="138:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="QEntryPool" scoped="" ref="0xb67fa488"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb68b13a0"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0xb68b1628"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb67f95f8"/>
        <function-ref name="maxSize" scoped="" ref="0xb67f9010"/>
        <function-ref name="empty" scoped="" ref="0xb67faab0"/>
        <function-ref name="put" scoped="" ref="0xb67f9268"/>
        <function-ref name="size" scoped="" ref="0xb67fad08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb67f3a10" loc="147:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb67f3a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb67f3be8"/>
        <function-ref name="source" scoped="" ref="0xb67f3cc8"/>
        <function-ref name="address" scoped="" ref="0xb67f3da8"/>
        <function-ref name="destination" scoped="" ref="0xb67f3e88"/>
        <function-ref name="setSource" scoped="" ref="0xb67f2010"/>
        <function-ref name="setDestination" scoped="" ref="0xb67f20f0"/>
        <function-ref name="type" scoped="" ref="0xb67f21d0"/>
        <function-ref name="setType" scoped="" ref="0xb67f22b0"/>
        <function-ref name="isForMe" scoped="" ref="0xb67f2390"/>
        <function-ref name="setGroup" scoped="" ref="0xb67f2470"/>
        <function-ref name="localGroup" scoped="" ref="0xb67f2550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb68066e8" loc="110:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb68066e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb68068c0"/>
        <function-ref name="stop" scoped="" ref="0xb68069a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSnoop" ref="0xb67f4170" loc="143:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSnoop" scoped="" ref="0xb67f4170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb67f4348"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MessagePool" ref="0xb67f9a30" loc="139:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MessagePool" scoped="" ref="0xb67f9a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
            <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb67f7b00"/>
        <function-ref name="maxSize" scoped="" ref="0xb67f7518"/>
        <function-ref name="empty" scoped="" ref="0xb67f7068"/>
        <function-ref name="put" scoped="" ref="0xb67f7770"/>
        <function-ref name="size" scoped="" ref="0xb67f72c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionId" ref="0xb67f35e8" loc="146:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionId" scoped="" ref="0xb67f35e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionId"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fetch" scoped="" ref="0xb67f38d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb67eab18" loc="42:../../tos/system/PoolC.nc">
      <component-ref qname="CtpP.MessagePoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb67eab18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
            <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb67e9c78"/>
        <function-ref name="maxSize" scoped="" ref="0xb67e9690"/>
        <function-ref name="empty" scoped="" ref="0xb67e91e0"/>
        <function-ref name="put" scoped="" ref="0xb67e98e8"/>
        <function-ref name="size" scoped="" ref="0xb67e9438"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb5ee81e0" loc="56:../../tos/system/PoolP.nc">
      <component-ref qname="CtpP.MessagePoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb5ee81e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
            <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb5ee72b8"/>
        <function-ref name="maxSize" scoped="" ref="0xb5ee8cb8"/>
        <function-ref name="empty" scoped="" ref="0xb5ee8808"/>
        <function-ref name="put" scoped="" ref="0xb5ee8f10"/>
        <function-ref name="size" scoped="" ref="0xb5ee8a60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5eead88" loc="55:../../tos/system/PoolP.nc">
      <component-ref qname="CtpP.MessagePoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5eead88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5ee8010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb67d3010" loc="42:../../tos/system/PoolC.nc">
      <component-ref qname="CtpP.QEntryPoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb67d3010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb68b13a0"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0xb68b1628"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb67d20e8"/>
        <function-ref name="maxSize" scoped="" ref="0xb67d3ae8"/>
        <function-ref name="empty" scoped="" ref="0xb67d3638"/>
        <function-ref name="put" scoped="" ref="0xb67d3d40"/>
        <function-ref name="size" scoped="" ref="0xb67d3890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb5edf8f8" loc="56:../../tos/system/PoolP.nc">
      <component-ref qname="CtpP.QEntryPoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb5edf8f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb68b13a0"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0xb68b1628"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb5edd9d0"/>
        <function-ref name="maxSize" scoped="" ref="0xb5edd3e8"/>
        <function-ref name="empty" scoped="" ref="0xb5edff20"/>
        <function-ref name="put" scoped="" ref="0xb5edd640"/>
        <function-ref name="size" scoped="" ref="0xb5edd190"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5edf550" loc="55:../../tos/system/PoolP.nc">
      <component-ref qname="CtpP.QEntryPoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5edf550"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5edf728"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0xb67cf0a0" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="CtpP.SendQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb67cf0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb68b13a0"/>
              <typename><typedef-ref name="fe_queue_entry_t" ref="0xb68b1628"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0xb67bf048"/>
        <function-ref name="enqueue" scoped="" ref="0xb67bf728"/>
        <function-ref name="element" scoped="" ref="0xb67bfa78"/>
        <function-ref name="full" scoped="" ref="0xb67cf920"/>
        <function-ref name="maxSize" scoped="" ref="0xb67cfdd0"/>
        <function-ref name="dequeue" scoped="" ref="0xb67bf3b8"/>
        <function-ref name="empty" scoped="" ref="0xb67cf6c8"/>
        <function-ref name="size" scoped="" ref="0xb67cfb78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Cache" ref="0xb67bddc0" loc="39:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
      <component-ref qname="CtpP.SentCacheP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Cache" scoped="" ref="0xb67bddc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Cache"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
              <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="insert" scoped="" ref="0xb67bc408"/>
        <function-ref name="flush" scoped="" ref="0xb67bc908"/>
        <function-ref name="lookup" scoped="" ref="0xb67bc688"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Cache" ref="0xb5ecfa98" loc="46:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
      <component-ref qname="CtpP.SentCacheP.CacheP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Cache" scoped="" ref="0xb5ecfa98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Cache"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
              <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="insert" scoped="" ref="0xb5ece0d8"/>
        <function-ref name="flush" scoped="" ref="0xb5ece5d8"/>
        <function-ref name="lookup" scoped="" ref="0xb5ece358"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5ecf6d0" loc="45:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
      <component-ref qname="CtpP.SentCacheP.CacheP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5ecf6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5ecf8a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CtpPacket" ref="0xb5ece818" loc="49:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
      <component-ref qname="CtpP.SentCacheP.CacheP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpPacket" scoped="" ref="0xb5ece818"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb5ece9f0"/>
        <function-ref name="option" scoped="" ref="0xb5ecead0"/>
        <function-ref name="setEtx" scoped="" ref="0xb5ecebb0"/>
        <function-ref name="setOrigin" scoped="" ref="0xb5ecec90"/>
        <function-ref name="clearOption" scoped="" ref="0xb5eced70"/>
        <function-ref name="getEtx" scoped="" ref="0xb5ecee50"/>
        <function-ref name="getOrigin" scoped="" ref="0xb5ecd010"/>
        <function-ref name="setType" scoped="" ref="0xb5ecd0f0"/>
        <function-ref name="setOption" scoped="" ref="0xb5ecd1d0"/>
        <function-ref name="matchPacket" scoped="" ref="0xb5ecd2b0"/>
        <function-ref name="getThl" scoped="" ref="0xb5ecd390"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb5ecd470"/>
        <function-ref name="matchInstance" scoped="" ref="0xb5ecd550"/>
        <function-ref name="getType" scoped="" ref="0xb5ecd6b0"/>
        <function-ref name="setThl" scoped="" ref="0xb5ecd790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb67a1838" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="CtpP.RoutingBeaconTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb67a1838"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb679e368"/>
        <function-ref name="fired" scoped="" ref="0xb67a05e8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb67a0cf0"/>
        <function-ref name="isOneShot" scoped="" ref="0xb67a0a98"/>
        <function-ref name="getdt" scoped="" ref="0xb679e818"/>
        <function-ref name="gett0" scoped="" ref="0xb679e5c0"/>
        <function-ref name="isRunning" scoped="" ref="0xb67a0840"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb67a1e60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb679e048"/>
        <function-ref name="startOneShot" scoped="" ref="0xb67a0110"/>
        <function-ref name="stop" scoped="" ref="0xb67a0390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb679d670" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="CtpP.RouteUpdateTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb679d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb679b170"/>
        <function-ref name="fired" scoped="" ref="0xb679c408"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb679cb10"/>
        <function-ref name="isOneShot" scoped="" ref="0xb679c8b8"/>
        <function-ref name="getdt" scoped="" ref="0xb679b620"/>
        <function-ref name="gett0" scoped="" ref="0xb679b3c8"/>
        <function-ref name="isRunning" scoped="" ref="0xb679c660"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb679dc98"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb679ce30"/>
        <function-ref name="startOneShot" scoped="" ref="0xb679df18"/>
        <function-ref name="stop" scoped="" ref="0xb679c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb678f300" loc="57:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb678f300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb678f4d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkEstimator" ref="0xb6793b10" loc="47:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkEstimator" scoped="" ref="0xb6793b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkEstimator"/>
      </instance>
      <interface-functions>
        <function-ref name="txAck" scoped="" ref="0xb6793ce8"/>
        <function-ref name="pinNeighbor" scoped="" ref="0xb6793dc8"/>
        <function-ref name="txNoAck" scoped="" ref="0xb6793ea8"/>
        <function-ref name="insertNeighbor" scoped="" ref="0xb6792010"/>
        <function-ref name="evicted" scoped="" ref="0xb67920f0"/>
        <function-ref name="clearDLQ" scoped="" ref="0xb67921d0"/>
        <function-ref name="unpinNeighbor" scoped="" ref="0xb67922b0"/>
        <function-ref name="getLinkQuality" scoped="" ref="0xb6792390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6792858" loc="49:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6792858"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6792a30"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6792b10"/>
        <function-ref name="getPayload" scoped="" ref="0xb6792bf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6792cd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6792db0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0xb678e698" loc="54:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb678e698"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb678e870"/>
        <function-ref name="getPayload" scoped="" ref="0xb678e950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb678ea30"/>
        <function-ref name="cancel" scoped="" ref="0xb678eb10"/>
        <function-ref name="sendDone" scoped="" ref="0xb678ebf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6793090" loc="45:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6793090"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6793268"/>
        <function-ref name="getPayload" scoped="" ref="0xb6793348"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6793428"/>
        <function-ref name="cancel" scoped="" ref="0xb6793508"/>
        <function-ref name="sendDone" scoped="" ref="0xb67935e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0xb678fa28" loc="59:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0xb678fa28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0xb678fc80"/>
        <function-ref name="rand32" scoped="" ref="0xb678fd60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6790ad0" loc="56:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6790ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6790ca8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6790d88"/>
        <function-ref name="getPayload" scoped="" ref="0xb6790e68"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb678f010"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb678f0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6792500" loc="48:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6792500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb67926d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubAMPacket" ref="0xb678ee18" loc="55:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubAMPacket" scoped="" ref="0xb678ee18"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6790010"/>
        <function-ref name="source" scoped="" ref="0xb67900f0"/>
        <function-ref name="address" scoped="" ref="0xb67901d0"/>
        <function-ref name="destination" scoped="" ref="0xb67902b0"/>
        <function-ref name="setSource" scoped="" ref="0xb6790390"/>
        <function-ref name="setDestination" scoped="" ref="0xb6790470"/>
        <function-ref name="type" scoped="" ref="0xb6790550"/>
        <function-ref name="setType" scoped="" ref="0xb6790630"/>
        <function-ref name="isForMe" scoped="" ref="0xb6790710"/>
        <function-ref name="setGroup" scoped="" ref="0xb67907f0"/>
        <function-ref name="localGroup" scoped="" ref="0xb67908d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6793770" loc="46:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6793770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6793948"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareBit" ref="0xb678e300" loc="50:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareBit" scoped="" ref="0xb678e300"/></type-interface>
      <instance>
        <interfacedef-ref qname="CompareBit"/>
      </instance>
      <interface-functions>
        <function-ref name="shouldInsert" scoped="" ref="0xb678e4d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb6794bd0" loc="44:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb6794bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6794da8"/>
        <function-ref name="stop" scoped="" ref="0xb6794e88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LinkPacketMetadata" ref="0xb678f6d0" loc="58:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb678f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0xb678f8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb6725bb8" loc="49:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb6725bb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6725d90"/>
        <function-ref name="getPayload" scoped="" ref="0xb6725e70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6724010"/>
        <function-ref name="cancel" scoped="" ref="0xb67240f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb67241d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6724310" loc="50:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6724310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb67244e8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb67245c8"/>
        <function-ref name="getPayload" scoped="" ref="0xb67246a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6724788"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6724868"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb67249a8" loc="51:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb67249a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6724b80"/>
        <function-ref name="source" scoped="" ref="0xb6724c60"/>
        <function-ref name="address" scoped="" ref="0xb6724d40"/>
        <function-ref name="destination" scoped="" ref="0xb6724e20"/>
        <function-ref name="setSource" scoped="" ref="0xb6724f00"/>
        <function-ref name="setDestination" scoped="" ref="0xb66da010"/>
        <function-ref name="type" scoped="" ref="0xb66da0f0"/>
        <function-ref name="setType" scoped="" ref="0xb66da1d0"/>
        <function-ref name="isForMe" scoped="" ref="0xb66da2b0"/>
        <function-ref name="setGroup" scoped="" ref="0xb66da390"/>
        <function-ref name="localGroup" scoped="" ref="0xb66da470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0xb66da5d0" loc="52:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0xb66da5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb66da7a8"/>
        <function-ref name="noAck" scoped="" ref="0xb66da888"/>
        <function-ref name="wasAcked" scoped="" ref="0xb66da968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb5eb99e8" loc="49:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb5eb99e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5eb9bc0"/>
        <function-ref name="getPayload" scoped="" ref="0xb5eb9ca0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5eb9d80"/>
        <function-ref name="cancel" scoped="" ref="0xb5eb9e60"/>
        <function-ref name="sendDone" scoped="" ref="0xb5eb6010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb5eb6150" loc="50:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb5eb6150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5eb6328"/>
        <function-ref name="payloadLength" scoped="" ref="0xb5eb6408"/>
        <function-ref name="getPayload" scoped="" ref="0xb5eb64e8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5eb65c8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb5eb66a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb5eb67e8" loc="51:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb5eb67e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb5eb69c0"/>
        <function-ref name="source" scoped="" ref="0xb5eb6aa0"/>
        <function-ref name="address" scoped="" ref="0xb5eb6b80"/>
        <function-ref name="destination" scoped="" ref="0xb5eb6c60"/>
        <function-ref name="setSource" scoped="" ref="0xb5eb6d40"/>
        <function-ref name="setDestination" scoped="" ref="0xb5eb6e20"/>
        <function-ref name="type" scoped="" ref="0xb5eb6f00"/>
        <function-ref name="setType" scoped="" ref="0xb5eb5010"/>
        <function-ref name="isForMe" scoped="" ref="0xb5eb50f0"/>
        <function-ref name="setGroup" scoped="" ref="0xb5eb51d0"/>
        <function-ref name="localGroup" scoped="" ref="0xb5eb52b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0xb5eb5410" loc="52:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0xb5eb5410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb5eb55e8"/>
        <function-ref name="noAck" scoped="" ref="0xb5eb56c8"/>
        <function-ref name="wasAcked" scoped="" ref="0xb5eb57a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb5eaf060" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb5eaf060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5eaf238"/>
        <function-ref name="getPayload" scoped="" ref="0xb5eaf318"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5eaf3f8"/>
        <function-ref name="cancel" scoped="" ref="0xb5eaf4d8"/>
        <function-ref name="sendDone" scoped="" ref="0xb5eaf5b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0xb5eaf728" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb5eaf728"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5eaf900"/>
        <function-ref name="getPayload" scoped="" ref="0xb5eaf9e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5eafac0"/>
        <function-ref name="cancel" scoped="" ref="0xb5eafba0"/>
        <function-ref name="sendDone" scoped="" ref="0xb5eafc80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb5eafdc0" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb5eafdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb5eae010"/>
        <function-ref name="source" scoped="" ref="0xb5eae0f0"/>
        <function-ref name="address" scoped="" ref="0xb5eae1d0"/>
        <function-ref name="destination" scoped="" ref="0xb5eae2b0"/>
        <function-ref name="setSource" scoped="" ref="0xb5eae390"/>
        <function-ref name="setDestination" scoped="" ref="0xb5eae470"/>
        <function-ref name="type" scoped="" ref="0xb5eae550"/>
        <function-ref name="setType" scoped="" ref="0xb5eae630"/>
        <function-ref name="isForMe" scoped="" ref="0xb5eae710"/>
        <function-ref name="setGroup" scoped="" ref="0xb5eae7f0"/>
        <function-ref name="localGroup" scoped="" ref="0xb5eae8d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6710da0" loc="43:../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6710da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb670d010"/>
        <function-ref name="getPayload" scoped="" ref="0xb670d0f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb670d1d0"/>
        <function-ref name="cancel" scoped="" ref="0xb670d2b0"/>
        <function-ref name="sendDone" scoped="" ref="0xb670d390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0xb66e43d8" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb66e43d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb66e45c0"/>
        <function-ref name="getPayload" scoped="" ref="0xb66e46a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb66e4780"/>
        <function-ref name="cancel" scoped="" ref="0xb66e4860"/>
        <function-ref name="sendDone" scoped="" ref="0xb66e4940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb670bbe0" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb670bbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb670bdc8"/>
        <function-ref name="getPayload" scoped="" ref="0xb670bea8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb66e4010"/>
        <function-ref name="cancel" scoped="" ref="0xb66e40f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb66e41d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0xb66e3690" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb66e3690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb66e3868"/>
        <function-ref name="payloadLength" scoped="" ref="0xb66e3948"/>
        <function-ref name="getPayload" scoped="" ref="0xb66e3a28"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb66e3b08"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb66e3be8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0xb66e3d68" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0xb66e3d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb66e1010"/>
        <function-ref name="runTask" scoped="" ref="0xb66e10f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0xb66e1270" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0xb66e1270"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb66e1448"/>
        <function-ref name="runTask" scoped="" ref="0xb66e1528"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb66e4a80" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb66e4a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb66e4c58"/>
        <function-ref name="source" scoped="" ref="0xb66e4d38"/>
        <function-ref name="address" scoped="" ref="0xb66e4e18"/>
        <function-ref name="destination" scoped="" ref="0xb66e4ef8"/>
        <function-ref name="setSource" scoped="" ref="0xb66e3010"/>
        <function-ref name="setDestination" scoped="" ref="0xb66e30f0"/>
        <function-ref name="type" scoped="" ref="0xb66e31d0"/>
        <function-ref name="setType" scoped="" ref="0xb66e32b0"/>
        <function-ref name="isForMe" scoped="" ref="0xb66e3390"/>
        <function-ref name="setGroup" scoped="" ref="0xb66e3470"/>
        <function-ref name="localGroup" scoped="" ref="0xb66e3550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb66d7348" loc="46:../../tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb66d7348"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb66d7520"/>
        <function-ref name="payloadLength" scoped="" ref="0xb66d7600"/>
        <function-ref name="getPayload" scoped="" ref="0xb66d76e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb66d77c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb66d78a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb66d7030" loc="45:../../tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb66d7030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb66d7208"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb66d79e0" loc="47:../../tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb66d79e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb66d7bb8"/>
        <function-ref name="source" scoped="" ref="0xb66d7c98"/>
        <function-ref name="address" scoped="" ref="0xb66d7d78"/>
        <function-ref name="destination" scoped="" ref="0xb66d7e58"/>
        <function-ref name="setSource" scoped="" ref="0xb66d3010"/>
        <function-ref name="setDestination" scoped="" ref="0xb66d30f0"/>
        <function-ref name="type" scoped="" ref="0xb66d31d0"/>
        <function-ref name="setType" scoped="" ref="0xb66d32b0"/>
        <function-ref name="isForMe" scoped="" ref="0xb66d3390"/>
        <function-ref name="setGroup" scoped="" ref="0xb66d3470"/>
        <function-ref name="localGroup" scoped="" ref="0xb66d3550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb66d1d40" loc="47:../../tos/system/AMSnooperC.nc">
      <component-ref qname="CtpP.AMSnooperC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb66d1d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb66d1f18"/>
        <function-ref name="payloadLength" scoped="" ref="0xb66d0010"/>
        <function-ref name="getPayload" scoped="" ref="0xb66d00f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb66d01d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb66d02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb66d1a28" loc="46:../../tos/system/AMSnooperC.nc">
      <component-ref qname="CtpP.AMSnooperC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb66d1a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb66d1c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb66d03f0" loc="48:../../tos/system/AMSnooperC.nc">
      <component-ref qname="CtpP.AMSnooperC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb66d03f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb66d05c8"/>
        <function-ref name="source" scoped="" ref="0xb66d06a8"/>
        <function-ref name="address" scoped="" ref="0xb66d0788"/>
        <function-ref name="destination" scoped="" ref="0xb66d0868"/>
        <function-ref name="setSource" scoped="" ref="0xb66d0948"/>
        <function-ref name="setDestination" scoped="" ref="0xb66d0a28"/>
        <function-ref name="type" scoped="" ref="0xb66d0b08"/>
        <function-ref name="setType" scoped="" ref="0xb66d0be8"/>
        <function-ref name="isForMe" scoped="" ref="0xb66d0cc8"/>
        <function-ref name="setGroup" scoped="" ref="0xb66d0da8"/>
        <function-ref name="localGroup" scoped="" ref="0xb66d0e88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RootControl" ref="0xb6639608" loc="110:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0xb6639608"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0xb66397e0"/>
        <function-ref name="setRoot" scoped="" ref="0xb66398c0"/>
        <function-ref name="unsetRoot" scoped="" ref="0xb66399a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateRouteTask" ref="0xb662d9c0" loc="269:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateRouteTask" scoped="" ref="0xb662d9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb662db98"/>
        <function-ref name="runTask" scoped="" ref="0xb662dc78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionDebug" ref="0xb662f6f8" loc="125:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0xb662f6f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0xb662f8d0"/>
        <function-ref name="logEventMsg" scoped="" ref="0xb662f9b0"/>
        <function-ref name="logEventSimple" scoped="" ref="0xb662fa90"/>
        <function-ref name="logEventRoute" scoped="" ref="0xb662fb70"/>
        <function-ref name="logEventDbg" scoped="" ref="0xb662fc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LinkEstimator" ref="0xb6636220" loc="119:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkEstimator" scoped="" ref="0xb6636220"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkEstimator"/>
      </instance>
      <interface-functions>
        <function-ref name="txAck" scoped="" ref="0xb66363f8"/>
        <function-ref name="pinNeighbor" scoped="" ref="0xb66364d8"/>
        <function-ref name="txNoAck" scoped="" ref="0xb66365b8"/>
        <function-ref name="insertNeighbor" scoped="" ref="0xb6636698"/>
        <function-ref name="evicted" scoped="" ref="0xb6636778"/>
        <function-ref name="clearDLQ" scoped="" ref="0xb6636858"/>
        <function-ref name="unpinNeighbor" scoped="" ref="0xb6636938"/>
        <function-ref name="getLinkQuality" scoped="" ref="0xb6636a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpRoutingPacket" ref="0xb6638b68" loc="113:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpRoutingPacket" scoped="" ref="0xb6638b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpRoutingPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clearOptions" scoped="" ref="0xb6638d40"/>
        <function-ref name="setEtx" scoped="" ref="0xb6638e20"/>
        <function-ref name="clearOption" scoped="" ref="0xb6638f00"/>
        <function-ref name="getEtx" scoped="" ref="0xb6637010"/>
        <function-ref name="setOption" scoped="" ref="0xb66370f0"/>
        <function-ref name="setParent" scoped="" ref="0xb66371d0"/>
        <function-ref name="getParent" scoped="" ref="0xb66372b0"/>
        <function-ref name="getOption" scoped="" ref="0xb6637390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0xb6635790" loc="121:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0xb6635790"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6635968"/>
        <function-ref name="stopDone" scoped="" ref="0xb6635a48"/>
        <function-ref name="start" scoped="" ref="0xb6635b28"/>
        <function-ref name="stop" scoped="" ref="0xb6635c08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0xb662f300" loc="124:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0xb662f300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0xb662f4d8"/>
        <function-ref name="rand32" scoped="" ref="0xb662f5b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpInfo" ref="0xb6639ae0" loc="111:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpInfo" scoped="" ref="0xb6639ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getNeighborLinkQuality" scoped="" ref="0xb6639cb8"/>
        <function-ref name="recomputeRoutes" scoped="" ref="0xb6639d98"/>
        <function-ref name="numNeighbors" scoped="" ref="0xb6639e78"/>
        <function-ref name="triggerRouteUpdate" scoped="" ref="0xb6638010"/>
        <function-ref name="getEtx" scoped="" ref="0xb66380f0"/>
        <function-ref name="triggerImmediateRouteUpdate" scoped="" ref="0xb66381d0"/>
        <function-ref name="setNeighborCongested" scoped="" ref="0xb66382b0"/>
        <function-ref name="getNeighborAddr" scoped="" ref="0xb6638390"/>
        <function-ref name="getParent" scoped="" ref="0xb6638470"/>
        <function-ref name="getNeighborRouteQuality" scoped="" ref="0xb6638550"/>
        <function-ref name="isNeighborCongested" scoped="" ref="0xb6638630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendBeaconTask" ref="0xb662d588" loc="388:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendBeaconTask" scoped="" ref="0xb662d588"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb662d760"/>
        <function-ref name="runTask" scoped="" ref="0xb662d840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb66374d0" loc="114:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb66374d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb66376a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BeaconSend" ref="0xb6637838" loc="117:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BeaconSend" scoped="" ref="0xb6637838"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6637a10"/>
        <function-ref name="getPayload" scoped="" ref="0xb6637af0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6637bd0"/>
        <function-ref name="cancel" scoped="" ref="0xb6637cb0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6637d90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BeaconTimer" ref="0xb6635df8" loc="122:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BeaconTimer" scoped="" ref="0xb6635df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6633900"/>
        <function-ref name="fired" scoped="" ref="0xb6634ba0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb66332c0"/>
        <function-ref name="isOneShot" scoped="" ref="0xb6633068"/>
        <function-ref name="getdt" scoped="" ref="0xb6633db0"/>
        <function-ref name="gett0" scoped="" ref="0xb6633b58"/>
        <function-ref name="isRunning" scoped="" ref="0xb6634df8"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb6634448"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb66335e0"/>
        <function-ref name="startOneShot" scoped="" ref="0xb66346c8"/>
        <function-ref name="stop" scoped="" ref="0xb6634948"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RouteTimer" ref="0xb66310c0" loc="123:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RouteTimer" scoped="" ref="0xb66310c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6630c20"/>
        <function-ref name="fired" scoped="" ref="0xb6631ec0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb66305e0"/>
        <function-ref name="isOneShot" scoped="" ref="0xb6630388"/>
        <function-ref name="getdt" scoped="" ref="0xb662f0f0"/>
        <function-ref name="gett0" scoped="" ref="0xb6630e78"/>
        <function-ref name="isRunning" scoped="" ref="0xb6630130"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb6631768"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb6630900"/>
        <function-ref name="startOneShot" scoped="" ref="0xb66319e8"/>
        <function-ref name="stop" scoped="" ref="0xb6631c68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CtpCongestion" ref="0xb662fd90" loc="126:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpCongestion" scoped="" ref="0xb662fd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpCongestion"/>
      </instance>
      <interface-functions>
        <function-ref name="isCongested" scoped="" ref="0xb662d010"/>
        <function-ref name="setClientCongested" scoped="" ref="0xb662d0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareBit" ref="0xb662d230" loc="128:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareBit" scoped="" ref="0xb662d230"/></type-interface>
      <instance>
        <interfacedef-ref qname="CompareBit"/>
      </instance>
      <interface-functions>
        <function-ref name="shouldInsert" scoped="" ref="0xb662d408"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BeaconReceive" ref="0xb6637ef0" loc="118:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BeaconReceive" scoped="" ref="0xb6637ef0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb66360e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb6636b58" loc="120:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb6636b58"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6636d30"/>
        <function-ref name="source" scoped="" ref="0xb6636e10"/>
        <function-ref name="address" scoped="" ref="0xb6636ef0"/>
        <function-ref name="destination" scoped="" ref="0xb6635010"/>
        <function-ref name="setSource" scoped="" ref="0xb66350f0"/>
        <function-ref name="setDestination" scoped="" ref="0xb66351d0"/>
        <function-ref name="type" scoped="" ref="0xb66352b0"/>
        <function-ref name="setType" scoped="" ref="0xb6635390"/>
        <function-ref name="isForMe" scoped="" ref="0xb6635470"/>
        <function-ref name="setGroup" scoped="" ref="0xb6635550"/>
        <function-ref name="localGroup" scoped="" ref="0xb6635630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb6638770" loc="112:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb6638770"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6638948"/>
        <function-ref name="stop" scoped="" ref="0xb6638a28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Routing" ref="0xb6639050" loc="109:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Routing" scoped="" ref="0xb6639050"/></type-interface>
      <instance>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
      </instance>
      <interface-functions>
        <function-ref name="hasRoute" scoped="" ref="0xb6639228"/>
        <function-ref name="routeFound" scoped="" ref="0xb6639308"/>
        <function-ref name="nextHop" scoped="" ref="0xb66393e8"/>
        <function-ref name="noRoute" scoped="" ref="0xb66394c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb6628d90" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="CtpP.RetxmitTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb6628d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367340"/>
            <typename><typedef-ref name="TMilli" ref="0xb7367508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb66268a8"/>
        <function-ref name="fired" scoped="" ref="0xb6627b38"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb6626268"/>
        <function-ref name="isOneShot" scoped="" ref="0xb6626010"/>
        <function-ref name="getdt" scoped="" ref="0xb6626d58"/>
        <function-ref name="gett0" scoped="" ref="0xb6626b00"/>
        <function-ref name="isRunning" scoped="" ref="0xb6627d90"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb66273e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb6626588"/>
        <function-ref name="startOneShot" scoped="" ref="0xb6627660"/>
        <function-ref name="stop" scoped="" ref="0xb66278e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb66221f8" loc="49:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.SendControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb66221f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb66223d0"/>
        <function-ref name="getPayload" scoped="" ref="0xb66224b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6622590"/>
        <function-ref name="cancel" scoped="" ref="0xb6622670"/>
        <function-ref name="sendDone" scoped="" ref="0xb6622750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6622890" loc="50:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.SendControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6622890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6622a68"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6622b48"/>
        <function-ref name="getPayload" scoped="" ref="0xb6622c28"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6622d08"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6622de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb6622f28" loc="51:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.SendControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb6622f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6620110"/>
        <function-ref name="source" scoped="" ref="0xb66201f0"/>
        <function-ref name="address" scoped="" ref="0xb66202d0"/>
        <function-ref name="destination" scoped="" ref="0xb66203b0"/>
        <function-ref name="setSource" scoped="" ref="0xb6620490"/>
        <function-ref name="setDestination" scoped="" ref="0xb6620570"/>
        <function-ref name="type" scoped="" ref="0xb6620650"/>
        <function-ref name="setType" scoped="" ref="0xb6620730"/>
        <function-ref name="isForMe" scoped="" ref="0xb6620810"/>
        <function-ref name="setGroup" scoped="" ref="0xb66208f0"/>
        <function-ref name="localGroup" scoped="" ref="0xb66209d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0xb6620b30" loc="52:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.SendControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0xb6620b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6620d08"/>
        <function-ref name="noAck" scoped="" ref="0xb6620de8"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6620ec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb5e43cf0" loc="49:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.SendControl.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb5e43cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5e43ec8"/>
        <function-ref name="getPayload" scoped="" ref="0xb5e40010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5e400f0"/>
        <function-ref name="cancel" scoped="" ref="0xb5e401d0"/>
        <function-ref name="sendDone" scoped="" ref="0xb5e402b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb5e403f0" loc="50:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.SendControl.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb5e403f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5e405c8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb5e406a8"/>
        <function-ref name="getPayload" scoped="" ref="0xb5e40788"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5e40868"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb5e40948"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb5e40a88" loc="51:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.SendControl.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb5e40a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb5e40c60"/>
        <function-ref name="source" scoped="" ref="0xb5e40d40"/>
        <function-ref name="address" scoped="" ref="0xb5e40e20"/>
        <function-ref name="destination" scoped="" ref="0xb5e40f00"/>
        <function-ref name="setSource" scoped="" ref="0xb5e3f010"/>
        <function-ref name="setDestination" scoped="" ref="0xb5e3f0f0"/>
        <function-ref name="type" scoped="" ref="0xb5e3f1d0"/>
        <function-ref name="setType" scoped="" ref="0xb5e3f2b0"/>
        <function-ref name="isForMe" scoped="" ref="0xb5e3f390"/>
        <function-ref name="setGroup" scoped="" ref="0xb5e3f470"/>
        <function-ref name="localGroup" scoped="" ref="0xb5e3f550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0xb5e3f6b0" loc="52:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.SendControl.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0xb5e3f6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb5e3f888"/>
        <function-ref name="noAck" scoped="" ref="0xb5e3f968"/>
        <function-ref name="wasAcked" scoped="" ref="0xb5e3fa48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb5e3a3d0" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.SendControl.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb5e3a3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5e3a5a8"/>
        <function-ref name="getPayload" scoped="" ref="0xb5e3a688"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5e3a768"/>
        <function-ref name="cancel" scoped="" ref="0xb5e3a848"/>
        <function-ref name="sendDone" scoped="" ref="0xb5e3a928"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0xb5e3aa98" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.SendControl.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb5e3aa98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5e3ac70"/>
        <function-ref name="getPayload" scoped="" ref="0xb5e3ad50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5e3ae30"/>
        <function-ref name="cancel" scoped="" ref="0xb5e3af10"/>
        <function-ref name="sendDone" scoped="" ref="0xb5e38010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb5e38150" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.SendControl.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb5e38150"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb5e38328"/>
        <function-ref name="source" scoped="" ref="0xb5e38408"/>
        <function-ref name="address" scoped="" ref="0xb5e384e8"/>
        <function-ref name="destination" scoped="" ref="0xb5e385c8"/>
        <function-ref name="setSource" scoped="" ref="0xb5e386a8"/>
        <function-ref name="setDestination" scoped="" ref="0xb5e38788"/>
        <function-ref name="type" scoped="" ref="0xb5e38868"/>
        <function-ref name="setType" scoped="" ref="0xb5e38948"/>
        <function-ref name="isForMe" scoped="" ref="0xb5e38a28"/>
        <function-ref name="setGroup" scoped="" ref="0xb5e38b08"/>
        <function-ref name="localGroup" scoped="" ref="0xb5e38be8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb661e510" loc="46:../../tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.ReceiveControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb661e510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb661e6e8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb661e7c8"/>
        <function-ref name="getPayload" scoped="" ref="0xb661e8a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb661e988"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb661ea68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb661e1f8" loc="45:../../tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.ReceiveControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb661e1f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb661e3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb661eba8" loc="47:../../tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.ReceiveControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb661eba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb661ed80"/>
        <function-ref name="source" scoped="" ref="0xb661ee60"/>
        <function-ref name="address" scoped="" ref="0xb661d010"/>
        <function-ref name="destination" scoped="" ref="0xb661d0f0"/>
        <function-ref name="setSource" scoped="" ref="0xb661d1d0"/>
        <function-ref name="setDestination" scoped="" ref="0xb661d2b0"/>
        <function-ref name="type" scoped="" ref="0xb661d390"/>
        <function-ref name="setType" scoped="" ref="0xb661d470"/>
        <function-ref name="isForMe" scoped="" ref="0xb661d550"/>
        <function-ref name="setGroup" scoped="" ref="0xb661d630"/>
        <function-ref name="localGroup" scoped="" ref="0xb661d710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb660ad40" loc="46:../../tos/lib/net/ctp/CollectionSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.CollectionSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb660ad40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb660af18"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6609010"/>
        <function-ref name="getPayload" scoped="" ref="0xb66090f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb66091d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb66092b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb660a6a8" loc="45:../../tos/lib/net/ctp/CollectionSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.CollectionSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb660a6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb660a880"/>
        <function-ref name="getPayload" scoped="" ref="0xb660a960"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb660aa40"/>
        <function-ref name="cancel" scoped="" ref="0xb660ab20"/>
        <function-ref name="sendDone" scoped="" ref="0xb660ac00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb5e2bd48" loc="38:../../tos/lib/net/ctp/CollectionSenderP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb5e2bd48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5e2bf20"/>
        <function-ref name="payloadLength" scoped="" ref="0xb5e2a018"/>
        <function-ref name="getPayload" scoped="" ref="0xb5e2a0f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5e2a1d8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb5e2a2b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb5e2b6b0" loc="37:../../tos/lib/net/ctp/CollectionSenderP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb5e2b6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5e2b888"/>
        <function-ref name="getPayload" scoped="" ref="0xb5e2b968"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5e2ba48"/>
        <function-ref name="cancel" scoped="" ref="0xb5e2bb28"/>
        <function-ref name="sendDone" scoped="" ref="0xb5e2bc08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionId" ref="0xb5e29e10" loc="46:../../tos/lib/net/CollectionIdP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP.CollectionIdP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionId" scoped="" ref="0xb5e29e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionId"/>
      </instance>
      <interface-functions>
        <function-ref name="fetch" scoped="" ref="0xb5e27010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6609e68" loc="46:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6609e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb65fc050"/>
        <function-ref name="stopDone" scoped="" ref="0xb65fc130"/>
        <function-ref name="start" scoped="" ref="0xb65fc210"/>
        <function-ref name="stop" scoped="" ref="0xb65fc2f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb65fc750" loc="47:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb65fc750"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb65fc928"/>
        <function-ref name="getPayload" scoped="" ref="0xb65fca08"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65fcae8"/>
        <function-ref name="cancel" scoped="" ref="0xb65fcbc8"/>
        <function-ref name="sendDone" scoped="" ref="0xb65fcca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb65fb478" loc="49:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb65fb478"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb65fb650"/>
        <function-ref name="payloadLength" scoped="" ref="0xb65fb730"/>
        <function-ref name="getPayload" scoped="" ref="0xb65fb810"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65fb8f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb65fb9d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb65fb120" loc="48:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb65fb120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb65fb2f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb65f9d88" loc="53:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb65f9d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb65f8010"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb65f80f0"/>
        <function-ref name="led1On" scoped="" ref="0xb65f81d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb65f82b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb65f8390"/>
        <function-ref name="get" scoped="" ref="0xb65f8470"/>
        <function-ref name="led1Off" scoped="" ref="0xb65f8550"/>
        <function-ref name="led2Off" scoped="" ref="0xb65f88d0"/>
        <function-ref name="set" scoped="" ref="0xb65f8630"/>
        <function-ref name="led0On" scoped="" ref="0xb65f8710"/>
        <function-ref name="led2On" scoped="" ref="0xb65f87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0xb65f9850" loc="51:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb65f9850"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb65f9a28"/>
        <function-ref name="noAck" scoped="" ref="0xb65f9b08"/>
        <function-ref name="wasAcked" scoped="" ref="0xb65f9be8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb65fbb68" loc="50:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb65fbb68"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb65fbd40"/>
        <function-ref name="source" scoped="" ref="0xb65fbe20"/>
        <function-ref name="address" scoped="" ref="0xb65fbf00"/>
        <function-ref name="destination" scoped="" ref="0xb65f9010"/>
        <function-ref name="setSource" scoped="" ref="0xb65f90f0"/>
        <function-ref name="setDestination" scoped="" ref="0xb65f91d0"/>
        <function-ref name="type" scoped="" ref="0xb65f92b0"/>
        <function-ref name="setType" scoped="" ref="0xb65f9390"/>
        <function-ref name="isForMe" scoped="" ref="0xb65f9470"/>
        <function-ref name="setGroup" scoped="" ref="0xb65f9550"/>
        <function-ref name="localGroup" scoped="" ref="0xb65f9630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb65c5360" loc="54:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb65c5360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb65c5538"/>
        <function-ref name="getPayload" scoped="" ref="0xb65c5618"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65c56f8"/>
        <function-ref name="cancel" scoped="" ref="0xb65c57d8"/>
        <function-ref name="sendDone" scoped="" ref="0xb65c58b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb65c5a18" loc="55:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb65c5a18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb65c5bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb65f7108" loc="47:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb65f7108"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb65f72f0"/>
        <function-ref name="getPayload" scoped="" ref="0xb65f73d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65f74b0"/>
        <function-ref name="cancel" scoped="" ref="0xb65f7590"/>
        <function-ref name="sendDone" scoped="" ref="0xb65f7670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb65f6770" loc="50:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb65f6770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb65f6948"/>
        <function-ref name="payloadLength" scoped="" ref="0xb65f6a28"/>
        <function-ref name="getPayload" scoped="" ref="0xb65f6b08"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65f6be8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb65f6cc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb65f7848" loc="48:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb65f7848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb65f7a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0xb65f6e08" loc="51:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb65f6e08"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb65c5010"/>
        <function-ref name="noAck" scoped="" ref="0xb65c50f0"/>
        <function-ref name="wasAcked" scoped="" ref="0xb65c51d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb65f7b70" loc="49:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb65f7b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb65f7d48"/>
        <function-ref name="source" scoped="" ref="0xb65f7e28"/>
        <function-ref name="address" scoped="" ref="0xb65f7f08"/>
        <function-ref name="destination" scoped="" ref="0xb65f6010"/>
        <function-ref name="setSource" scoped="" ref="0xb65f60f0"/>
        <function-ref name="setDestination" scoped="" ref="0xb65f61d0"/>
        <function-ref name="type" scoped="" ref="0xb65f62b0"/>
        <function-ref name="setType" scoped="" ref="0xb65f6390"/>
        <function-ref name="isForMe" scoped="" ref="0xb65f6470"/>
        <function-ref name="setGroup" scoped="" ref="0xb65f6550"/>
        <function-ref name="localGroup" scoped="" ref="0xb65f6630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb65c11d0" loc="50:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb65c11d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb65c13a8"/>
        <function-ref name="stopDone" scoped="" ref="0xb65c1488"/>
        <function-ref name="start" scoped="" ref="0xb65c1568"/>
        <function-ref name="stop" scoped="" ref="0xb65c1648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb65c0100" loc="52:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb65c0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0xb71d9010"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb65c02d8"/>
        <function-ref name="getPayload" scoped="" ref="0xb65c03b8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65c0498"/>
        <function-ref name="cancel" scoped="" ref="0xb65c0578"/>
        <function-ref name="sendDone" scoped="" ref="0xb65c0658"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb65c4df0" loc="49:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb65c4df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb65c1010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb65c1a90" loc="51:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb65c1a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0xb71d9010"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb65c1c68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb65bbca8" loc="56:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb65bbca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb65bbe80"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb65bf010"/>
        <function-ref name="led1On" scoped="" ref="0xb65bf0f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb65bf1d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb65bf2b0"/>
        <function-ref name="get" scoped="" ref="0xb65bf390"/>
        <function-ref name="led1Off" scoped="" ref="0xb65bf470"/>
        <function-ref name="led2Off" scoped="" ref="0xb65bf7f0"/>
        <function-ref name="set" scoped="" ref="0xb65bf550"/>
        <function-ref name="led0On" scoped="" ref="0xb65bf630"/>
        <function-ref name="led2On" scoped="" ref="0xb65bf710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0xb65bb7a0" loc="55:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0xb65bb7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0xb71d9010"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0xb65bb978"/>
        <function-ref name="offset" scoped="" ref="0xb65bba58"/>
        <function-ref name="dataLinkLength" scoped="" ref="0xb65bbb38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb65a9280" loc="66:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb65a9280"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb65a9458"/>
        <function-ref name="stopDone" scoped="" ref="0xb65a9538"/>
        <function-ref name="start" scoped="" ref="0xb65a9618"/>
        <function-ref name="stop" scoped="" ref="0xb65a96f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0xb656f1e0" loc="332:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0xb656f1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb656f3b8"/>
        <function-ref name="runTask" scoped="" ref="0xb656f498"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0xb65a2260" loc="74:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0xb65a2260"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb65a2438"/>
        <function-ref name="stop" scoped="" ref="0xb65a2518"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0xb658f518" loc="191:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0xb658f518"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb658f6f0"/>
        <function-ref name="runTask" scoped="" ref="0xb658f7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb65abec0" loc="65:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb65abec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb65a90c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0xb659c220" loc="75:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0xb659c220"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0xb659c3f8"/>
        <function-ref name="flush" scoped="" ref="0xb659c4d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0xb6571970" loc="322:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0xb6571970"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6571b48"/>
        <function-ref name="runTask" scoped="" ref="0xb6571c28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0xb659fc10" loc="72:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0xb659fc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0xb659fde8"/>
        <function-ref name="resetSend" scoped="" ref="0xb659fec8"/>
        <function-ref name="dataReceived" scoped="" ref="0xb65a4010"/>
        <function-ref name="resetReceive" scoped="" ref="0xb65a40f0"/>
        <function-ref name="putData" scoped="" ref="0xb65a41d0"/>
        <function-ref name="putDone" scoped="" ref="0xb65a42b0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0xb65a4390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb65a4500" loc="73:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb65a4500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb65a46d8"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb65a47b8"/>
        <function-ref name="led1On" scoped="" ref="0xb65a4898"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb65a4978"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb65a4a58"/>
        <function-ref name="get" scoped="" ref="0xb65a4b38"/>
        <function-ref name="led1Off" scoped="" ref="0xb65a4c18"/>
        <function-ref name="led2Off" scoped="" ref="0xb65a2010"/>
        <function-ref name="set" scoped="" ref="0xb65a4cf8"/>
        <function-ref name="led0On" scoped="" ref="0xb65a4dd8"/>
        <function-ref name="led2On" scoped="" ref="0xb65a4eb8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0xb656ee08" loc="341:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0xb656ee08"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb656c010"/>
        <function-ref name="runTask" scoped="" ref="0xb656c0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0xb65a5960" loc="67:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0xb65a5960"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0xb65a5b38"/>
        <function-ref name="nextByte" scoped="" ref="0xb65a5c18"/>
        <function-ref name="startSend" scoped="" ref="0xb65a5cf8"/>
        <function-ref name="sendCompleted" scoped="" ref="0xb65a5dd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0xb65a3a80" loc="68:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0xb65a3a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0xb65a3c58"/>
        <function-ref name="byteReceived" scoped="" ref="0xb65a3d38"/>
        <function-ref name="endPacket" scoped="" ref="0xb65a3e18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0xb64fa030" loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0xb64fa030"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb64fa208"/>
        <function-ref name="runTask" scoped="" ref="0xb64fa2e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb64fdc60" loc="51:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb64fdc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0xb71d9010"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb64fde48"/>
        <function-ref name="getPayload" scoped="" ref="0xb64fdf28"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb64fc018"/>
        <function-ref name="cancel" scoped="" ref="0xb64fc0f8"/>
        <function-ref name="sendDone" scoped="" ref="0xb64fc1d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0xb64fa468" loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0xb64fa468"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb64fa640"/>
        <function-ref name="runTask" scoped="" ref="0xb64fa720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb64fd8a0" loc="50:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb64fd8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0xb71d9010"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb64fda88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0xb64fc400" loc="54:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0xb64fc400"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0xb71d9010"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0xb64fc5e8"/>
        <function-ref name="offset" scoped="" ref="0xb64fc6c8"/>
        <function-ref name="dataLinkLength" scoped="" ref="0xb64fc7a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb64fb3f0" loc="57:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb64fb3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb64fb5c8"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb64fb6a8"/>
        <function-ref name="led1On" scoped="" ref="0xb64fb788"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb64fb868"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb64fb948"/>
        <function-ref name="get" scoped="" ref="0xb64fba28"/>
        <function-ref name="led1Off" scoped="" ref="0xb64fbb08"/>
        <function-ref name="led2On" scoped="" ref="0xb64fbe88"/>
        <function-ref name="set" scoped="" ref="0xb64fbcc8"/>
        <function-ref name="led2Off" scoped="" ref="0xb64fbbe8"/>
        <function-ref name="led0On" scoped="" ref="0xb64fbda8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0xb64fcdc0" loc="56:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0xb64fcdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0xb64fb010"/>
        <function-ref name="nextByte" scoped="" ref="0xb64fb0f0"/>
        <function-ref name="startSend" scoped="" ref="0xb64fb1d0"/>
        <function-ref name="sendCompleted" scoped="" ref="0xb64fb2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0xb64fc8e8" loc="55:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0xb64fc8e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0xb64fcac0"/>
        <function-ref name="byteReceived" scoped="" ref="0xb64fcba0"/>
        <function-ref name="endPacket" scoped="" ref="0xb64fcc80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0xb64efb80" loc="50:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0xb64efb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb64efd58"/>
        <function-ref name="receivedByte" scoped="" ref="0xb64efe38"/>
        <function-ref name="receive" scoped="" ref="0xb64eff18"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0xb64f5010"/>
        <function-ref name="receiveDone" scoped="" ref="0xb64f50f0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0xb64f51d0"/>
        <function-ref name="sendDone" scoped="" ref="0xb64f52b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0xb64f9858" loc="48:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0xb64f9858"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0xb64f9a30"/>
        <function-ref name="resetSend" scoped="" ref="0xb64f9b10"/>
        <function-ref name="dataReceived" scoped="" ref="0xb64f9bf0"/>
        <function-ref name="resetReceive" scoped="" ref="0xb64f9cd0"/>
        <function-ref name="putData" scoped="" ref="0xb64f9db0"/>
        <function-ref name="putDone" scoped="" ref="0xb64f9e90"/>
        <function-ref name="delimiterReceived" scoped="" ref="0xb64f6010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb64f5420" loc="51:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb64f5420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb64f55f8"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb64f56d8"/>
        <function-ref name="led1On" scoped="" ref="0xb64f57b8"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb64f5898"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb64f5978"/>
        <function-ref name="get" scoped="" ref="0xb64f5a58"/>
        <function-ref name="led1Off" scoped="" ref="0xb64f5b38"/>
        <function-ref name="led2Off" scoped="" ref="0xb64f5eb8"/>
        <function-ref name="set" scoped="" ref="0xb64f5c18"/>
        <function-ref name="led0On" scoped="" ref="0xb64f5cf8"/>
        <function-ref name="led2On" scoped="" ref="0xb64f5dd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0xb64dc6e8" loc="42:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0xb64dc6e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb64dc8c0"/>
        <function-ref name="receive" scoped="" ref="0xb64dc9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0xb64f8860" loc="41:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0xb64f8860"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb64f8a38"/>
        <function-ref name="receivedByte" scoped="" ref="0xb64f8b18"/>
        <function-ref name="receive" scoped="" ref="0xb64f8bf8"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0xb64f8cd8"/>
        <function-ref name="receiveDone" scoped="" ref="0xb64f8db8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0xb64f8e98"/>
        <function-ref name="sendDone" scoped="" ref="0xb64df010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb64f83e0" loc="40:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb64f83e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb64f85b8"/>
        <function-ref name="stop" scoped="" ref="0xb64f8698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0xb64db5d8" loc="41:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0xb64db5d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb64db7b0"/>
        <function-ref name="receive" scoped="" ref="0xb64db890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0xb64dba58" loc="42:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0xb64dba58"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb64dbc30"/>
        <function-ref name="receivedByte" scoped="" ref="0xb64dbd10"/>
        <function-ref name="receive" scoped="" ref="0xb64dbdf0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0xb64dbed0"/>
        <function-ref name="receiveDone" scoped="" ref="0xb64da010"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0xb64da0f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb64da1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0xb64da530" loc="43:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb64da530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb64dac80"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb64d81a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb64daef8"/>
        <function-ref name="overflow" scoped="" ref="0xb64d8418"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb64db168" loc="40:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb64db168"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb64db340"/>
        <function-ref name="stop" scoped="" ref="0xb64db420"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0xb64d7e28" loc="50:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0xb64d7e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb64d6050"/>
        <function-ref name="receive" scoped="" ref="0xb64d6130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0xb64d6b28" loc="53:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0xb64d6b28"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb64d6d00"/>
        <function-ref name="stop" scoped="" ref="0xb64d6de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb64d76d8" loc="48:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb64d76d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb64d78b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0xb64d6290" loc="51:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0xb64d6290"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb64d6468"/>
        <function-ref name="receivedByte" scoped="" ref="0xb64d6548"/>
        <function-ref name="receive" scoped="" ref="0xb64d6628"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0xb64d6708"/>
        <function-ref name="receiveDone" scoped="" ref="0xb64d67e8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0xb64d68c8"/>
        <function-ref name="sendDone" scoped="" ref="0xb64d69a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0xb64af0a0" loc="56:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb64af0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb64af7f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb64afce0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb64afa68"/>
        <function-ref name="overflow" scoped="" ref="0xb64ad010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0xb64b0448" loc="55:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0xb64b0448"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0xb64b0620"/>
        <function-ref name="enableRxIntr" scoped="" ref="0xb64b0700"/>
        <function-ref name="rxDone" scoped="" ref="0xb64b07e0"/>
        <function-ref name="txDone" scoped="" ref="0xb64b08c0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0xb64b09a0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0xb64b0a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0xb64b0b60"/>
        <function-ref name="isRxEmpty" scoped="" ref="0xb64b0c40"/>
        <function-ref name="tx" scoped="" ref="0xb64b0d20"/>
        <function-ref name="rx" scoped="" ref="0xb64b0e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb64d7a10" loc="49:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb64d7a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb64d7be8"/>
        <function-ref name="stop" scoped="" ref="0xb64d7cc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0xb64b0010" loc="54:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0xb64b0010"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb64b01e8"/>
        <function-ref name="stop" scoped="" ref="0xb64b02c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0xb649b508" loc="49:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0xb649b508"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0xb649b6e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0xb649b7c0"/>
        <function-ref name="rxDone" scoped="" ref="0xb649b8a0"/>
        <function-ref name="txDone" scoped="" ref="0xb649b980"/>
        <function-ref name="enableTxIntr" scoped="" ref="0xb649ba60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0xb649bb40"/>
        <function-ref name="disableRxIntr" scoped="" ref="0xb649bc20"/>
        <function-ref name="isRxEmpty" scoped="" ref="0xb649bd00"/>
        <function-ref name="tx" scoped="" ref="0xb649bde0"/>
        <function-ref name="rx" scoped="" ref="0xb649bec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0xb649ab80" loc="53:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0xb649ab80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0xb649ad58"/>
        <function-ref name="enableRxIntr" scoped="" ref="0xb649ae38"/>
        <function-ref name="rxDone" scoped="" ref="0xb649af18"/>
        <function-ref name="txDone" scoped="" ref="0xb6499010"/>
        <function-ref name="enableTxIntr" scoped="" ref="0xb64990f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0xb64991d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0xb64992b0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0xb6499390"/>
        <function-ref name="tx" scoped="" ref="0xb6499470"/>
        <function-ref name="rx" scoped="" ref="0xb6499550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0xb649b010" loc="48:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0xb649b010"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb649b1e8"/>
        <function-ref name="stop" scoped="" ref="0xb649b2c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0xb649a178" loc="51:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0xb649a178"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb649a350"/>
        <function-ref name="stop" scoped="" ref="0xb649a430"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0xb649a688" loc="52:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0xb649a688"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb649a860"/>
        <function-ref name="stop" scoped="" ref="0xb649a940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0xb649ca80" loc="47:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0xb649ca80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb649cc58"/>
        <function-ref name="stop" scoped="" ref="0xb649cd38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0xb6499d70" loc="114:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0xb6499d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6496010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0xb6496cd0" loc="117:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0xb6496cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0xb6496ea8"/>
        <function-ref name="enableRxIntr" scoped="" ref="0xb6495010"/>
        <function-ref name="rxDone" scoped="" ref="0xb64950f0"/>
        <function-ref name="txDone" scoped="" ref="0xb64951d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0xb64952b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0xb6495390"/>
        <function-ref name="disableRxIntr" scoped="" ref="0xb6495470"/>
        <function-ref name="isRxEmpty" scoped="" ref="0xb6495550"/>
        <function-ref name="tx" scoped="" ref="0xb6495630"/>
        <function-ref name="rx" scoped="" ref="0xb6495710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0xb6495920" loc="119:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0xb6495920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6495af8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0xb6494880" loc="122:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0xb6494880"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0xb6494a58"/>
        <function-ref name="enableRxIntr" scoped="" ref="0xb6494b38"/>
        <function-ref name="rxDone" scoped="" ref="0xb6494c18"/>
        <function-ref name="txDone" scoped="" ref="0xb6494cf8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0xb6494dd8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0xb6494eb8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0xb6493010"/>
        <function-ref name="isRxEmpty" scoped="" ref="0xb64930f0"/>
        <function-ref name="tx" scoped="" ref="0xb64931d0"/>
        <function-ref name="rx" scoped="" ref="0xb64932b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0xb64967b8" loc="116:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0xb64967b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6496990"/>
        <function-ref name="stop" scoped="" ref="0xb6496a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0xb6495d70" loc="120:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0xb6495d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6494010"/>
        <function-ref name="stop" scoped="" ref="0xb64940f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0xb6494368" loc="121:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0xb6494368"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6494540"/>
        <function-ref name="stop" scoped="" ref="0xb6494620"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0xb64934a8" loc="124:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0xb64934a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0xb6493680"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0xb6493760"/>
        <function-ref name="calibrateMicro" scoped="" ref="0xb6493840"/>
        <function-ref name="actualMicro" scoped="" ref="0xb6493920"/>
        <function-ref name="adcPrescaler" scoped="" ref="0xb6493a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0xb6493be8" loc="125:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0xb6493be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0xb6493dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0xb6496288" loc="115:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0xb6496288"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6496460"/>
        <function-ref name="stop" scoped="" ref="0xb6496540"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb64dd868" loc="24:../../tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb64dd868"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb645d010"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb645d500"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb645d288"/>
        <function-ref name="overflow" scoped="" ref="0xb645d778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb645a3c0" loc="24:../../tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb645a3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TThree" ref="0xb733d010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb645ab10"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb6459010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb645ad88"/>
        <function-ref name="overflow" scoped="" ref="0xb6459288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0xb6452010" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb6452010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0xb64521e8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb64522c8"/>
        <function-ref name="getControlA" scoped="" ref="0xb64523a8"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb6452488"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb6452568"/>
        <function-ref name="setControlB" scoped="" ref="0xb6452648"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb6452728"/>
        <function-ref name="getControlB" scoped="" ref="0xb6452808"/>
        <function-ref name="setControlC" scoped="" ref="0xb64528e8"/>
        <function-ref name="setControlA" scoped="" ref="0xb64529c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0xb6452d00" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0xb6452d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0xb644f7b0"/>
        <function-ref name="test" scoped="" ref="0xb644f2c0"/>
        <function-ref name="get" scoped="" ref="0xb6451370"/>
        <function-ref name="captured" scoped="" ref="0xb6451888"/>
        <function-ref name="reset" scoped="" ref="0xb6451b28"/>
        <function-ref name="isOn" scoped="" ref="0xb644f538"/>
        <function-ref name="set" scoped="" ref="0xb64515e8"/>
        <function-ref name="start" scoped="" ref="0xb6451da0"/>
        <function-ref name="stop" scoped="" ref="0xb644f048"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0xb644fec0" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0xb644fec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb644d428"/>
        <function-ref name="fired" scoped="" ref="0xb644ea38"/>
        <function-ref name="get" scoped="" ref="0xb644e520"/>
        <function-ref name="reset" scoped="" ref="0xb644ecb0"/>
        <function-ref name="isOn" scoped="" ref="0xb644d6a0"/>
        <function-ref name="set" scoped="" ref="0xb644e798"/>
        <function-ref name="start" scoped="" ref="0xb644ef28"/>
        <function-ref name="stop" scoped="" ref="0xb644d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb6459d10" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb6459d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb6453778"/>
        <function-ref name="test" scoped="" ref="0xb6453288"/>
        <function-ref name="get" scoped="" ref="0xb6454370"/>
        <function-ref name="setScale" scoped="" ref="0xb64539f0"/>
        <function-ref name="getScale" scoped="" ref="0xb6453c90"/>
        <function-ref name="reset" scoped="" ref="0xb6454b00"/>
        <function-ref name="overflow" scoped="" ref="0xb6454888"/>
        <function-ref name="isOn" scoped="" ref="0xb6453500"/>
        <function-ref name="set" scoped="" ref="0xb64545e8"/>
        <function-ref name="start" scoped="" ref="0xb6454d78"/>
        <function-ref name="stop" scoped="" ref="0xb6453010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0xb6447648" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb6447648"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0xb6447820"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb6447900"/>
        <function-ref name="getControlA" scoped="" ref="0xb64479e0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb6447ac0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb6447ba0"/>
        <function-ref name="setControlB" scoped="" ref="0xb6447c80"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb6447d60"/>
        <function-ref name="getControlB" scoped="" ref="0xb6447e40"/>
        <function-ref name="setControlC" scoped="" ref="0xb6447f20"/>
        <function-ref name="setControlA" scoped="" ref="0xb6446018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0xb6443268" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0xb6443268"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb64427d0"/>
        <function-ref name="fired" scoped="" ref="0xb6443dc8"/>
        <function-ref name="get" scoped="" ref="0xb64438b0"/>
        <function-ref name="reset" scoped="" ref="0xb6442068"/>
        <function-ref name="isOn" scoped="" ref="0xb6442a48"/>
        <function-ref name="set" scoped="" ref="0xb6443b28"/>
        <function-ref name="start" scoped="" ref="0xb64422e0"/>
        <function-ref name="stop" scoped="" ref="0xb6442558"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0xb6446350" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0xb6446350"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0xb6444dc8"/>
        <function-ref name="test" scoped="" ref="0xb64448d8"/>
        <function-ref name="get" scoped="" ref="0xb6446998"/>
        <function-ref name="captured" scoped="" ref="0xb6446eb0"/>
        <function-ref name="reset" scoped="" ref="0xb6444170"/>
        <function-ref name="isOn" scoped="" ref="0xb6444b50"/>
        <function-ref name="set" scoped="" ref="0xb6446c10"/>
        <function-ref name="start" scoped="" ref="0xb64443e8"/>
        <function-ref name="stop" scoped="" ref="0xb6444660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0xb6442e60" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0xb6442e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb643f3e8"/>
        <function-ref name="fired" scoped="" ref="0xb64409f0"/>
        <function-ref name="get" scoped="" ref="0xb64404d8"/>
        <function-ref name="reset" scoped="" ref="0xb6440c68"/>
        <function-ref name="isOn" scoped="" ref="0xb643f660"/>
        <function-ref name="set" scoped="" ref="0xb6440750"/>
        <function-ref name="start" scoped="" ref="0xb6440ee0"/>
        <function-ref name="stop" scoped="" ref="0xb643f170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0xb643fa78" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0xb643fa78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb643d010"/>
        <function-ref name="fired" scoped="" ref="0xb643e5f0"/>
        <function-ref name="get" scoped="" ref="0xb643e0d8"/>
        <function-ref name="reset" scoped="" ref="0xb643e868"/>
        <function-ref name="isOn" scoped="" ref="0xb643d288"/>
        <function-ref name="set" scoped="" ref="0xb643e350"/>
        <function-ref name="start" scoped="" ref="0xb643eae0"/>
        <function-ref name="stop" scoped="" ref="0xb643ed58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb6449348" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb6449348"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb6448da8"/>
        <function-ref name="test" scoped="" ref="0xb64488b8"/>
        <function-ref name="get" scoped="" ref="0xb6449990"/>
        <function-ref name="setScale" scoped="" ref="0xb6447048"/>
        <function-ref name="getScale" scoped="" ref="0xb64472e8"/>
        <function-ref name="reset" scoped="" ref="0xb6448150"/>
        <function-ref name="overflow" scoped="" ref="0xb6449ea8"/>
        <function-ref name="isOn" scoped="" ref="0xb6448b30"/>
        <function-ref name="set" scoped="" ref="0xb6449c08"/>
        <function-ref name="start" scoped="" ref="0xb64483c8"/>
        <function-ref name="stop" scoped="" ref="0xb6448640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb63fa670" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb63fa670"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0xb73d05d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0xb73d05d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb63fa848"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb63faa58" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb63faa58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb63f8500"/>
        <function-ref name="test" scoped="" ref="0xb63f8010"/>
        <function-ref name="get" scoped="" ref="0xb63f90b8"/>
        <function-ref name="setScale" scoped="" ref="0xb63f8778"/>
        <function-ref name="getScale" scoped="" ref="0xb63f8a18"/>
        <function-ref name="reset" scoped="" ref="0xb63f9848"/>
        <function-ref name="overflow" scoped="" ref="0xb63f95d0"/>
        <function-ref name="isOn" scoped="" ref="0xb63f8288"/>
        <function-ref name="set" scoped="" ref="0xb63f9330"/>
        <function-ref name="start" scoped="" ref="0xb63f9ac0"/>
        <function-ref name="stop" scoped="" ref="0xb63f9d38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb63fcca8" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb63fcca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TThree" ref="0xb733d010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb63fb410"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb63fb900"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb63fb688"/>
        <function-ref name="overflow" scoped="" ref="0xb63fbb78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb63fbe58" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb63fbe58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb63f38d8"/>
        <function-ref name="test" scoped="" ref="0xb63f33e8"/>
        <function-ref name="get" scoped="" ref="0xb63f54d8"/>
        <function-ref name="setScale" scoped="" ref="0xb63f3b50"/>
        <function-ref name="getScale" scoped="" ref="0xb63f3df0"/>
        <function-ref name="reset" scoped="" ref="0xb63f5c68"/>
        <function-ref name="overflow" scoped="" ref="0xb63f59f0"/>
        <function-ref name="isOn" scoped="" ref="0xb63f3660"/>
        <function-ref name="set" scoped="" ref="0xb63f5750"/>
        <function-ref name="start" scoped="" ref="0xb63f5ee0"/>
        <function-ref name="stop" scoped="" ref="0xb63f3170"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0xb63f0ec8" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0xb63f0ec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TThree" ref="0xb733d010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb63ef680"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb63efb70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb63ef8f8"/>
        <function-ref name="overflow" scoped="" ref="0xb63efde8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb645bc80" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb645bc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb7367dc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb7365010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb63f03f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb63f08e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb63f0668"/>
        <function-ref name="overflow" scoped="" ref="0xb63f0b58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0xb63ec808" loc="47:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0xb63ec808"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0xb63ec9e0"/>
        <function-ref name="offset" scoped="" ref="0xb63ecac0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0xb63ecba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb63e2760" loc="49:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb63e2760"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb63e2938"/>
        <function-ref name="getPayload" scoped="" ref="0xb63e2a18"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb63e2af8"/>
        <function-ref name="cancel" scoped="" ref="0xb63e2bd8"/>
        <function-ref name="sendDone" scoped="" ref="0xb63e2cb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb63e2df8" loc="50:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb63e2df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb63d2010"/>
        <function-ref name="payloadLength" scoped="" ref="0xb63d20f0"/>
        <function-ref name="getPayload" scoped="" ref="0xb63d21d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb63d22b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb63d2390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb63d24d0" loc="51:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb63d24d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb63d26a8"/>
        <function-ref name="source" scoped="" ref="0xb63d2788"/>
        <function-ref name="address" scoped="" ref="0xb63d2868"/>
        <function-ref name="destination" scoped="" ref="0xb63d2948"/>
        <function-ref name="setSource" scoped="" ref="0xb63d2a28"/>
        <function-ref name="setDestination" scoped="" ref="0xb63d2b08"/>
        <function-ref name="type" scoped="" ref="0xb63d2be8"/>
        <function-ref name="setType" scoped="" ref="0xb63d2cc8"/>
        <function-ref name="isForMe" scoped="" ref="0xb63d2da8"/>
        <function-ref name="setGroup" scoped="" ref="0xb63d2e88"/>
        <function-ref name="localGroup" scoped="" ref="0xb63d1010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0xb63d1170" loc="52:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0xb63d1170"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb63d1348"/>
        <function-ref name="noAck" scoped="" ref="0xb63d1428"/>
        <function-ref name="wasAcked" scoped="" ref="0xb63d1508"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb5dca9f8" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb5dca9f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5dcabd0"/>
        <function-ref name="getPayload" scoped="" ref="0xb5dcacb0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5dcad90"/>
        <function-ref name="cancel" scoped="" ref="0xb5dcae70"/>
        <function-ref name="sendDone" scoped="" ref="0xb5dc7010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0xb5dc7180" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb5dc7180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5dc7358"/>
        <function-ref name="getPayload" scoped="" ref="0xb5dc7438"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5dc7518"/>
        <function-ref name="cancel" scoped="" ref="0xb5dc75f8"/>
        <function-ref name="sendDone" scoped="" ref="0xb5dc76d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb5dc7818" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb5dc7818"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb5dc79f0"/>
        <function-ref name="source" scoped="" ref="0xb5dc7ad0"/>
        <function-ref name="address" scoped="" ref="0xb5dc7bb0"/>
        <function-ref name="destination" scoped="" ref="0xb5dc7c90"/>
        <function-ref name="setSource" scoped="" ref="0xb5dc7d70"/>
        <function-ref name="setDestination" scoped="" ref="0xb5dc7e50"/>
        <function-ref name="type" scoped="" ref="0xb5dc6010"/>
        <function-ref name="setType" scoped="" ref="0xb5dc60f0"/>
        <function-ref name="isForMe" scoped="" ref="0xb5dc61d0"/>
        <function-ref name="setGroup" scoped="" ref="0xb5dc62b0"/>
        <function-ref name="localGroup" scoped="" ref="0xb5dc6390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb63dc6d8" loc="44:../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb63dc6d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb63dc8b0"/>
        <function-ref name="getPayload" scoped="" ref="0xb63dc990"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb63dca70"/>
        <function-ref name="cancel" scoped="" ref="0xb63dcb50"/>
        <function-ref name="sendDone" scoped="" ref="0xb63dcc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0xb63d8598" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb63d8598"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb63d8780"/>
        <function-ref name="getPayload" scoped="" ref="0xb63d8860"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb63d8940"/>
        <function-ref name="cancel" scoped="" ref="0xb63d8a20"/>
        <function-ref name="sendDone" scoped="" ref="0xb63d8b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb63d9db8" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb63d9db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb63d8010"/>
        <function-ref name="getPayload" scoped="" ref="0xb63d80f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb63d81d0"/>
        <function-ref name="cancel" scoped="" ref="0xb63d82b0"/>
        <function-ref name="sendDone" scoped="" ref="0xb63d8390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0xb63d7850" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb63d7850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb63d7a28"/>
        <function-ref name="payloadLength" scoped="" ref="0xb63d7b08"/>
        <function-ref name="getPayload" scoped="" ref="0xb63d7be8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb63d7cc8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb63d7da8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0xb63d7f28" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0xb63d7f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb63d6110"/>
        <function-ref name="runTask" scoped="" ref="0xb63d61f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0xb63d6370" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0xb63d6370"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb63d6548"/>
        <function-ref name="runTask" scoped="" ref="0xb63d6628"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb63d8c40" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb63d8c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb63d8e18"/>
        <function-ref name="source" scoped="" ref="0xb63d8ef8"/>
        <function-ref name="address" scoped="" ref="0xb63d7010"/>
        <function-ref name="destination" scoped="" ref="0xb63d70f0"/>
        <function-ref name="setSource" scoped="" ref="0xb63d71d0"/>
        <function-ref name="setDestination" scoped="" ref="0xb63d72b0"/>
        <function-ref name="type" scoped="" ref="0xb63d7390"/>
        <function-ref name="setType" scoped="" ref="0xb63d7470"/>
        <function-ref name="isForMe" scoped="" ref="0xb63d7550"/>
        <function-ref name="setGroup" scoped="" ref="0xb63d7630"/>
        <function-ref name="localGroup" scoped="" ref="0xb63d7710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb63cd540" loc="42:../../tos/system/PoolC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.UARTMessagePoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb63cd540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
            <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb63cc630"/>
        <function-ref name="maxSize" scoped="" ref="0xb63cc048"/>
        <function-ref name="empty" scoped="" ref="0xb63cdb68"/>
        <function-ref name="put" scoped="" ref="0xb63cc2a0"/>
        <function-ref name="size" scoped="" ref="0xb63cddc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb5da0b10" loc="56:../../tos/system/PoolP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.UARTMessagePoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb5da0b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
            <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb5d9fc78"/>
        <function-ref name="maxSize" scoped="" ref="0xb5d9f690"/>
        <function-ref name="empty" scoped="" ref="0xb5d9f1e0"/>
        <function-ref name="put" scoped="" ref="0xb5d9f8e8"/>
        <function-ref name="size" scoped="" ref="0xb5d9f438"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5da0768" loc="55:../../tos/system/PoolP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.UARTMessagePoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5da0768"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5da0940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0xb63cb8a8" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.UARTQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb63cb8a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
              <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0xb63ca858"/>
        <function-ref name="enqueue" scoped="" ref="0xb63c8010"/>
        <function-ref name="element" scoped="" ref="0xb63c8360"/>
        <function-ref name="full" scoped="" ref="0xb63ca150"/>
        <function-ref name="maxSize" scoped="" ref="0xb63ca600"/>
        <function-ref name="dequeue" scoped="" ref="0xb63cabc8"/>
        <function-ref name="empty" scoped="" ref="0xb63cbed0"/>
        <function-ref name="size" scoped="" ref="0xb63ca3a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb63c7bf8" loc="42:../../tos/system/PoolC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugMessagePool"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb63c7bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
            <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb63c6cf0"/>
        <function-ref name="maxSize" scoped="" ref="0xb63c6708"/>
        <function-ref name="empty" scoped="" ref="0xb63c6258"/>
        <function-ref name="put" scoped="" ref="0xb63c6960"/>
        <function-ref name="size" scoped="" ref="0xb63c64b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb5d91f00" loc="56:../../tos/system/PoolP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugMessagePool.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb5d91f00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
            <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb5d8e010"/>
        <function-ref name="maxSize" scoped="" ref="0xb5d90a08"/>
        <function-ref name="empty" scoped="" ref="0xb5d90558"/>
        <function-ref name="put" scoped="" ref="0xb5d90c60"/>
        <function-ref name="size" scoped="" ref="0xb5d907b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5d91b58" loc="55:../../tos/system/PoolP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugMessagePool.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5d91b58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5d91d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0xb63c4f10" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSendQueue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb63c4f10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
              <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0xb63c3eb8"/>
        <function-ref name="enqueue" scoped="" ref="0xb63c25b8"/>
        <function-ref name="element" scoped="" ref="0xb63c2908"/>
        <function-ref name="full" scoped="" ref="0xb63c37b0"/>
        <function-ref name="maxSize" scoped="" ref="0xb63c3c60"/>
        <function-ref name="dequeue" scoped="" ref="0xb63c2248"/>
        <function-ref name="empty" scoped="" ref="0xb63c3558"/>
        <function-ref name="size" scoped="" ref="0xb63c3a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb63c19e0" loc="49:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb63c19e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb63c1bb8"/>
        <function-ref name="getPayload" scoped="" ref="0xb63c1c98"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb63c1d78"/>
        <function-ref name="cancel" scoped="" ref="0xb63c1e58"/>
        <function-ref name="sendDone" scoped="" ref="0xb63bf010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb63bf150" loc="50:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb63bf150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb63bf328"/>
        <function-ref name="payloadLength" scoped="" ref="0xb63bf408"/>
        <function-ref name="getPayload" scoped="" ref="0xb63bf4e8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb63bf5c8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb63bf6a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb63bf7e8" loc="51:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb63bf7e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb63bf9c0"/>
        <function-ref name="source" scoped="" ref="0xb63bfaa0"/>
        <function-ref name="address" scoped="" ref="0xb63bfb80"/>
        <function-ref name="destination" scoped="" ref="0xb63bfc60"/>
        <function-ref name="setSource" scoped="" ref="0xb63bfd40"/>
        <function-ref name="setDestination" scoped="" ref="0xb63bfe20"/>
        <function-ref name="type" scoped="" ref="0xb63bff00"/>
        <function-ref name="setType" scoped="" ref="0xb63be010"/>
        <function-ref name="isForMe" scoped="" ref="0xb63be0f0"/>
        <function-ref name="setGroup" scoped="" ref="0xb63be1d0"/>
        <function-ref name="localGroup" scoped="" ref="0xb63be2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0xb63be410" loc="52:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0xb63be410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb63be5e8"/>
        <function-ref name="noAck" scoped="" ref="0xb63be6c8"/>
        <function-ref name="wasAcked" scoped="" ref="0xb63be7a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb5d82e80" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb5d82e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5d7e070"/>
        <function-ref name="getPayload" scoped="" ref="0xb5d7e150"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5d7e230"/>
        <function-ref name="cancel" scoped="" ref="0xb5d7e310"/>
        <function-ref name="sendDone" scoped="" ref="0xb5d7e3f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0xb5d7e560" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb5d7e560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5d7e738"/>
        <function-ref name="getPayload" scoped="" ref="0xb5d7e818"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5d7e8f8"/>
        <function-ref name="cancel" scoped="" ref="0xb5d7e9d8"/>
        <function-ref name="sendDone" scoped="" ref="0xb5d7eab8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb5d7ebf8" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb5d7ebf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb5d7edd0"/>
        <function-ref name="source" scoped="" ref="0xb5d7eeb0"/>
        <function-ref name="address" scoped="" ref="0xb5d7d010"/>
        <function-ref name="destination" scoped="" ref="0xb5d7d0f0"/>
        <function-ref name="setSource" scoped="" ref="0xb5d7d1d0"/>
        <function-ref name="setDestination" scoped="" ref="0xb5d7d2b0"/>
        <function-ref name="type" scoped="" ref="0xb5d7d390"/>
        <function-ref name="setType" scoped="" ref="0xb5d7d470"/>
        <function-ref name="isForMe" scoped="" ref="0xb5d7d550"/>
        <function-ref name="setGroup" scoped="" ref="0xb5d7d630"/>
        <function-ref name="localGroup" scoped="" ref="0xb5d7d710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionDebug" ref="0xb63bd650" loc="4:../../tos/lib/net/UARTDebugSenderP.nc">
      <component-ref qname="UARTDebugSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0xb63bd650"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0xb63bd828"/>
        <function-ref name="logEventMsg" scoped="" ref="0xb63bd908"/>
        <function-ref name="logEventSimple" scoped="" ref="0xb63bd9e8"/>
        <function-ref name="logEventRoute" scoped="" ref="0xb63bdac8"/>
        <function-ref name="logEventDbg" scoped="" ref="0xb63bdba8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0xb63bdd58" loc="7:../../tos/lib/net/UARTDebugSenderP.nc">
      <component-ref qname="UARTDebugSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0xb63bdd58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0xb63ba010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UARTSend" ref="0xb63b67c0" loc="10:../../tos/lib/net/UARTDebugSenderP.nc">
      <component-ref qname="UARTDebugSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UARTSend" scoped="" ref="0xb63b67c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb63b6998"/>
        <function-ref name="getPayload" scoped="" ref="0xb63b6a78"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb63b6b58"/>
        <function-ref name="cancel" scoped="" ref="0xb63b6c38"/>
        <function-ref name="sendDone" scoped="" ref="0xb63b6d18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendQueue" ref="0xb63b9928" loc="9:../../tos/lib/net/UARTDebugSenderP.nc">
      <component-ref qname="UARTDebugSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendQueue" scoped="" ref="0xb63b9928"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
              <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0xb63b8970"/>
        <function-ref name="enqueue" scoped="" ref="0xb63b6068"/>
        <function-ref name="element" scoped="" ref="0xb63b63b8"/>
        <function-ref name="full" scoped="" ref="0xb63b8268"/>
        <function-ref name="maxSize" scoped="" ref="0xb63b8718"/>
        <function-ref name="dequeue" scoped="" ref="0xb63b8ce0"/>
        <function-ref name="empty" scoped="" ref="0xb63b8010"/>
        <function-ref name="size" scoped="" ref="0xb63b84c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0xb63b1640" loc="36:../../tos/lib/net/UARTDebugSenderP.nc">
      <component-ref qname="UARTDebugSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0xb63b1640"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb63b1818"/>
        <function-ref name="runTask" scoped="" ref="0xb63b18f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MessagePool" ref="0xb63ba300" loc="8:../../tos/lib/net/UARTDebugSenderP.nc">
      <component-ref qname="UARTDebugSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MessagePool" scoped="" ref="0xb63ba300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
            <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb63b93d8"/>
        <function-ref name="maxSize" scoped="" ref="0xb63badd8"/>
        <function-ref name="empty" scoped="" ref="0xb63ba928"/>
        <function-ref name="put" scoped="" ref="0xb63b9048"/>
        <function-ref name="size" scoped="" ref="0xb63bab80"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../tos/interfaces/Init.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0xb7315d70" loc="62:../../tos/interfaces/Init.nc">
        <documentation loc="53:../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0xb7315210" loc="60:../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0xb730c010" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0xb730de48" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0xb730f630" loc="31:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0xb730fc68" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb730fb10" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0xb730d348" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb730d1f0" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0xb730d8a0" loc="53:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0xb7301ce8" loc="44:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0xb73000f8" loc="45:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0xb7301558" loc="42:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0xb73008c8" loc="47:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb7301918" loc="43:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0xb73004d0" loc="46:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb7307df8" loc="40:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0xb73011a8" loc="41:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0xb75149b0" loc="57:../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0xb73b42e8" loc="72:../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0xb7514df0" loc="65:../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0xb73af1a8" loc="67:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0xb73af6c0" loc="75:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:../../tos/interfaces/McuSleep.nc">
      <documentation loc="63:../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0xb733ab80" loc="76:../../tos/interfaces/McuSleep.nc">
        <documentation loc="75:../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0xb7328e30" loc="62:../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0xb7380470"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0xb7328158" loc="52:../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RootControl" loc="40:../../tos/lib/net/RootControl.nc">
      <documentation loc="35:../../tos/lib/net/RootControl.nc">
        <short> Controls whether the current node is a root of the tree&#10;  </short>
        <long> Controls whether the current node is a root of the tree&#10;  @author Rodrigo Fonseca&#10;  @date   $Date: 2006-12-12 18:23:29 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isRoot" ref="0xb71b14b8" loc="43:../../tos/lib/net/RootControl.nc">
        <interfacedef-ref qname="RootControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRoot" ref="0xb71c6cd8" loc="41:../../tos/lib/net/RootControl.nc">
        <interfacedef-ref qname="RootControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="unsetRoot" ref="0xb71b10f8" loc="42:../../tos/lib/net/RootControl.nc">
        <interfacedef-ref qname="RootControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CollectionPacket" loc="42:../../tos/lib/net/CollectionPacket.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0xb71b4da8" loc="50:../../tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71b4a50" loc="50:../../tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="seqno" ref="0xb71b4c48" loc="50:../../tos/lib/net/CollectionPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOrigin" ref="0xb71b51e8" loc="44:../../tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71b7e58" loc="44:../../tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb71b5088" loc="44:../../tos/lib/net/CollectionPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0xb71b4010" loc="47:../../tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71b5ba8" loc="47:../../tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="id" ref="0xb71b5dd0" loc="47:../../tos/lib/net/CollectionPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getOrigin" ref="0xb71b7a58" loc="43:../../tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71b7900" loc="43:../../tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0xb71b4600" loc="49:../../tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71b44a8" loc="49:../../tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getType" ref="0xb71b57c0" loc="46:../../tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71b5668" loc="46:../../tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0xb720f908" loc="113:../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0xb720f7b0" loc="113:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0xb720e730" loc="138:../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0xb720e5d8" loc="138:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb720f0c8" loc="104:../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb720fe18" loc="130:../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../tos/interfaces/AMPacket.nc">
      <function command="" provided="0" name="group" ref="0xb71ca1c0" loc="177:../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0xb72134a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb71ca068" loc="177:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0xb71cfa88" loc="88:../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb71cf930" loc="88:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0xb71d09b8" loc="68:../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0xb71cf088" loc="78:../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb71d0ef8" loc="78:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0xb71cc398" loc="121:../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb71cc030" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb71cc238" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0xb71ce688" loc="103:../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb71ce320" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb71ce528" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0xb71cbb48" loc="147:../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb71cb9f0" loc="147:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0xb71c96c0" loc="162:../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb71c9390" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0xb71c9560" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7213248"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0xb71cb010" loc="136:../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb71ccde0" loc="136:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0xb71cae40" loc="187:../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb72134a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb71caae0" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0xb71cace0" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb72134a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0xb71c7780" loc="195:../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0xb72134a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0xb71c1788" loc="78:../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
              <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71c1240" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0xb71c1420" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb71c1600" loc="78:../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../tos/interfaces/Send.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb71c4010" loc="75:../../tos/interfaces/Send.nc">
        <documentation loc="57:../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7210c88" loc="75:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb7210e68" loc="75:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0xb71c3b78" loc="125:../../tos/interfaces/Send.nc">
        <documentation loc="115:../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71c3818" loc="125:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb71c39f8" loc="125:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb71c32b8" loc="112:../../tos/interfaces/Send.nc">
        <documentation loc="102:../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb71c4c50" loc="89:../../tos/interfaces/Send.nc">
        <documentation loc="77:../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71c4af8" loc="89:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb71c2900" loc="100:../../tos/interfaces/Send.nc">
        <documentation loc="91:../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71c25a8" loc="100:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0xb71c27a0" loc="100:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Pool" loc="50:../../tos/interfaces/Pool.nc">
      <documentation loc="33:../../tos/interfaces/Pool.nc">
        <short>&#10;  An allocation pool of a specific type memory objects.</short>
        <long>&#10;  An allocation pool of a specific type memory objects.&#10;  The Pool allows components to allocate (&#60;code>get&#60;/code>)&#10;  and deallocate (&#60;code>put&#60;/code>) elements. The pool&#10;  does not require that deallocations be items which were&#10;  originally allocated. E.g., a program can create two&#10;  pools of the same type and pass items between them.&#10;  This allows, for example, a component to allocate a pool&#10;  of message buffers and freely buffer swap them on&#10;  Receive.receive events.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0xb71b35a0" loc="50:../../tos/interfaces/Pool.nc">
          <interfacedef-ref qname="Pool"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71b35a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0xb71a72e0" loc="97:../../tos/interfaces/Pool.nc">
        <documentation loc="91:../../tos/interfaces/Pool.nc">
          <short>&#10; Allocate an element from the pool.</short>
          <long>&#10; Allocate an element from the pool.&#10;&#10; @return 't* ONE_NOK' A pointer if the pool is not empty, NULL if&#10; the pool is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71b35a0"/></type-var>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0xb71a9548" loc="80:../../tos/interfaces/Pool.nc">
        <documentation loc="74:../../tos/interfaces/Pool.nc">
          <short>&#10; Returns the maximum number of elements in the pool&#10; (the size of a full pool).</short>
          <long>&#10; Returns the maximum number of elements in the pool&#10; (the size of a full pool).&#10;&#10; @return Maximum size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0xb71b3a40" loc="61:../../tos/interfaces/Pool.nc">
        <documentation loc="52:../../tos/interfaces/Pool.nc">
          <short>&#10; Returns whether there any elements remaining in the pool.</short>
          <long>&#10; Returns whether there any elements remaining in the pool.&#10; If empty returns TRUE, then &#60;code>get&#60;/code> will return&#10; NULL. If empty returns FALSE, then &#60;code>get&#60;/code> will&#10; return a pointer to an object.&#10;&#10; @return Whether the pool is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="put" ref="0xb71a9b50" loc="89:../../tos/interfaces/Pool.nc">
        <documentation loc="82:../../tos/interfaces/Pool.nc">
          <short>&#10; Deallocate an object, putting it back into the pool.</short>
          <long>&#10; Deallocate an object, putting it back into the pool.&#10;&#10; @param 't* ONE newVal'&#10; @return SUCCESS if the entry was put in successfully, FAIL&#10; if the pool is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71b35a0"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0xb71a99f8" loc="89:../../tos/interfaces/Pool.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71b35a0"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0xb71a9010" loc="72:../../tos/interfaces/Pool.nc">
        <documentation loc="63:../../tos/interfaces/Pool.nc">
          <short>&#10; Returns how many elements are in the pool.</short>
          <long>&#10; Returns how many elements are in the pool. If size&#10; returns 0, empty() will return TRUE. If size returns&#10; a non-zero value, empty() will return FALSE. The&#10; return value of size is always &#38;lte; the return&#10; value of maxSize().&#10;&#10; @return How many elements are in the pool.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../tos/interfaces/Read.nc">
      <documentation loc="33:../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0xb719c010" loc="49:../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb719c010"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0xb719c4c0" loc="55:../../tos/interfaces/Read.nc">
        <documentation loc="50:../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0xb719cc70" loc="63:../../tos/interfaces/Read.nc">
        <documentation loc="57:../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb719c010"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0xb719c940" loc="63:../../tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0xb719cb10" loc="63:../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb719c010"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb71be888" loc="80:../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0xb71be328" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0xb71be540" loc="80:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb71be720" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0xb71b94a8" loc="135:../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71b9148" loc="135:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb71b9328" loc="135:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb71bab90" loc="123:../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb71bb558" loc="96:../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71bb400" loc="96:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb71ba288" loc="110:../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71bbef0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0xb71ba128" loc="110:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0xb720c010" loc="95:../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb720c4d8" loc="105:../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0xb7198d40" loc="61:../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0xb71971a8" loc="67:../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0xb7197628" loc="72:../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0xb7197e98" loc="83:../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0xb7196bd8" loc="100:../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb7195090" loc="117:../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0xb7197a50" loc="77:../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb71957d0" loc="134:../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0xb7195678" loc="134:../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0xb7198918" loc="56:../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0xb7196368" loc="89:../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0xb7196790" loc="94:../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0xb71b1e60" loc="43:../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71b1e60"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0xb71af4a0" loc="80:../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71b1e60"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0xb71ae3b0" loc="97:../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71b1e60"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0xb71ae258" loc="97:../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71b1e60"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0xb750f840"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:1"><attribute-ref name="one" ref="0xb750f840"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0xb71aeca8" loc="108:../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71b1e60"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb71aeb50" loc="108:../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0xb71b0748" loc="57:../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0xb71af070" loc="72:../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0xb71afb48" loc="88:../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71b1e60"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0xb71b0318" loc="50:../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0xb71b0b88" loc="65:../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb71a43e8" loc="53:../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb71a43e8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0xb71a1c28" loc="136:../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0xb71a39e8" loc="83:../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0xb71a2bc0" loc="114:../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0xb71a2878" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0xb71a2a60" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0xb71a23d0" loc="98:../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0xb71a05c0" loc="151:../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0xb71a0090" loc="144:../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0xb71a3e78" loc="92:../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0xb71a4a40" loc="64:../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0xb71a48e8" loc="64:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0xb71a1608" loc="129:../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0xb71a12c0" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0xb71a14a8" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0xb71a3168" loc="73:../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0xb71a3010" loc="73:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb71a3638" loc="78:../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb713e5c8" loc="53:../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb713e5c8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0xb713eaa8" loc="61:../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb7137c78" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb7137c78"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0xb7137de0" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7137de0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0xb712f2f0" loc="64:../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7137de0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0xb712fd18" loc="76:../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0xb712f818" loc="71:../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0xb712e138" loc="82:../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb713cdd8" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb713cdd8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0xb7136010" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7136010"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0xb7133310" loc="109:../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7136010"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0xb7134010" loc="78:../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0xb7134cb0" loc="103:../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7136010"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7136010"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0xb7134960" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7136010"/></type-var>
          </variable>
          <variable name="dt" ref="0xb7134b50" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7136010"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0xb7134458" loc="88:../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0xb71337a0" loc="116:../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7136010"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb7136640" loc="66:../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7136010"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0xb71364e8" loc="66:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7136010"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb7136b20" loc="73:../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0xb7113480" loc="89:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0xb71159f8" loc="85:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0xb7116588" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0xb7113010" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0xb7115e60" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0xb7115588" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0xb7115430" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0xb7113a48" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0xb71138f0" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0xb71169d8" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0xb7115010" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0xb7116df8" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="51:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="compareBBusy" ref="0xb71090c8" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; @return TRUE if OCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer2Asynchronous" ref="0xb710cdd8" loc="68:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 2 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlABusy" ref="0xb710b210" loc="74:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="70:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; @return TRUE if TCCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBBusy" ref="0xb710b6f0" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; @return TRUE if TCCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0xb7109588" loc="98:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="94:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; @return TRUE if TCNT2 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareABusy" ref="0xb710bbd0" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; @return TRUE if OCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0xb710c300" loc="57:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="53:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer2 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb73579e0"/>
            <typename><typedef-ref name="Atm128_ASSR_t" ref="0xb7357c08"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0xb710c8f8" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="59:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer2 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb73579e0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0xb7357c08"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0xb710c7a0" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb73579e0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0xb7357c08"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0xb7118a08" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7118a08"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0xb7110958" loc="74:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0xb71118f8" loc="58:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb7118f00" loc="48:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7118a08"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0xb7111d00" loc="62:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0xb7110db8" loc="80:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb71114b8" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7118a08"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0xb7111360" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb7118a08"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb7110138" loc="65:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb7110530" loc="68:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0xb711f630" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb711f630"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0xb711be80" loc="98:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0xb711b5f0" loc="87:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb711fb20" loc="61:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb711f630"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0xb711a430" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0xb711a2d8" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0xb711a8c0" loc="110:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0xb711c9b8" loc="75:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0xb711c598" loc="70:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0xb711ba58" loc="93:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb711c168" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb711f630"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0xb711c010" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb711f630"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb711cdc0" loc="78:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb711b1c8" loc="81:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0xb7038210" loc="32:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0xb703dcf0" loc="25:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0xb7038700" loc="39:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0xb703a258" loc="120:../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0xb703b920" loc="97:../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0xb703b320" loc="88:../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0xb703bdd0" loc="102:../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0xb703a950" loc="128:../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="MicaBusAdc" loc="16:../../tos/platforms/mica/MicaBusAdc.nc">
      <documentation loc="11:../../tos/platforms/mica/MicaBusAdc.nc">
        <short>&#10; A simplistic beginning to providing a standard interface to the mica-family&#10; 51-pin bus.</short>
        <long>&#10; A simplistic beginning to providing a standard interface to the mica-family&#10; 51-pin bus. Just provides the PW0-PW7 digital I/O pins.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getChannel" ref="0xb702f070" loc="20:../../tos/platforms/mica/MicaBusAdc.nc">
        <documentation loc="17:../../tos/platforms/mica/MicaBusAdc.nc">
          <short>&#10; Return the A/D channel number to use for one of the ADCn pins.</short>
        </documentation>
        <interfacedef-ref qname="MicaBusAdc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0xb701a720" loc="68:../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0xb701a2c0" loc="61:../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0xb701de70" loc="54:../../tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0xb701d908" loc="53:../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Interrupt" loc="41:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <short>&#10; Interface to an Atmega128 external interrupt pin&#10;&#10; </short>
        <long>&#10; Interface to an Atmega128 external interrupt pin&#10;&#10; @author Joe Polastre&#10; @author Martin Turon&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0xb7005010" loc="56:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="53:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Clears the ATmega128 Interrupt Pending Flag for a particular port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0xb7004010" loc="75:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="72:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0xb7009bc0" loc="51:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="48:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Disables ATmega128 hardware interrupt on a particular port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0xb7005a70" loc="70:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="65:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Sets whether the edge should be high to low or low to high.</short>
          <long> &#10; Sets whether the edge should be high to low or low to high.&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0xb7005918" loc="70:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0xb70097b8" loc="46:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="43:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Enables ATmega128 hardware interrupt on a particular port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0xb7005460" loc="63:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="58:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Gets the current value of the input voltage of a port&#10;&#10; </short>
          <long> &#10; Gets the current value of the input voltage of a port&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128InterruptSig" loc="43:../../tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
      <documentation loc="35:../../tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
        <short>&#10; Interface to an Atmega128 external interrupt pin that exposes just the&#10; interrupt vector routine for easy linking to generic components (see&#10; HplAtm128Interrupt for the full interface).</short>
        <long>&#10; Interface to an Atmega128 external interrupt pin that exposes just the&#10; interrupt vector routine for easy linking to generic components (see&#10; HplAtm128Interrupt for the full interface).&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @see HplAtm128Interrupt&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0xb6fff8f0" loc="48:../../tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
        <documentation loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
          <short>&#10; Signalled when an interrupt occurs on a pin&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0xb6faa038" loc="53:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0xb6faa610" loc="61:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0xb6fa5980" loc="65:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0xb6fa54c0" loc="59:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0xb6faccd0" loc="56:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0xb6fa86e8" loc="73:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0xb6fac7a0" loc="46:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0xb6fa8210" loc="65:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0xb6fa8cc0" loc="81:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0xb6fabee0" loc="90:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0xb6fa63f8" loc="98:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0xb6f9e398" loc="79:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0xb6fa9cb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0xb6f9e240" loc="79:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0xb6fa9cb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0xb6f9f010" loc="53:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0xb6f9f6d0" loc="62:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0xb6fa9cb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0xb6f9f578" loc="62:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0xb6fa9cb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0xb6f9fc80" loc="70:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0xb6fa9cb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:../../tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:../../tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0xb6f615b8" loc="62:../../tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:../../tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:../../tos/interfaces/ReadNow.nc">
      <documentation loc="33:../../tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0xb6f2cd08" loc="52:../../tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb6f2cd08"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0xb6f291f0" loc="58:../../tos/interfaces/ReadNow.nc">
        <documentation loc="53:../../tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0xb6f299c0" loc="66:../../tos/interfaces/ReadNow.nc">
        <documentation loc="60:../../tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb6f2cd08"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0xb6f29690" loc="66:../../tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0xb6f29860" loc="66:../../tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb6f2cd08"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="77:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="42:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0xb6f1d070" loc="100:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="79:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0xb6f1f860" loc="100:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0xb6f1fa88" loc="100:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0xb6f1fcb0" loc="101:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0xb6f1fed0" loc="101:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0xb6f1c3f0" loc="119:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="103:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6f1d990" loc="119:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0xb6f1db80" loc="119:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0xb6f1dd88" loc="119:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0xb6f1c010" loc="120:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0xb6f1c278" loc="120:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="52:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="42:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0xb6f24e60" loc="70:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="54:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0xb6f24680" loc="70:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0xb6f248a8" loc="70:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0xb6f24ad0" loc="71:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0xb6f24cf0" loc="71:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb6f20010" loc="91:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="83:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0xb6f219a8" loc="81:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="73:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6f21658" loc="81:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0xb6f21848" loc="81:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="48:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="36:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0xb6f111a8" loc="114:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="111:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0xb6f19890" loc="53:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="49:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb736d258"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0xb736d4e0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0xb6f0f6b8" loc="140:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="135:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0xb6f0f560" loc="140:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0xb6f11668" loc="122:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="118:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0xb6f13360" loc="82:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0xb6f19ea8" loc="58:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="54:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb736d258"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0xb736d4e0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0xb6f19d50" loc="58:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb736d258"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0xb736d4e0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0xb6f13bb0" loc="91:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="88:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0xb6f0f010" loc="133:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="128:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb6f0fb60" loc="150:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="142:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0xb6f13760" loc="86:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0xb6f12468" loc="99:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="96:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0xb6f12038" loc="95:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0xb6f128a0" loc="106:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="101:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0xb6f11ad8" loc="127:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="123:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0xb6f15a18" loc="69:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="65:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb7369588"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0xb7369930"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0xb6f158c0" loc="69:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb7369588"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0xb7369930"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0xb6f12d68" loc="110:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="107:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0xb6f153e8" loc="64:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="60:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb7369588"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0xb7369930"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0xb6f15ec8" loc="75:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="71:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0xb6f0e2c8" loc="156:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="152:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6f0e170" loc="156:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0xb6f1a9d8" loc="95:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb6f1aec0" loc="105:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb6eb76b8" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb6eb76b8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0xb6eb7820" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6eb7820"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0xb6eb7e38" loc="66:../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6eb7820"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0xb6eb7ce0" loc="66:../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6eb7820"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CollectionDebug" loc="59:../../tos/lib/net/CollectionDebug.nc">
      <documentation loc="35:../../tos/lib/net/CollectionDebug.nc">
        <short> &#10;  The CollectionDebug is an interface for sending debugging events to&#10;  a logging infrastructure.</short>
        <long> &#10;  The CollectionDebug is an interface for sending debugging events to&#10;  a logging infrastructure. An implementer can choose to send the event&#10;  information to different destinations. Primary examples can include:&#10;  &#60;ul>&#10;    &#60;li> logging to the UART, in case of a testbed of network-connected&#10;         nodes;&#10;    &#60;li> logging to flash, if the logs are to be retrieved later&#10;    &#60;li> logging to the standard output, in the case of TOSSIM.&#10;  &#60;/ul>&#10;  &#10;  The interface does not specify in what format the log is to be produced,&#10;  or if other information, like timestamps, should be added, and this is&#10;  up to the implementer.&#10; &#10;  Some commands are generic, like Event, EventSimple, and EventDbg, while others&#10;  are for more specific events related to collection, like EventRoute and EventMsg.&#10;&#10; @author Rodrigo Fonseca&#10; @author Kyle Jamieson&#10; @date   $Date: 2010-06-29 22:07:47 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="logEvent" ref="0xb6e6e800" loc="61:../../tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0xb6e6e6a8" loc="61:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="logEventMsg" ref="0xb6e6c7b0" loc="73:../../tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0xb6e6c030" loc="73:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0xb6e6c220" loc="73:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
          <variable name="origin" ref="0xb6e6c438" loc="73:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
          <variable name="node" ref="0xb6e6c640" loc="73:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="logEventSimple" ref="0xb6e6d010" loc="64:../../tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0xb6e6ec60" loc="64:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
          <variable name="arg" ref="0xb6e6ee50" loc="64:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="logEventRoute" ref="0xb6e6b3e8" loc="79:../../tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0xb6e6cc08" loc="79:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
          <variable name="parent" ref="0xb6e6ce20" loc="79:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
          <variable name="hopcount" ref="0xb6e6b068" loc="79:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
          <variable name="metric" ref="0xb6e6b278" loc="79:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="logEventDbg" ref="0xb6e6dbc0" loc="67:../../tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0xb6e6d450" loc="67:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
          <variable name="arg1" ref="0xb6e6d650" loc="67:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
          <variable name="arg2" ref="0xb6e6d850" loc="67:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
          <variable name="arg3" ref="0xb6e6da50" loc="67:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Intercept" loc="15:../../tos/interfaces/Intercept.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="forward" ref="0xb6e8ee80" loc="31:../../tos/interfaces/Intercept.nc">
        <documentation loc="16:../../tos/interfaces/Intercept.nc">
          <short>&#10; Signals that a message has been received, which is supposed to be&#10; forwarded to another destination.</short>
          <long>&#10; Signals that a message has been received, which is supposed to be&#10; forwarded to another destination. &#10;&#10; @param 'message_t* ONE msg' The complete message received.&#10;&#10; @param 'void* COUNT(len) payload' The payload portion of the packet for this&#10; protocol layer.&#10;&#10; @param len The length of the payload buffer.&#10;&#10; @return TRUE indicates the packet should be forwarded, FALSE&#10; indicates that it should not be forwarded.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Intercept"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e8e958" loc="31:../../tos/interfaces/Intercept.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0xb6e8eb38" loc="31:../../tos/interfaces/Intercept.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6e8ed18" loc="31:../../tos/interfaces/Intercept.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0xb6e8c6d8" loc="65:../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e8c580" loc="65:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0xb6e88168" loc="78:../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e88010" loc="78:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0xb6e86208" loc="126:../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e87e88" loc="126:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6e86088" loc="126:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb6e878a0" loc="106:../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0xb6e88dc8" loc="94:../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e88a88" loc="94:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6e88c68" loc="94:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CtpInfo" loc="44:../../tos/lib/net/ctp/CtpInfo.nc">
      <function command="" provided="0" name="getNeighborLinkQuality" ref="0xb6e75168" loc="96:../../tos/lib/net/ctp/CtpInfo.nc">
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb6e75010" loc="96:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="recomputeRoutes" ref="0xb6e78838" loc="83:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="80:../../tos/lib/net/ctp/CtpInfo.nc">
          <short> &#10; Tell the routing engine it might want to recompute its routes.</short>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="numNeighbors" ref="0xb6e76ad0" loc="95:../../tos/lib/net/ctp/CtpInfo.nc">
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="triggerRouteUpdate" ref="0xb6e79da8" loc="71:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="66:../../tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; This informs the routing engine that sending a beacon soon is&#10; advisable, e.g., in response to a pull bit.</short>
          <long>&#10; This informs the routing engine that sending a beacon soon is&#10; advisable, e.g., in response to a pull bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getEtx" ref="0xb6e797f0" loc="64:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="55:../../tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; Get the ETX for the current path to the root through the current&#10; parent.</short>
          <long>&#10; Get the ETX for the current path to the root through the current&#10; parent. Sets etx argument to ETX*10.  The pointer is allocated by&#10; the caller.  If the parent is invalid, return FAIL (no info).&#10; The caller MUST NOT use the value in parent if the return is not&#10; SUCCESS. Calling getEtx at the root will set the etx argument to&#10; 0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="etx" ref="0xb6e79698" loc="64:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="triggerImmediateRouteUpdate" ref="0xb6e78320" loc="78:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="73:../../tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; This informs the routing engine that sending a beacon as soon&#10; as possible is advisable, e.g., due to queue overflow or&#10; a detected loop.</short>
          <long>&#10; This informs the routing engine that sending a beacon as soon&#10; as possible is advisable, e.g., due to queue overflow or&#10; a detected loop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setNeighborCongested" ref="0xb6e76060" loc="88:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="85:../../tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; Informs the routing engine that a neighbor is congested&#10;</short>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb6e78cd0" loc="88:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
          <variable name="congested" ref="0xb6e78ed8" loc="88:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNeighborAddr" ref="0xb6e75d00" loc="98:../../tos/lib/net/ctp/CtpInfo.nc">
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb6e75ba8" loc="98:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getParent" ref="0xb6e79168" loc="53:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="46:../../tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; Get the parent of the node in the tree.</short>
          <long>&#10; Get the parent of the node in the tree.  The pointer is allocated&#10; by the caller.  If the parent is invalid, return FAIL.  The&#10; caller MUST NOT use the value in parent if the return is not&#10; SUCCESS.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="parent" ref="0xb6e79010" loc="53:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNeighborRouteQuality" ref="0xb6e75758" loc="97:../../tos/lib/net/ctp/CtpInfo.nc">
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb6e75600" loc="97:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isNeighborCongested" ref="0xb6e76668" loc="93:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="90:../../tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10;  Returns the currently known state about a neighbor's congestion state&#10;</short>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb6e76510" loc="93:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CtpCongestion" loc="1:../../tos/lib/net/ctp/CtpCongestion.nc">
      <function command="" provided="0" name="isCongested" ref="0xb6e73010" loc="7:../../tos/lib/net/ctp/CtpCongestion.nc">
        <interfacedef-ref qname="CtpCongestion"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClientCongested" ref="0xb6e735c0" loc="14:../../tos/lib/net/ctp/CtpCongestion.nc">
        <interfacedef-ref qname="CtpCongestion"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="congested" ref="0xb6e73468" loc="14:../../tos/lib/net/ctp/CtpCongestion.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UnicastNameFreeRouting" loc="41:../../tos/lib/net/UnicastNameFreeRouting.nc">
      <documentation loc="35:../../tos/lib/net/UnicastNameFreeRouting.nc">
        <short>&#10;  Provides a single next hop on a name-free protocol.</short>
        <long>&#10;  Provides a single next hop on a name-free protocol.&#10;&#10;  @author Philip Levis&#10;  @date   $Date: 2006-12-12 18:23:29 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="hasRoute" ref="0xb6e7ac90" loc="49:../../tos/lib/net/UnicastNameFreeRouting.nc">
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="routeFound" ref="0xb6e70070" loc="51:../../tos/lib/net/UnicastNameFreeRouting.nc">
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="nextHop" ref="0xb6e7a7a8" loc="48:../../tos/lib/net/UnicastNameFreeRouting.nc">
        <documentation loc="43:../../tos/lib/net/UnicastNameFreeRouting.nc">
          <short>&#10; Get the address of the best next hop set to the destination.</short>
          <long>&#10; Get the address of the best next hop set to the destination.&#10; If there is not best next hop, the address is the local address.&#10; @return : The next best hop, or the local address if there is no route.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="noRoute" ref="0xb6e70408" loc="52:../../tos/lib/net/UnicastNameFreeRouting.nc">
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CtpPacket" loc="44:../../tos/lib/net/ctp/CtpPacket.nc">
      <documentation loc="33:../../tos/lib/net/ctp/CtpPacket.nc">
        <short>&#10;  ADT for CTP data frames.</short>
        <long>&#10;  ADT for CTP data frames.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2007-11-28 04:42:52 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSequenceNumber" ref="0xb6e7eaf8" loc="64:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e7e7a0" loc="64:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="seqno" ref="0xb6e7e998" loc="64:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="option" ref="0xb6e825e0" loc="52:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e93188"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e82260" loc="52:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="opt" ref="0xb6e82480" loc="52:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e93188"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEtx" ref="0xb6e7f028" loc="58:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e81cc0" loc="58:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="etx" ref="0xb6e81eb0" loc="58:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOrigin" ref="0xb6e7fd48" loc="61:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e7f9e0" loc="61:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6e7fbe8" loc="61:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOption" ref="0xb6e83e20" loc="49:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e93188"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e83a80" loc="49:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="option" ref="0xb6e83cc0" loc="49:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e93188"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getEtx" ref="0xb6e818e0" loc="57:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e81788" loc="57:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getOrigin" ref="0xb6e7f5e0" loc="60:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e7f488" loc="60:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0xb6e7d7b0" loc="67:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e7d478" loc="67:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="id" ref="0xb6e7d650" loc="67:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOption" ref="0xb6e83660" loc="46:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e93188"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e832c0" loc="46:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="option" ref="0xb6e83500" loc="46:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e93188"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="matchPacket" ref="0xb6e7b7b8" loc="70:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m1" ref="0xb6e7b448" loc="70:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="m2" ref="0xb6e7b658" loc="70:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getThl" ref="0xb6e82b60" loc="54:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e82a08" loc="54:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0xb6e7e350" loc="63:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e7e1f8" loc="63:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="matchInstance" ref="0xb6e7b010" loc="69:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m1" ref="0xb6e7dc80" loc="69:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="m2" ref="0xb6e7de90" loc="69:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getType" ref="0xb6e7d090" loc="66:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e7ef28" loc="66:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setThl" ref="0xb6e81350" loc="55:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e81010" loc="55:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="thl" ref="0xb6e811f0" loc="55:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CollectionId" loc="45:../../tos/lib/net/CollectionId.nc">
      <documentation loc="35:../../tos/lib/net/CollectionId.nc">
        <short>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.</short>
        <long>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.&#10;&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2006-12-12 18:23:28 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="fetch" ref="0xb6e6f300" loc="46:../../tos/lib/net/CollectionId.nc">
        <interfacedef-ref qname="CollectionId"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0xb71b7100"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkEstimator" loc="46:../../tos/lib/net/4bitle/LinkEstimator.nc">
      <documentation loc="35:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <short> Provides an additive quality measure for a neighbor.</short>
        <long> Provides an additive quality measure for a neighbor. The&#10; provided quality increases when the true link quality increases.&#10;  @author Rodrigo Fonseca&#10;  @author Omprakash Gnawali&#10;  @date   $Date: 2010-06-29 22:07:47 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="txAck" ref="0xb6e5f1e0" loc="62:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e5f088" loc="62:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pinNeighbor" ref="0xb6e61630" loc="55:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e614d8" loc="55:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="txNoAck" ref="0xb6e5f790" loc="66:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e5f638" loc="66:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNeighbor" ref="0xb6e61058" loc="52:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e64ee0" loc="52:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0xb6e5e2f8" loc="72:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e5e1a0" loc="72:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearDLQ" ref="0xb6e5fd50" loc="69:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e5fbf8" loc="69:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="unpinNeighbor" ref="0xb6e61c20" loc="58:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e61ac8" loc="58:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLinkQuality" ref="0xb6e64a40" loc="49:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e648e8" loc="49:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0xb6e57cb8" loc="59:../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0xb6e57940" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0xb6e57b58" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0xb6e4ff00" loc="65:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e4fb68" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0xb6e4fda0" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0xb6e4d9f0" loc="71:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e4d898" loc="71:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0xb6e4f690" loc="57:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0xb6e4f010" loc="52:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0xb6e4ee50" loc="52:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0xb6e525a8" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e52450" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0xb6e51168" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e51010" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0xb6e51bf0" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e51a98" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0xb6e4a9d8" loc="65:../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e4a880" loc="65:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0xb6e55df8" loc="46:../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e55a60" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0xb6e55c98" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0xb6e4a088" loc="59:../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e49f10" loc="59:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0xb6e499f0" loc="53:../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e49658" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0xb6e49890" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0xb6e48310" loc="71:../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e481b8" loc="71:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioChannel" loc="35:../../tos/lib/rfxlink/util/RadioChannel.nc">
      <function event="" provided="0" name="setChannelDone" ref="0xb6e54ae0" loc="48:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.</short>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0xb6e54600" loc="42:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="37:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress),&#10; EALREADY if the selected channel is already set, SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0xb6e544a8" loc="42:../../tos/lib/rfxlink/util/RadioChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0xb6e45010" loc="53:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Returns the currently selected channel.</short>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0xb6e459f0" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb6e459f0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0xb6e45b58" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6e45b58"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0xb6e43d50" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6e45b58"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e43bf8" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0xb6e429c0" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e42868" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0xb6e43200" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e430a8" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb6e414b8" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6e45b58"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e41148" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0xb6e41358" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6e45b58"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketField" loc="35:../../tos/lib/rfxlink/util/PacketField.nc">
      <parameters>
        <typedef name="value_type" ref="0xb6e34618" loc="35:../../tos/lib/rfxlink/util/PacketField.nc">
          <interfacedef-ref qname="PacketField"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0xb6e34618"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="clear" ref="0xb6e31900" loc="51:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Clears the isSet flag.</short>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e317a8" loc="51:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb6e312e0" loc="46:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="42:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns the stored value of this field in the message.</short>
          <long>&#10; Returns the stored value of this field in the message. If the&#10; value is not set, then the returned value is undefined.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0xb6e34618"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e31188" loc="46:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0xb6e34c90" loc="40:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="37:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns TRUE if the value is set for this message.</short>
          <long>&#10; Returns TRUE if the value is set for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e34b38" loc="40:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb6e30098" loc="57:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.</short>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0xb6e34618"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e31d10" loc="57:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0xb6e31f28" loc="57:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0xb6e34618"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0xb6e2a6a0" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e2a548" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Packet" loc="35:../../tos/interfaces/Ieee154Packet.nc">
      <function command="" provided="0" name="source" ref="0xb6e16790" loc="41:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0xb71e5178"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e16638" loc="41:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0xb6e1dba0" loc="37:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0xb71e5178"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0xb6e161c0" loc="39:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0xb71e5178"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e16068" loc="39:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0xb6e147b0" loc="45:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0xb71e5178"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e14410" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6e14650" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0xb71e5178"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0xb6e14010" loc="43:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0xb71e5178"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e16bc0" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6e16e00" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0xb71e5178"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pan" ref="0xb6e132e0" loc="49:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0xb71e6ec8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e13188" loc="49:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPan" ref="0xb6e13a50" loc="51:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0xb71e6ec8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e136c0" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0xb6e138f0" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0xb71e6ec8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0xb6e14d20" loc="47:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e14bc8" loc="47:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0xb6e13e90" loc="53:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0xb71e6ec8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Send" loc="45:../../tos/interfaces/Ieee154Send.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb6e1c570" loc="67:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="47:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0xb71e5178"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0xb6e1c010" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0xb71e5178"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0xb6e1c228" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6e1c408" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0xb6e197f0" loc="122:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="113:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e19490" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6e19670" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb6e1bf08" loc="110:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="100:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb6e1cf00" loc="83:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="69:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e1cda8" loc="83:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb6e1b910" loc="97:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="85:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e1b5b8" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0xb6e1b7b0" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Tasklet" loc="43:../../tos/lib/rfxlink/util/Tasklet.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/Tasklet.nc">
        <short>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled.</short>
        <long>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled. &#10; All state transitions should take place in the run event handler or&#10; in blocks protected by the suspend and resume commands.&#10;</long>
      </documentation>
      <function command="" provided="0" name="schedule" ref="0xb6e04978" loc="59:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Makes sure that the run event is called at least once more.</short>
          <long>&#10; Makes sure that the run event is called at least once more. If the &#10; run event is currently not executing, then it  is called immediately &#10; and this command returns only after the completion of the run event. &#10; If the run event is currently executed, then this method returns at &#10; once, and makes sure that the run event is called once more when &#10; it is finished. If this method is called from a task, then by the &#10; above rules, the run event will be called from a task as well.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="suspend" ref="0xb6e00010" loc="72:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="61:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section.</short>
          <long>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section. No long running&#10; computation should be called from the critical session, and&#10; in particular no user event should be fired. This call is only&#10; possible from task context, otherwise we cannot guarantee that&#10; the run event is not currently running. The suspend calls&#10; can be nested. It is very important that the same number of&#10; resume commands must be called in all control paths, e.g. be very&#10; careful with the return and break commands.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resume" ref="0xb6e00650" loc="79:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="74:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Leaves the critical section.</short>
          <long>&#10; Leaves the critical section. This call is conly possible from &#10; task context. If there were scheduled executions of the run&#10; event, then those will be called before this command returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="run" ref="0xb6e04578" loc="48:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; This method is executed atomically.</short>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DummyConfig" loc="35:../../tos/lib/rfxlink/layers/DummyConfig.nc">
      <function command="" provided="0" name="nothing" ref="0xb6de02c8" loc="40:../../tos/lib/rfxlink/layers/DummyConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/DummyConfig.nc">
          <short>&#10; We need to put something here, but this is not going to get called&#10;</short>
        </documentation>
        <interfacedef-ref qname="DummyConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TrafficMonitorConfig" loc="35:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
      <function command="" provided="0" name="getBytes" ref="0xb6dedea8" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the number of bytes in this message.</short>
          <long>&#10; Returns the number of bytes in this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dedd50" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageConfig" loc="37:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
      <function command="" provided="0" name="group" ref="0xb6de34b8" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.group *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0xb72134a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6de3360" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="checkFrame" ref="0xb6de2240" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.</short>
          <long>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.&#10; Return SUCCESS if the frame is now properly set up, &#10; or FAIL of the send operation should be aborted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6de20e8" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0xb6de4740" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.source *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6de45e8" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0xb6df5968" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.destination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df5810" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0xb6de4ed8" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setSource *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6de4b70" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6de4d78" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0xb6de4170" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setDestination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df5dc8" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6de4010" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0xb6de3c40" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setGroup *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb72134a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6de38e0" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0xb6de3ae0" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb72134a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlottedCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
      <function command="" provided="0" name="getInitialDelay" ref="0xb6de9e30" loc="42:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getScheduleExponent" ref="0xb6de8398" loc="49:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Must return a binary exponent so that the collision avoidance layer&#10; can assign slots in the range of [0, 1 &#60;&#60; exponent) of size collision&#10; window.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowLength" ref="0xb6de7878" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="62:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the size of the collision window for this received message.</short>
          <long>&#10; Returns the size of the collision window for this received message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6de7720" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitTime" ref="0xb6de8a48" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command must return the time when the message was transmitted.</short>
          <long>&#10; This command must return the time when the message was transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6de88f0" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowStart" ref="0xb6de7168" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="56:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6de7010" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioAlarm" loc="38:../../tos/lib/rfxlink/util/RadioAlarm.nc">
      <function event="" provided="0" name="fired" ref="0xb6dcec30" loc="60:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="57:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; This event is fired when the specified timeout period expires.</short>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="wait" ref="0xb6dce3d0" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Waits till the specified timeout period expires.</short>
          <long>&#10; Waits till the specified timeout period expires. The alarm must be free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0xb71e8b38"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="timeout" ref="0xb6dce278" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0xb71e8b38"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb6dce818" loc="55:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Cancels the running alarm.</short>
          <long>&#10; Cancels the running alarm. The alarm must be pending.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isFree" ref="0xb6de5d18" loc="45:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns TRUE if the alarm is free and ready to be used.</short>
          <long>&#10; Returns TRUE if the alarm is free and ready to be used. Once the alarm&#10; is free, it cannot become nonfree in the same tasklet block. Note,&#10; if the alarm is currently set (even if for ourselves) then it is not free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0xb6dcd0c8" loc="65:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="62:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns the current time as measured by the radio stack.</short>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0xb71e8b38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioPacket" loc="35:../../tos/lib/rfxlink/util/RadioPacket.nc">
      <function command="" provided="0" name="clear" ref="0xb6dc9168" loc="70:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="67:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Clears all metadata and sets all default values in the headers.</short>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dc9010" loc="70:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0xb6dcb788" loc="49:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the payload.</short>
          <long>&#10; Returns the length of the payload. The payload starts right&#10; after the header.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dcb630" loc="49:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb6dca4a8" loc="59:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the maximum length that can be set for this message.</short>
          <long>&#10; Returns the maximum length that can be set for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0xb6dca010" loc="54:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Sets the length of the payload.</short>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dcbc80" loc="54:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="length" ref="0xb6dcbe80" loc="54:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0xb6dcb090" loc="43:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="37:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; This command returns the length of the header.</short>
          <long>&#10; This command returns the length of the header. The header&#10; starts at the first byte of the message_t structure &#10; (some layers may add dummy bytes to allign the payload to&#10; the msg->data section).&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dcdf28" loc="43:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0xb6dcab28" loc="65:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="61:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the metadata section.</short>
          <long>&#10; Returns the length of the metadata section. The metadata section&#10; is at the very end of the message_t structure and grows downwards.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dca9d0" loc="65:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RF230DriverConfig" loc="35:../../tos/chips/rf230/RF230DriverConfig.nc">
      <function command="" provided="0" name="maxPayloadLength" ref="0xb6df8510" loc="46:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="42:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.</short>
          <long>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0xb6df8010" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="37:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy header to align the payload properly.</short>
          <long>&#10; Returns the length of a dummy header to align the payload properly.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e06e60" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0xb6df8bf0" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="48:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df8a98" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerPreloadLength" ref="0xb6df70f8" loc="59:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="54:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired.</short>
          <long>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired. If the length of the packet is less than this amount, &#10; then that event is fired earlier. The header length must be at least one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresRssiCca" ref="0xb6df7828" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="61:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns TRUE if before sending this message we should make sure that&#10; the channel is clear via a very basic (and quick) RSSI check.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df76d0" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaConfig" loc="35:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
      <function command="" provided="0" name="requiresSoftwareCCA" ref="0xb6ded188" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
          <short>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.</short>
        </documentation>
        <interfacedef-ref qname="CsmaConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6ded030" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SoftwareAckConfig" loc="37:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
      <function command="" provided="0" name="reportChannelError" ref="0xb6df2b38" loc="86:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="82:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckPacket" ref="0xb6df2680" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
          <long>&#10; Creates an acknowledgement packet for the given data packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6df2308" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb6df2520" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0xb6df4668" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df4510" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckPacket" ref="0xb6df4cb0" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet is an acknowledgement packet.</short>
          <long>&#10; Returns TRUE if the received packet is an acknowledgement packet.&#10; The AckedSend layer will filter out all received acknowledgement&#10; packets and uses  only the matching one for the acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df4b58" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckPacket" ref="0xb6df3680" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="64:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The acknowledgement packect was already verified &#10; to be a valid acknowledgement packet via the isAckPacket command.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6df3308" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb6df3520" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckTimeout" ref="0xb6dfa7d0" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0xb6df4010" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Sets the flag in the message indicating to the receiver whether&#10; the message should be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dfaca0" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb6dfae68" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0xb6df3d98" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet needs software acknowledgements&#10; to be sent back to the sender.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df3c40" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154PacketLayer" loc="45:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
      <documentation loc="38:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <short>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses.</short>
        <long>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses. It also &#10; supports 6LowPan interoperability mode, and acknowledgement frames.&#10; Note, that this interface does not support the CRC-16 value, which&#10; should be verified before the data can be trusted.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getDestPan" ref="0xb6dd77f8" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="127:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; returns the destination PAN id, values &#60;= 255 are tinyos groups,&#10; valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd76a0" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDSN" ref="0xb6dd99d8" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="117:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd9880" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFCF" ref="0xb6ddf9e8" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame control field.</short>
          <long>&#10; Sets the frame control field. This method should not be used, &#10; createDataFrame and createAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6ddf698" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="fcf" ref="0xb6ddf888" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckFrame" ref="0xb6ddedc0" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6ddec68" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcAddr" ref="0xb6dd5c70" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="153:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd5910" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6dd5b10" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createDataFrame" ref="0xb6dde728" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="65:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create a data frame supported by this interface.</short>
          <long>&#10; Sets the FCF to create a data frame supported by this interface.&#10; You may call setAckRequired and setFramePending commands after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dde5d0" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDSN" ref="0xb6dd71e8" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="122:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd9e90" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dsn" ref="0xb6dd7088" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckReply" ref="0xb6dddd00" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="83:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
          <long>&#10; Creates an acknowledgement packet for the given data packet.&#10; This also sets the DSN value. The data message must be a &#10; data frame, the ack message will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6ddd988" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb6dddba0" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSrcAddr" ref="0xb6dd5498" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="148:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd5340" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isDataFrame" ref="0xb6dde088" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6ddfef8" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckRequired" ref="0xb6ddbd28" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="96:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the ACK required field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the ACK required field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6ddbbd0" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckReply" ref="0xb6ddb678" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="90:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The data message must be a data packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6ddb300" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb6ddb518" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localAddr" ref="0xb6dd23a8" loc="178:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="175:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local address of the node (AM address)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0xb71e5178"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0xb6dd42e0" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="158:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd4188" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0xb6dd4ed8" loc="173:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="170:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local pan id (AM group)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0xb71e6ec8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestAddr" ref="0xb6dd6e20" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="143:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd6ac0" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6dd6cc0" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckFrame" ref="0xb6ddd448" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface.</short>
          <long>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface. You may call setFramePending after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6ddd2f0" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFramePending" ref="0xb6dd93f8" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="112:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame pending field in the FCF.</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd90a8" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pending" ref="0xb6dd9298" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestPan" ref="0xb6dd6010" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="133:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination PAN id, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd7c90" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pan" ref="0xb6dd7e80" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0xb6dd2980" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="180:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.</short>
          <long>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd2828" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0xb6dda540" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="101:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dda218" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb6dda3e0" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFCF" ref="0xb6ddf1e0" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the frame control field.</short>
          <long>&#10; Returns the frame control field. This method should not be used, &#10; isDataFrame and isAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6ddf088" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0xb6dd49f0" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="164:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd4898" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestAddr" ref="0xb6dd6640" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="138:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd64e8" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFramePending" ref="0xb6ddab90" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="107:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the frame pending field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the frame pending field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6ddaa38" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UniqueConfig" loc="37:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0xb6defd08" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="49:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Sets the sequence number of the packet.</short>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6def9a8" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="number" ref="0xb6defba8" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportChannelError" ref="0xb6dee1a8" loc="58:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.</short>
          <long>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0xb6df9e68" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sequence number of the packet.</short>
          <long>&#10; Returns the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df9d10" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSender" ref="0xb6def4d8" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sender of the packet.</short>
          <long>&#10; Returns the sender of the packet. &#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6def380" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RandomCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
      <function command="" provided="0" name="getCongestionBackoff" ref="0xb6dea300" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the amount of maximum backoff when there is congestion&#10; (the channel was busy for the first try)&#10;</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dea1a8" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInitialBackoff" ref="0xb6decc40" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the initial amount of maximum backoff for this message.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6decae8" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMinimumBackoff" ref="0xb6dea7f8" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the minimum ticks before the message could be sent.</short>
          <long>&#10; Returns the minimum ticks before the message could be sent.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitBarrier" ref="0xb6deaeb0" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; The provided message was just received, and this command should return &#10; the time till no transmission should be initiated.</short>
          <long>&#10; The provided message was just received, and this command should return &#10; the time till no transmission should be initiated.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dead58" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareSend" loc="35:../../tos/lib/rfxlink/util/BareSend.nc">
      <function command="" provided="0" name="send" ref="0xb6d74c80" loc="46:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="37:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a task. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d74b28" loc="46:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb6d71d00" loc="64:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="56:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d71ba8" loc="64:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb6d71610" loc="54:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d712b8" loc="54:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0xb6d714b0" loc="54:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareReceive" loc="35:../../tos/lib/rfxlink/util/BareReceive.nc">
      <function event="" provided="0" name="receive" ref="0xb6d73ca8" loc="42:../../tos/lib/rfxlink/util/BareReceive.nc">
        <documentation loc="37:../../tos/lib/rfxlink/util/BareReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
              <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d73b30" loc="42:../../tos/lib/rfxlink/util/BareReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0xb6d63660" loc="50:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0xb6d63ed0" loc="60:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0xb6d63ad0" loc="55:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0xb72134a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0xb6d63170" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb72134a0"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0xb6d66d88" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb72134a0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0xb6d63010" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioReceive" loc="37:../../tos/lib/rfxlink/util/RadioReceive.nc">
      <function event="" provided="0" name="receive" ref="0xb6c2fe10" loc="53:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
              <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6c2fc98" loc="53:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="header" ref="0xb6c2f620" loc="46:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed.</short>
          <long>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed. Return FALSE if the message should be discarded.&#10; In particular, the message buffer layer returns FALSE if there is&#10; no space for a new message, so this message will not get acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6c2f4c8" loc="46:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="NeighborhoodFlag" loc="41:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <short>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example).</short>
      </documentation>
      <function command="" provided="0" name="clear" ref="0xb6c21c20" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for the given index.</short>
          <long>&#10; Clears the flag for the given index. The flag is automatically&#10; cleared after the Neighborhood.evicted event is fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb6c21ac8" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearAll" ref="0xb6c1f0c8" loc="62:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for all indices&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb6c21188" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="43:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Returns the value of the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb6c21030" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb6c216d0" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Sets the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb6c21578" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Neighborhood" loc="42:../../tos/lib/rfxlink/util/Neighborhood.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <short>&#10; Every component maintains its own neighborhood data.</short>
        <long>&#10; Every component maintains its own neighborhood data. The Neighboorhood&#10; component maintains only the nodeids and ages of the neighbors, and&#10; evicts old entries from the table when necessary.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getAge" ref="0xb6c25c08" loc="57:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the age of the given entry.</short>
          <long>&#10; Returns the age of the given entry. The age is incremented by one&#10; every time a new node is inserted into the neighborhood table that&#10; is not already at the very end. If the age would get too large to&#10; fit into a byte, then it is periodically reset to a smaller value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb6c25ab0" loc="57:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNode" ref="0xb6c248f8" loc="71:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="64:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Adds a new node into the neighborhood table.</short>
          <long>&#10; Adds a new node into the neighborhood table. If this node was already&#10; in the table, then it is just brought to the front (its age is reset&#10; to zero). If the node was not in the table, then the oldest is evicted&#10; and its entry is replaced with this node. The index of the entry&#10; is returned in the range [0, NEIGHBORHOOD-1]. &#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0xb6c247a0" loc="71:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNode" ref="0xb6c24318" loc="62:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the node address for the given entry.</short>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb6c241c0" loc="62:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0xb6c23010" loc="80:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="73:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; This event is fired when the oldest entry is replaced with a new&#10; node.</short>
          <long>&#10; This event is fired when the oldest entry is replaced with a new&#10; node. The same interface is used by many users, so all of them&#10; will receive this event and can clear the corresponding entry.&#10; After this event is fired, all flags for this entry are cleared&#10; (see the NeighborhoodFlag interface)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb6c24e58" loc="80:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIndex" ref="0xb6c25588" loc="49:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the index of the neighbor in the table.</short>
          <long>&#10; Returns the index of the neighbor in the table. If the node was not &#10; found in the table, then the value NEIGHBORHOOD is  returned, &#10; otherwise an index in the range [0, NEIGHBORHOOD-1] is returned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0xb6c25430" loc="49:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioState" loc="37:../../tos/lib/rfxlink/util/RadioState.nc">
      <function command="" provided="0" name="turnOff" ref="0xb6bd2d38" loc="44:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time.</short>
          <long>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time. The radio cannot send or receive in this state &#10; and releases all access to shared resources (e.g. SPI bus). &#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0xb6bcf740" loc="56:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Goes into receive state.</short>
          <long>&#10; Goes into receive state. The radio continuously receive messages &#10; and able to transmit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0xb6bcfd88" loc="63:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="58:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress)&#10; SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0xb6bcfc30" loc="63:../../tos/lib/rfxlink/util/RadioState.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="done" ref="0xb6bce210" loc="69:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="65:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.</short>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="standby" ref="0xb6bcf2c0" loc="50:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="46:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.</short>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0xb6bce6c8" loc="74:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="71:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Returns the currently selected channel.</short>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioSend" loc="37:../../tos/lib/rfxlink/util/RadioSend.nc">
      <function command="" provided="0" name="send" ref="0xb6bd1710" loc="48:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a tasklet. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6bd15b8" loc="48:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="ready" ref="0xb6bcc3e8" loc="63:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="58:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; This event is fired when the component is most likely able to accept &#10; a send request.</short>
          <long>&#10; This event is fired when the component is most likely able to accept &#10; a send request. If the send command has returned with a failure, then&#10; this event will be called at least once in the near future.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb6bd1e88" loc="56:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0xb6bd1d30" loc="56:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../tos/interfaces/Random.nc">
      <documentation loc="34:../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0xb6b8b9f8" loc="52:../../tos/interfaces/Random.nc">
        <documentation loc="48:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0xb6b8b550" loc="46:../../tos/interfaces/Random.nc">
        <documentation loc="42:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb750c8a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0xb6b6f098" loc="53:../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0xb6b6f098"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0xb6b6f6e8" loc="64:../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0xb6b6f098"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0xb6b6f590" loc="64:../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0xb6b6f098"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketFlag" loc="35:../../tos/lib/rfxlink/util/PacketFlag.nc">
      <function command="" provided="0" name="clear" ref="0xb6b59350" loc="55:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to FALSE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6b591f8" loc="55:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb6b5b088" loc="40:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="37:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Returns if the flag is set for this message.</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6b5ef00" loc="40:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setValue" ref="0xb6b5b820" loc="45:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="42:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to the specified value.</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6b5b4e0" loc="45:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0xb6b5b6c0" loc="45:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb6b5bda0" loc="50:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to TRUE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6b5bc48" loc="50:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioCCA" loc="37:../../tos/lib/rfxlink/util/RadioCCA.nc">
      <function event="" provided="0" name="done" ref="0xb6b3c010" loc="52:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="46:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Signals the completion of the clear channel assesment send command.</short>
          <long>&#10; Signals the completion of the clear channel assesment send command.&#10; SUCCESS means the channel is clear, EBUSY means the channel is not&#10; clear, and FAIL means that the clear channel assesment could not&#10; be finished or the operation was cancelled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0xb6b40e58" loc="52:../../tos/lib/rfxlink/util/RadioCCA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0xb6b40978" loc="44:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Starts the clear channel assesment procedure.</short>
          <long>&#10; Starts the clear channel assesment procedure. Returns EBUSY if the radio&#10; is currently servicing a clear channel assesment, and SUCCESS otherwise.&#10; The check will be performed only in the RX_READY state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0xb6aaf1a8" loc="54:../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0xb6aafb58" loc="66:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0xb6aaf710" loc="61:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0xb6aaf5b8" loc="61:../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0xb6ab5c70" loc="53:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0xb6ab4718" loc="62:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6ab45c0" loc="62:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0xb6ab22b8" loc="74:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6ab2160" loc="74:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0xb6ab4c28" loc="68:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0xb6ab2898" loc="81:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6ab2740" loc="81:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0xb6a24038" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6a24038"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0xb6a21b20" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="84:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0xb6a219c8" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0xb6a21138" loc="76:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="72:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb6a24530" loc="47:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="43:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6a24038"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0xb6a22090" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="56:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6a24038"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0xb6a24f28" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6a24038"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0xb6a224d0" loc="64:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0xb6a21598" loc="82:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="78:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb6a24aa8" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="49:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6a24038"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0xb6a24950" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6a24038"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb6a228d8" loc="67:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="66:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb6a22cd0" loc="70:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="54:../../tos/interfaces/SpiPacket.nc">
      <documentation loc="35:../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both. It is a &#34;send&#34; command because reading&#10; from the SPI requires writing bytes. The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.8 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb6a13ba8" loc="70:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="56:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0xb6a13638" loc="70:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0xb6a13850" loc="70:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6a13a40" loc="70:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb6a11298" loc="82:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="72:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0xb6a10ac0" loc="82:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0xb6a10cd8" loc="82:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6a10ec8" loc="82:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0xb6a11128" loc="83:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0xb6a14010" loc="45:../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0xb6a28e70" loc="45:../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Spi" loc="78:../../tos/chips/atm128/spi/Atm128Spi.nc">
      <function command="" provided="0" name="initSlave" ref="0xb6a05b60" loc="86:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="85:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into slave mode.</short>
          <long> Initialize the ATmega128 SPI bus into slave mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPolarity" ref="0xb69fe2b8" loc="126:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpiEnabled" ref="0xb6a01438" loc="117:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPhase" ref="0xb69fe8a0" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sampleOnTrailing" ref="0xb69fe748" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initMaster" ref="0xb6a05710" loc="83:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="82:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into master mode.</short>
          <long> Initialize the ATmega128 SPI bus into master mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterBit" ref="0xb69ff3a0" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="isMaster" ref="0xb69ff248" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0xb6a02658" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enabled" ref="0xb6a02500" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0xb6a03478" loc="97:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="93:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Read the SPI data register &#10; </short>
          <long> &#10; Read the SPI data register &#10; @return last data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterDoubleSpeed" ref="0xb69fca10" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0xb69fc8b8" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0xb6a02ab0" loc="114:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClock" ref="0xb69fd280" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="speed" ref="0xb69fd128" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0xb69fdb08" loc="136:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPolarity" ref="0xb69ffe30" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="highWhenIdle" ref="0xb69ffcd8" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterDoubleSpeed" ref="0xb69fc480" loc="140:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDataOrder" ref="0xb6a019c8" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lsbFirst" ref="0xb6a01870" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0xb6a03a10" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="99:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Write the SPI data register &#10; </short>
          <long> &#10; Write the SPI data register &#10; @param data   next data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6a038b8" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0xb6a01018" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="busOn" ref="0xb6a02ea8" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterBitSet" ref="0xb69ff850" loc="123:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPhase" ref="0xb69fecc8" loc="129:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClock" ref="0xb69fd690" loc="132:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0xb69fc010" loc="138:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOrderLsbFirst" ref="0xb6a01e00" loc="120:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0xb6a03010" loc="89:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="88:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Disable and sleep the ATmega128 SPI bus.</short>
          <long> Disable and sleep the ATmega128 SPI bus. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0xb6a02010" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="105:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short>&#10; Interrupt signalling SPI data cycle is complete.</short>
          <long>&#10; Interrupt signalling SPI data cycle is complete. &#10; @param data   data byte from data register&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6a03e80" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControlC" ref="0xb69970c8" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0xb69955d8" loc="87:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0xb699a838" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0xb6994038" loc="91:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0xb6995b98" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0xb6995a40" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0xb6997bb8" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0xb6997a60" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0xb6994600" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0xb69944a8" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0xb699ac88" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlC" ref="0xb6995168" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0xb6995010" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0xb6997640" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0xb69974e8" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Cache" loc="44:../../tos/interfaces/Cache.nc">
      <documentation loc="34:../../tos/interfaces/Cache.nc">
        <short>&#10; A data item cache.</short>
        <long>&#10; A data item cache. The cache does not own the items it caches:&#10; there is no allocation/deallocation policy, or notification of&#10; eviction. Correspondingly, using references (pointers) as data&#10; items can be difficult.&#10; &#10; @author Rodrigo Fonseca&#10; @author Philip Levis &#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0xb68979a8" loc="44:../../tos/interfaces/Cache.nc">
          <interfacedef-ref qname="Cache"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb68979a8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="insert" ref="0xb6893010" loc="51:../../tos/interfaces/Cache.nc">
        <documentation loc="45:../../tos/interfaces/Cache.nc">
          <short>&#10; Inserts an item in the cache, evicting if necessary.</short>
          <long>&#10; Inserts an item in the cache, evicting if necessary.&#10; An atomic lookup after insert should return true.&#10;&#10; @param item - the data item to insert.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Cache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb68979a8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="item" ref="0xb6897e10" loc="51:../../tos/interfaces/Cache.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb68979a8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0xb6893a48" loc="65:../../tos/interfaces/Cache.nc">
        <documentation loc="61:../../tos/interfaces/Cache.nc">
          <short>&#10; Flush the cache of all entries.</short>
          <long>&#10; Flush the cache of all entries.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Cache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="lookup" ref="0xb68935f8" loc="59:../../tos/interfaces/Cache.nc">
        <documentation loc="53:../../tos/interfaces/Cache.nc">
          <short>&#10; Return whether the data item is in the cache.</short>
          <long>&#10; Return whether the data item is in the cache.&#10;&#10; @param item - the data item to query&#10; @return Whether the item is in the cache.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Cache"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb68979a8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="item" ref="0xb68934a0" loc="59:../../tos/interfaces/Cache.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb68979a8"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CompareBit" loc="47:../../tos/lib/net/ctp/CompareBit.nc">
      <documentation loc="35:../../tos/lib/net/ctp/CompareBit.nc">
        <short> Link estimator asks the routing engine if this entry&#10; should be inserted into the neighbor table if the&#10; white bit on a link is set but there is no room for the link&#10; on the link table.</short>
        <long> Link estimator asks the routing engine if this entry&#10; should be inserted into the neighbor table if the&#10; white bit on a link is set but there is no room for the link&#10; on the link table. The return value is the &#34;pin bit&#34; - if true&#10; insert into the neighbor table. In the reference implementation&#10; the router will return true if the path through the source&#10; will be better than a path through at least one current neighbor.&#10;@ author Omprakash Gnawali&#10;@ Created: September 16, 2006&#10;@date   $Date: 2010-06-29 22:07:49 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="shouldInsert" ref="0xb678e198" loc="51:../../tos/lib/net/ctp/CompareBit.nc">
        <interfacedef-ref qname="CompareBit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb67919a8" loc="51:../../tos/lib/net/ctp/CompareBit.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0xb6791e30" loc="51:../../tos/lib/net/ctp/CompareBit.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb678e030" loc="51:../../tos/lib/net/ctp/CompareBit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CtpRoutingPacket" loc="43:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
      <documentation loc="33:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <short>&#10;  ADT for CTP routing frames.</short>
        <long>&#10;  ADT for CTP routing frames.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2009-09-21 02:19:42 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="clearOptions" ref="0xb66bee90" loc="51:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb66bed38" loc="51:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEtx" ref="0xb66ba060" loc="57:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb66bccf0" loc="57:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="etx" ref="0xb66bcee0" loc="57:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOption" ref="0xb66be750" loc="48:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e93188"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb66be3d0" loc="48:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="opt" ref="0xb66be5f0" loc="48:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e93188"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getEtx" ref="0xb66bc758" loc="56:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb66bc600" loc="56:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOption" ref="0xb66c0de8" loc="47:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e93188"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb66c0a68" loc="47:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="opt" ref="0xb66c0c88" loc="47:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e93188"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setParent" ref="0xb66bc010" loc="54:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb66bdc08" loc="54:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb66bde10" loc="54:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getParent" ref="0xb66bd650" loc="53:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7213700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb66bd4f8" loc="53:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getOption" ref="0xb66c04b0" loc="46:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e93188"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb66c0130" loc="46:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="opt" ref="0xb66c0350" loc="46:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e93188"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0xb65bb1c8" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb65bce10" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0xb65bb068" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0xb65c0f00" loc="15:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0xb65bc800" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb65bc488" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb71d1730"/>
                <typename><typedef-ref name="message_t" ref="0xb71d0518"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0xb65bc6a0" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0xb659c070" loc="54:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0xb65a2c28" loc="49:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0xb65a77d8" loc="56:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0xb65a1460" loc="72:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0xb659f518" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb659f3c0" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0xb65a1988" loc="79:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0xb65a7f08" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb65a7db0" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0xb659fa20" loc="100:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0xb65a1ee8" loc="85:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0xb65a6900" loc="71:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0xb65a6ec8" loc="81:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0xb65a62f0" loc="62:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0xb65a6198" loc="62:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0xb65a5628" loc="91:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0xb65a54d0" loc="91:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0xb65a87a0" loc="62:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0xb65a3010" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb65a8e30" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0xb65a36a8" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0xb65a3550" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb64f6ae0" loc="48:../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0xb64f6790" loc="48:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb64f6980" loc="48:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0xb64f3e88" loc="79:../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0xb64f3d30" loc="79:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0xb64f06a8" loc="90:../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0xb64f0358" loc="90:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb64f0548" loc="90:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0xb64f32f0" loc="65:../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0xb64ef560" loc="99:../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0xb64ef010" loc="99:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb64ef200" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0xb64ef3f8" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0xb64f3878" loc="72:../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb64f2968" loc="57:../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0xb64f2418" loc="57:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb64f2608" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb750c228"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0xb64f2800" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="37:../../tos/interfaces/UartByte.nc">
      <documentation loc="32:../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb64df8a8" loc="46:../../tos/interfaces/UartByte.nc">
        <documentation loc="39:../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0xb64df750" loc="46:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0xb64dc170" loc="56:../../tos/interfaces/UartByte.nc">
        <documentation loc="48:../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0xb64dfdd8" loc="56:../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0xb64dc010" loc="56:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:../../tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:../../tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0xb64d0850" loc="44:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0xb64d0010" loc="42:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0xb64cfe38" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb64cfce0" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0xb64cf538" loc="47:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0xb64d3710" loc="40:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0xb64d3b50" loc="41:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0xb64d0450" loc="43:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb73b2c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0xb64d0c50" loc="45:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73d16e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0xb64cf188" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb64cf030" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0xb64cf908" loc="48:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb750db88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
