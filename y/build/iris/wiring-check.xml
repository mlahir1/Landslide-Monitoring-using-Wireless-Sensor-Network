<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="26:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0xb71bbc50"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0xb72bb4a0"/></to>
    </wire>
    <wire loc="72:../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0xb72bb4a0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0xb72bca18"/></to>
    </wire>
    <wire loc="27:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb7150458"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb7102b60"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb7102b60"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0xb70fed20"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="28:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Read" scoped="" ref="0xb714cb30"/></from>
      <to><interface-ref name="Read" scoped="" ref="0xb6ffe0f0"/></to>
    </wire>
    <wire loc="29:../../tos/sensorboards/mts300/AccelXC.nc">
      <from><interface-ref name="Read" scoped="" ref="0xb6ffe0f0"/></from>
      <to><interface-ref name="ReadX" scoped="" ref="0xb6ffb920"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="29:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb71456d8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb711b1a0"/></to>
    </wire>
    <wire loc="51:../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb711b1a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb711a848"/></to>
    </wire>
    <wire loc="41:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0xb71b80f0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6e0f3b8"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6e0f3b8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6de7a78"/></to>
    </wire>
    <wire loc="42:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0xb71b87d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb65b3e68"/></to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb65b3e68"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb65691d0"/></to>
    </wire>
    <wire loc="43:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="RoutingControl" scoped="" ref="0xb71b4e30"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb6e44628"/></to>
    </wire>
    <wire loc="72:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb6e44628"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb6e1d240"/></to>
    </wire>
    <wire loc="45:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb7172ee8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb65b46a8"/></to>
    </wire>
    <wire loc="51:../../tos/lib/net/ctp/CollectionSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb65b46a8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb5dd46b0"/></to>
    </wire>
    <wire loc="46:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="SerialSend" scoped="" ref="0xb716a988"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb638a760"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb638a760"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb5d739f8"/></to>
    </wire>
    <wire loc="47:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb71b30a8"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6e43ef8"/>
      <arguments>
        <value cst="I:147">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="48:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb71b3408"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6e43848"/>
      <arguments>
        <value cst="I:147">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="RootControl" scoped="" ref="0xb71621a0"/></from>
      <to><interface-ref name="RootControl" scoped="" ref="0xb6e26b90"/></to>
    </wire>
    <wire loc="84:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="RootControl" scoped="" ref="0xb6e26b90"/></from>
      <to><interface-ref name="RootControl" scoped="" ref="0xb6e162a0"/></to>
    </wire>
    <wire loc="54:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="UARTMessagePool" scoped="" ref="0xb7157560"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb6376540"/></to>
    </wire>
    <wire loc="49:../../tos/system/PoolC.nc">
      <from><interface-ref name="Pool" scoped="" ref="0xb6376540"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb5d4af00"/></to>
    </wire>
    <wire loc="55:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="UARTQueue" scoped="" ref="0xb715eee8"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0xb63738a8"/></to>
    </wire>
    <wire loc="62:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0xb6365d58"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0xb72bb4a0"/></to>
    </wire>
    <wire loc="63:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="UARTSend" scoped="" ref="0xb635e7c0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb63699e0"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb63699e0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb5d27228"/></to>
    </wire>
    <wire loc="64:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="MessagePool" scoped="" ref="0xb6362300"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb636fbf8"/></to>
    </wire>
    <wire loc="49:../../tos/system/PoolC.nc">
      <from><interface-ref name="Pool" scoped="" ref="0xb636fbf8"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb5d39220"/></to>
    </wire>
    <wire loc="65:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="SendQueue" scoped="" ref="0xb6361928"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0xb636cf10"/></to>
    </wire>
    <wire loc="66:MultihopOscilloscopeAppC.nc">
      <from><interface-ref name="CollectionDebug" scoped="" ref="0xb6e1e550"/></from>
      <to><interface-ref name="CollectionDebug" scoped="" ref="0xb6365650"/></to>
    </wire>
    <wire loc="48:../../tos/system/PoolC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5d3ae60"/></to>
    </wire>
    <wire loc="48:../../tos/system/PoolC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5d4ab58"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0xb6441d70"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0xb643d920"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb647f6d8"/></to>
    </wire>
    <wire loc="59:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb656cdf0"/></to>
    </wire>
    <wire loc="46:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5e786d0"/></to>
    </wire>
    <wire loc="48:../../tos/system/PoolC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5e88550"/></to>
    </wire>
    <wire loc="48:../../tos/system/PoolC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5e93d88"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5f32948"/></to>
    </wire>
    <wire loc="120:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0xb6a6b4d8"/></to>
    </wire>
    <wire loc="52:../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6b160e8"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0xb5faa4e0"/></to>
    </wire>
    <wire loc="45:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6bbbbd0"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb5fc6408"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6033dc0"/></to>
    </wire>
    <wire loc="153:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb65e14d0"/></to>
    </wire>
    <wire loc="178:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb67ae3d0"/></to>
    </wire>
    <wire loc="229:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb673a500"/></to>
    </wire>
    <wire loc="103:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb60c8640"/></to>
    </wire>
    <wire loc="103:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb61057c0"/></to>
    </wire>
    <wire loc="53:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb70f7618"/></to>
    </wire>
    <wire loc="67:../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0xb72bcdb0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0xb735a528"/></to>
    </wire>
    <wire loc="53:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0xb735a528"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0xb72e18a8"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0xb71c3400"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0xb69d1858"/></to>
    </wire>
    <wire loc="123:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0xb71c3400"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0xb6a6ce40"/></to>
    </wire>
    <wire loc="68:../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0xb71c3400"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb72bd9d8"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb72bd9d8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb72b9d48"/></to>
    </wire>
    <wire loc="71:../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0xb71c3808"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0xb72b29c8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb63a2670"/></to>
    </wire>
    <wire loc="26:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0xb72b29c8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb68e12b0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0xb72b29c8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6ed6d68"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0xb72b2268"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0xb71d4010"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0xb72b0548"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb71d5bf8"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0xb72b0140"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb7104ba8"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0xb72b0140"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0xb72b8620"/></to>
    </wire>
    <wire loc="46:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0xb72b8620"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0xb72ad590"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0xb72b89f0"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0xb72b29c8"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0xb72a6ad0"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0xb72a1dc8"/></to>
    </wire>
    <wire loc="141:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0xb72a1dc8"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0xb7255170"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0xb72a9588"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0xb72b89f0"/></to>
    </wire>
    <wire loc="191:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0xb7283210"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb72010b0"/></to>
    </wire>
    <wire loc="165:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0xb7293750"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0xb723e090"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0xb723e090"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb626c7f8"/></to>
    </wire>
    <wire loc="176:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0xb728cce8"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0xb7235d68"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0xb7235d68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6230538"/></to>
    </wire>
    <wire loc="185:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0xb7287ea8"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0xb722c7d0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0xb722c7d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb61f7228"/></to>
    </wire>
    <wire loc="196:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG5" scoped="" ref="0xb7280750"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb71f3880"/></to>
    </wire>
    <wire loc="143:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0xb729f2f0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0xb72544f0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0xb72544f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb63126c0"/></to>
    </wire>
    <wire loc="183:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0xb7288a98"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0xb722d4f0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0xb722d4f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb61fbde0"/></to>
    </wire>
    <wire loc="146:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0xb729e750"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0xb724f3d8"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0xb724f3d8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62de538"/></to>
    </wire>
    <wire loc="157:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0xb7298ea8"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0xb7245170"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0xb7245170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62a37f8"/></to>
    </wire>
    <wire loc="168:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0xb7290670"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0xb723cd68"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0xb723cd68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62676c0"/></to>
    </wire>
    <wire loc="179:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0xb728ac08"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0xb7233ac8"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0xb7233ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb622b538"/></to>
    </wire>
    <wire loc="138:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0xb72acf10"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0xb7257410"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0xb7257410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb631a3b0"/></to>
    </wire>
    <wire loc="149:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0xb729c670"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0xb724d030"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0xb724d030"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62d9538"/></to>
    </wire>
    <wire loc="160:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0xb7296ce8"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0xb7244e48"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0xb7244e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb629e6c0"/></to>
    </wire>
    <wire loc="171:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0xb728e4b0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0xb723aac8"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0xb723aac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6262538"/></to>
    </wire>
    <wire loc="188:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0xb7285ce8"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0xb722a4f0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0xb722a4f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb61f20b0"/></to>
    </wire>
    <wire loc="194:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0xb72812f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb71f8880"/></to>
    </wire>
    <wire loc="174:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0xb728d8e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0xb7236a80"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0xb7236a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6233010"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0xb7255170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6315228"/></to>
    </wire>
    <wire loc="152:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0xb729a590"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0xb724cc88"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0xb724cc88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62d4538"/></to>
    </wire>
    <wire loc="192:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0xb7283e08"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb71fe880"/></to>
    </wire>
    <wire loc="155:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0xb7299a08"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0xb7247dc8"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0xb7247dc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62a6418"/></to>
    </wire>
    <wire loc="166:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0xb7292210"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0xb723e9e8"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0xb723e9e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb626a228"/></to>
    </wire>
    <wire loc="177:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0xb728b750"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0xb7234790"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0xb7234790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb622e010"/></to>
    </wire>
    <wire loc="186:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0xb72868e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0xb722b170"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0xb722b170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb61f6c08"/></to>
    </wire>
    <wire loc="144:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0xb729fce8"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0xb7254e48"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0xb7254e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb63100b0"/></to>
    </wire>
    <wire loc="147:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0xb729d210"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0xb724fd30"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0xb724fd30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62dc010"/></to>
    </wire>
    <wire loc="158:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0xb72978e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0xb7245ac8"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0xb7245ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62a1228"/></to>
    </wire>
    <wire loc="169:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0xb728f0a0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0xb723b790"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0xb723b790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62650b0"/></to>
    </wire>
    <wire loc="180:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0xb7289670"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0xb72314f0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0xb72314f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6229010"/></to>
    </wire>
    <wire loc="139:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0xb72a2928"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0xb7257d68"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0xb7257d68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6319d70"/></to>
    </wire>
    <wire loc="150:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0xb729b0a0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0xb724d988"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0xb724d988"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62d7010"/></to>
    </wire>
    <wire loc="161:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0xb7295750"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0xb72437d0"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0xb72437d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb629c0b0"/></to>
    </wire>
    <wire loc="189:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0xb7284750"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0xb722ae48"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0xb722ae48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb61f1a88"/></to>
    </wire>
    <wire loc="164:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0xb7294c08"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0xb723f6f8"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0xb723f6f8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6272de8"/></to>
    </wire>
    <wire loc="175:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0xb728c2f0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0xb7235410"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0xb7235410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62329e8"/></to>
    </wire>
    <wire loc="184:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0xb72874b0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0xb722de48"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0xb722de48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb61f97f8"/></to>
    </wire>
    <wire loc="195:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0xb7281ce8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb71f50b0"/></to>
    </wire>
    <wire loc="142:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0xb72a0830"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0xb7255ac8"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0xb7255ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6314c08"/></to>
    </wire>
    <wire loc="153:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0xb7299010"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0xb724b6b0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0xb724b6b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62d2010"/></to>
    </wire>
    <wire loc="182:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0xb72880a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0xb722eb00"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0xb722eb00"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb61fc418"/></to>
    </wire>
    <wire loc="156:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0xb72984b0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0xb7246790"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0xb7246790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62a5de0"/></to>
    </wire>
    <wire loc="167:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0xb7292c08"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0xb723c410"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0xb723c410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6269c08"/></to>
    </wire>
    <wire loc="178:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0xb728a210"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0xb7233170"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0xb7233170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb622d9e8"/></to>
    </wire>
    <wire loc="187:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0xb72852f0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0xb722bac8"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0xb722bac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb61f46c0"/></to>
    </wire>
    <wire loc="137:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0xb72ac518"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0xb7258a28"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0xb7258a28"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb631c998"/></to>
    </wire>
    <wire loc="148:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0xb729dc08"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0xb724e6b0"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0xb724e6b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62db9e8"/></to>
    </wire>
    <wire loc="159:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0xb72962f0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0xb72444f0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0xb72444f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62a0c08"/></to>
    </wire>
    <wire loc="170:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0xb728fa98"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0xb723a170"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0xb723a170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb6264a88"/></to>
    </wire>
    <wire loc="193:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0xb7282830"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb71fb0b0"/></to>
    </wire>
    <wire loc="173:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0xb728eea8"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0xb7236128"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0xb7236128"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62355c0"/></to>
    </wire>
    <wire loc="162:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0xb7294210"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0xb7242170"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0xb7242170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb629ba88"/></to>
    </wire>
    <wire loc="140:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0xb72a13d0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0xb7256790"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0xb7256790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb63177f8"/></to>
    </wire>
    <wire loc="151:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0xb729bb18"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0xb724c330"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0xb724c330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0xb62d69e8"/></to>
    </wire>
    <wire loc="54:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb72e0100"/></to>
    </wire>
    <wire loc="55:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0xb72e0d58"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0xb735b718"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0xb72cc218"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0xb70877b8"/></to>
    </wire>
    <wire loc="49:MultihopOscilloscopeC.nc">
      <from><interface-ref name="uartSendTask" scoped="" ref="0xb714d828"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb7104ba8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb711a500"/></to>
    </wire>
    <wire loc="54:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0xb71175c0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0xb7119d20"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0xb7119d20"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0xb72a2928"/></to>
    </wire>
    <wire loc="55:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0xb7116010"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0xb7105760"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0xb7105760"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0xb72acf10"/></to>
    </wire>
    <wire loc="56:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0xb71169f8"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0xb7104220"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0xb7104220"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0xb72ac518"/></to>
    </wire>
    <wire loc="54:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0xb70fed20"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0xb70f7dc8"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0xb70f7dc8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb7036f00"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb70f7618"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb70f0458"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0xb70f2da8"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0xb7009940"/></to>
    </wire>
    <wire loc="35:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb70f0458"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb70e0bb8"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0xb700e338"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb70edf08"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb703a248"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0xb70e8c78"/></to>
    </wire>
    <wire loc="36:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0xb70e8c78"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb7055010"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb7008360"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0xb70e25c8"/></to>
    </wire>
    <wire loc="37:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0xb70e25c8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb7054a88"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb7054a88"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb617f5b8"/></to>
    </wire>
    <wire loc="70:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb70e0bb8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6181660"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb7055010"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb6181a98"/></to>
    </wire>
    <wire loc="74:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb617e7f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb7099e68"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb7099e68"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb7090dd0"/></to>
    </wire>
    <wire loc="75:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0xb617b9d0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0xb70931a0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0xb70931a0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0xb708a1a0"/></to>
    </wire>
    <wire loc="76:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb617a3c8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0xb7093cc0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb7093cc0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0xb708acc0"/></to>
    </wire>
    <wire loc="77:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0xb6179dc0"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0xb7091858"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0xb7091858"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0xb7087c18"/></to>
    </wire>
    <wire loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0xb7038bd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0xb700b560"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="30:../../tos/sensorboards/mts300/AccelXC.nc">
      <from><interface-ref name="ActualX" scoped="" ref="0xb6ff7a18"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Read" scoped="" ref="0xb6141e38"/></to>
    </wire>
    <wire loc="36:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0xb6141e38"/></from>
      <to><interface-ref name="Read" scoped="" ref="0xb6ee3bc8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="31:../../tos/sensorboards/mts300/AccelXC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb61409d8"/></from>
      <to><interface-ref name="ConfigX" scoped="" ref="0xb6feb988"/></to>
    </wire>
    <wire loc="30:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="ConfigX" scoped="" ref="0xb6feb988"/></from>
      <to><interface-ref name="ConfigX" scoped="" ref="0xb6fe9160"/></to>
    </wire>
    <wire loc="24:../../tos/sensorboards/mts300/AccelReadP.nc">
      <from><interface-ref name="ReadX" scoped="" ref="0xb6ffb920"/></from>
      <to><interface-ref name="Read" scoped="" ref="0xb6efb2f8"/></to>
    </wire>
    <wire loc="29:../../tos/sensorboards/mts300/AccelReadP.nc">
      <from><interface-ref name="ReadY" scoped="" ref="0xb6ff89b8"/></from>
      <to><interface-ref name="Read" scoped="" ref="0xb6eea1b8"/></to>
    </wire>
    <wire loc="25:../../tos/sensorboards/mts300/AccelReadP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6efac30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6feeec8"/></to>
    </wire>
    <wire loc="29:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6feeec8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6f1c4e8"/></to>
    </wire>
    <wire loc="26:../../tos/sensorboards/mts300/AccelReadP.nc">
      <from><interface-ref name="Service" scoped="" ref="0xb6efa010"/></from>
      <to><interface-ref name="ActualX" scoped="" ref="0xb6ff7a18"/></to>
    </wire>
    <wire loc="30:../../tos/sensorboards/mts300/AccelReadP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6ee9b40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6feeec8"/></to>
    </wire>
    <wire loc="31:../../tos/sensorboards/mts300/AccelReadP.nc">
      <from><interface-ref name="Service" scoped="" ref="0xb6eeaeb8"/></from>
      <to><interface-ref name="ActualY" scoped="" ref="0xb6ff5a20"/></to>
    </wire>
    <wire loc="31:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="ConfigY" scoped="" ref="0xb6fed010"/></from>
      <to><interface-ref name="ConfigY" scoped="" ref="0xb6fe9738"/></to>
    </wire>
    <wire loc="105:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6f1c4e8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6104ce8"/></to>
    </wire>
    <wire loc="33:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6f18550"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6f1b070"/></to>
    </wire>
    <wire loc="107:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6f1b070"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6102890"/></to>
    </wire>
    <wire loc="34:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb6f18be8"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb6f1b708"/></to>
    </wire>
    <wire loc="108:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb6f1b708"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb6102f28"/></to>
    </wire>
    <wire loc="35:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6f19c68"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6feda70"/></to>
    </wire>
    <wire loc="37:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb6fe9d58"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb6f687e8"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb6f687e8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0xb70fed20"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="38:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="AccelPin" scoped="" ref="0xb6fe5088"/></from>
      <to><interface-ref name="PW4" scoped="" ref="0xb6fd61f8"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW4" scoped="" ref="0xb6fd61f8"/></from>
      <to><interface-ref name="PortC4" scoped="" ref="0xb72962f0"/></to>
    </wire>
    <wire loc="39:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="AccelAdcX" scoped="" ref="0xb6fe22b0"/></from>
      <to><interface-ref name="Adc3" scoped="" ref="0xb6fca128"/></to>
    </wire>
    <wire loc="95:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc3" scoped="" ref="0xb6fca128"/></from>
      <to><interface-ref name="Adc3" scoped="" ref="0xb6fc68b8"/></to>
    </wire>
    <wire loc="40:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <from><interface-ref name="AccelAdcY" scoped="" ref="0xb6fe26b0"/></from>
      <to><interface-ref name="Adc4" scoped="" ref="0xb6fca4f8"/></to>
    </wire>
    <wire loc="96:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc4" scoped="" ref="0xb6fca4f8"/></from>
      <to><interface-ref name="Adc4" scoped="" ref="0xb6fc6c88"/></to>
    </wire>
    <wire loc="67:../../tos/sensorboards/mts300/AccelP.nc">
      <from><interface-ref name="stopDone" scoped="" ref="0xb6fdd6c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int1_Interrupt" scoped="" ref="0xb6fd0198"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0xb6f75638"/></to>
    </wire>
    <wire loc="92:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc0" scoped="" ref="0xb6fcb598"/></from>
      <to><interface-ref name="Adc0" scoped="" ref="0xb6fc9d28"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW3" scoped="" ref="0xb6fd7810"/></from>
      <to><interface-ref name="PortC3" scoped="" ref="0xb72978e0"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW6" scoped="" ref="0xb6fd5650"/></from>
      <to><interface-ref name="PortC6" scoped="" ref="0xb7295750"/></to>
    </wire>
    <wire loc="97:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc5" scoped="" ref="0xb6fca8c8"/></from>
      <to><interface-ref name="Adc5" scoped="" ref="0xb6fc5090"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int1" scoped="" ref="0xb6fd34a0"/></from>
      <to><interface-ref name="PortE5" scoped="" ref="0xb728a210"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="USART1_TXD" scoped="" ref="0xb6fccb08"/></from>
      <to><interface-ref name="PortD3" scoped="" ref="0xb7292c08"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW1" scoped="" ref="0xb6fd83b0"/></from>
      <to><interface-ref name="PortC1" scoped="" ref="0xb72984b0"/></to>
    </wire>
    <wire loc="90:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int3_Interrupt" scoped="" ref="0xb6fcf010"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0xb6f71808"/></to>
    </wire>
    <wire loc="93:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc1" scoped="" ref="0xb6fcb968"/></from>
      <to><interface-ref name="Adc1" scoped="" ref="0xb6fc6118"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="USART1_RXD" scoped="" ref="0xb6fcc0e8"/></from>
      <to><interface-ref name="PortD2" scoped="" ref="0xb7292210"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW7" scoped="" ref="0xb6fd4050"/></from>
      <to><interface-ref name="PortC7" scoped="" ref="0xb7294210"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int0_Interrupt" scoped="" ref="0xb6fce9d8"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0xb6f7f560"/></to>
    </wire>
    <wire loc="98:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc6" scoped="" ref="0xb6fcad98"/></from>
      <to><interface-ref name="Adc6" scoped="" ref="0xb6fc5460"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int2" scoped="" ref="0xb6fd3e88"/></from>
      <to><interface-ref name="PortE6" scoped="" ref="0xb728ac08"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW2" scoped="" ref="0xb6fd8d88"/></from>
      <to><interface-ref name="PortC2" scoped="" ref="0xb7298ea8"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW5" scoped="" ref="0xb6fd6bd0"/></from>
      <to><interface-ref name="PortC5" scoped="" ref="0xb7296ce8"/></to>
    </wire>
    <wire loc="94:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc2" scoped="" ref="0xb6fcbd38"/></from>
      <to><interface-ref name="Adc2" scoped="" ref="0xb6fc64e8"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int0" scoped="" ref="0xb6fd4a38"/></from>
      <to><interface-ref name="PortE4" scoped="" ref="0xb728b750"/></to>
    </wire>
    <wire loc="86:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int2_Interrupt" scoped="" ref="0xb6fd0888"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0xb6f73758"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="USART1_CLK" scoped="" ref="0xb6fcf6b0"/></from>
      <to><interface-ref name="PortD5" scoped="" ref="0xb728f0a0"/></to>
    </wire>
    <wire loc="99:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Adc7" scoped="" ref="0xb6fc9208"/></from>
      <to><interface-ref name="Adc7" scoped="" ref="0xb6fc5830"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="PW0" scoped="" ref="0xb6fea958"/></from>
      <to><interface-ref name="PortC0" scoped="" ref="0xb7299a08"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Int3" scoped="" ref="0xb6fd2880"/></from>
      <to><interface-ref name="PortE7" scoped="" ref="0xb7289670"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6f7fb58"/></from>
      <to><interface-ref name="Int4" scoped="" ref="0xb6fbb4f8"/></to>
    </wire>
    <wire loc="75:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int4" scoped="" ref="0xb6fbb4f8"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6f8d3b0"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6f75c30"/></from>
      <to><interface-ref name="Int5" scoped="" ref="0xb6fbbd78"/></to>
    </wire>
    <wire loc="76:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int5" scoped="" ref="0xb6fbbd78"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6f8a538"/></to>
    </wire>
    <wire loc="85:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6f73d50"/></from>
      <to><interface-ref name="Int6" scoped="" ref="0xb6fb76b8"/></to>
    </wire>
    <wire loc="77:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int6" scoped="" ref="0xb6fb76b8"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6f886c0"/></to>
    </wire>
    <wire loc="89:../../tos/platforms/mica/MicaBusC.nc">
      <from><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6f71e00"/></from>
      <to><interface-ref name="Int7" scoped="" ref="0xb6fb6010"/></to>
    </wire>
    <wire loc="78:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int7" scoped="" ref="0xb6fb6010"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6f867a8"/></to>
    </wire>
    <wire loc="72:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int1" scoped="" ref="0xb6fb9a88"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6f94e68"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int2" scoped="" ref="0xb6fbc338"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6f91010"/></to>
    </wire>
    <wire loc="71:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int0" scoped="" ref="0xb6fb9208"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6fb4cf0"/></to>
    </wire>
    <wire loc="74:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int3" scoped="" ref="0xb6fbcbb8"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0xb6f8f228"/></to>
    </wire>
    <wire loc="80:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6f95510"/></from>
      <to><interface-ref name="IntSig0" scoped="" ref="0xb6fb3b00"/></to>
    </wire>
    <wire loc="81:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6f93630"/></from>
      <to><interface-ref name="IntSig1" scoped="" ref="0xb6fb2010"/></to>
    </wire>
    <wire loc="82:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6f917c8"/></from>
      <to><interface-ref name="IntSig2" scoped="" ref="0xb6fb2488"/></to>
    </wire>
    <wire loc="83:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6f8f9e0"/></from>
      <to><interface-ref name="IntSig3" scoped="" ref="0xb6fb2900"/></to>
    </wire>
    <wire loc="84:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6f8db68"/></from>
      <to><interface-ref name="IntSig4" scoped="" ref="0xb6fb2d78"/></to>
    </wire>
    <wire loc="85:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6f8acf0"/></from>
      <to><interface-ref name="IntSig5" scoped="" ref="0xb6fb02b0"/></to>
    </wire>
    <wire loc="86:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6f88e78"/></from>
      <to><interface-ref name="IntSig6" scoped="" ref="0xb6fb0728"/></to>
    </wire>
    <wire loc="87:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0xb6f85010"/></from>
      <to><interface-ref name="IntSig7" scoped="" ref="0xb6fb0ba0"/></to>
    </wire>
    <wire loc="106:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0xb6f1cc28"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0xb6102488"/></to>
    </wire>
    <wire loc="109:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb61013f8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb6f1bbb8"/></to>
    </wire>
    <wire loc="111:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0xb6101820"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0xb6105af8"/></to>
    </wire>
    <wire loc="75:../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0xb6100a50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb60e3970"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6f19c68"/></to>
    </wire>
    <wire loc="81:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0xb60e3f28"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0xb6f18238"/></to>
    </wire>
    <wire loc="83:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb60e2250"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6f18550"/></to>
    </wire>
    <wire loc="84:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb60e28e8"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb6f18be8"/></to>
    </wire>
    <wire loc="78:../../tos/lib/power/PowerManagerP.nc">
      <from><interface-ref name="stopTask" scoped="" ref="0xb60e2d20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../tos/lib/power/PowerManagerP.nc">
      <from><interface-ref name="startTask" scoped="" ref="0xb60e1190"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="37:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb6edd010"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb61409d8"/></to>
    </wire>
    <wire loc="38:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6edd848"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6edb830"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="39:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb6ed6100"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb6140eb0"/></to>
    </wire>
    <wire loc="31:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0xb6ee3bc8"/></from>
      <to><interface-ref name="Read" scoped="" ref="0xb6e6fb10"/></to>
    </wire>
    <wire loc="32:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0xb6ede010"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0xb6e6d720"/></to>
    </wire>
    <wire loc="33:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6e50500"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6edd848"/></to>
    </wire>
    <wire loc="34:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb6e6cc38"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb6edd010"/></to>
    </wire>
    <wire loc="36:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0xb6e548a8"/></from>
      <to><interface-ref name="Read" scoped="" ref="0xb6e6e738"/></to>
    </wire>
    <wire loc="37:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6e6c3c0"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6ed3300"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6ed3300"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6eca6a8"/></to>
    </wire>
    <wire loc="38:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0xb6e67410"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0xb6e530d0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0xb6ed0870"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0xb6ecac30"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6edb830"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6ea5b50"/></to>
    </wire>
    <wire loc="105:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6ea5b50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb60c7bc0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb6e822e8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb6ed6100"/></to>
    </wire>
    <wire loc="73:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6ec2498"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6ecf638"/></to>
    </wire>
    <wire loc="50:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6ecf638"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6ea3990"/></to>
    </wire>
    <wire loc="74:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0xb6ecb968"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0xb72b2268"/></to>
    </wire>
    <wire loc="76:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0xb6e80ef0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0xb6eca218"/></to>
    </wire>
    <wire loc="77:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6e7e618"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6ea16d0"/></to>
    </wire>
    <wire loc="107:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6ea16d0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb60c67b0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0xb6ea0dd8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0xb72ce3d0"/></to>
    </wire>
    <wire loc="106:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0xb6ea12c8"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0xb60c63a8"/></to>
    </wire>
    <wire loc="108:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb6ea1d68"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb60c6e48"/></to>
    </wire>
    <wire loc="109:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb60c5338"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb6e822e8"/></to>
    </wire>
    <wire loc="111:../../tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0xb60c5760"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0xb60c8978"/></to>
    </wire>
    <wire loc="75:../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0xb60c4970"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0xb60a93b0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0xb6e80ef0"/></to>
    </wire>
    <wire loc="82:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0xb60a97a8"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0xb6e7e300"/></to>
    </wire>
    <wire loc="84:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb60a9ac0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6e7e618"/></to>
    </wire>
    <wire loc="85:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb60a7230"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb6e7ecb0"/></to>
    </wire>
    <wire loc="104:../../tos/chips/atm1281/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0xb6e5f010"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RootControl" scoped="" ref="0xb6e162a0"/></from>
      <to><interface-ref name="RootControl" scoped="" ref="0xb65e3608"/></to>
    </wire>
    <wire loc="79:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CollectionPacket" scoped="" ref="0xb6e3f498"/></from>
      <to><interface-ref name="CollectionPacket" scoped="" ref="0xb6e1abf0"/></to>
    </wire>
    <wire loc="122:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CollectionPacket" scoped="" ref="0xb6e1abf0"/></from>
      <to><interface-ref name="CollectionPacket" scoped="" ref="0xb67ac4d0"/></to>
    </wire>
    <wire loc="76:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Intercept" scoped="" ref="0xb6e3ec10"/></from>
      <to><interface-ref name="Intercept" scoped="" ref="0xb6e1a158"/></to>
    </wire>
    <wire loc="119:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Intercept" scoped="" ref="0xb6e1a158"/></from>
      <to><interface-ref name="Intercept" scoped="" ref="0xb67ada70"/></to>
    </wire>
    <wire loc="78:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6e39ce8"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e1a4b0"/></to>
    </wire>
    <wire loc="120:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6e1a4b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb67add98"/></to>
    </wire>
    <wire loc="75:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb6e43ef8"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6e1ca88"/></to>
    </wire>
    <wire loc="118:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb6e1ca88"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb67ad6b0"/></to>
    </wire>
    <wire loc="73:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6e44d58"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6e1d970"/></to>
    </wire>
    <wire loc="115:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6e1d970"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb67aeb78"/></to>
    </wire>
    <wire loc="82:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CtpInfo" scoped="" ref="0xb6e29e68"/></from>
      <to><interface-ref name="CtpInfo" scoped="" ref="0xb6e184b8"/></to>
    </wire>
    <wire loc="168:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpInfo" scoped="" ref="0xb6e184b8"/></from>
      <to><interface-ref name="CtpInfo" scoped="" ref="0xb65e3ae0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6e43848"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6e1c3d8"/></to>
    </wire>
    <wire loc="117:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6e1c3d8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb67ad2d0"/></to>
    </wire>
    <wire loc="83:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CtpCongestion" scoped="" ref="0xb6e26728"/></from>
      <to><interface-ref name="CtpCongestion" scoped="" ref="0xb6e12e20"/></to>
    </wire>
    <wire loc="124:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpCongestion" scoped="" ref="0xb6e12e20"/></from>
      <to><interface-ref name="CtpCongestion" scoped="" ref="0xb67abc50"/></to>
    </wire>
    <wire loc="85:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb6e24570"/></from>
      <to><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb6e16858"/></to>
    </wire>
    <wire loc="151:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb6e16858"/></from>
      <to><interface-ref name="Routing" scoped="" ref="0xb65e3050"/></to>
    </wire>
    <wire loc="80:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CtpPacket" scoped="" ref="0xb6e2f920"/></from>
      <to><interface-ref name="CtpPacket" scoped="" ref="0xb6e19450"/></to>
    </wire>
    <wire loc="123:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpPacket" scoped="" ref="0xb6e19450"/></from>
      <to><interface-ref name="CtpPacket" scoped="" ref="0xb67acc48"/></to>
    </wire>
    <wire loc="116:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb6e1d240"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb67ae6e8"/></to>
    </wire>
    <wire loc="148:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb6e1d240"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb65e2770"/></to>
    </wire>
    <wire loc="149:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb6e1d240"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb673cbd0"/></to>
    </wire>
    <wire loc="87:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CollectionId" scoped="" ref="0xb6e15280"/></from>
      <to><interface-ref name="CollectionId" scoped="" ref="0xb6e23780"/></to>
    </wire>
    <wire loc="88:../../tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CollectionDebug" scoped="" ref="0xb6e15630"/></from>
      <to><interface-ref name="CollectionDebug" scoped="" ref="0xb6e1e550"/></to>
    </wire>
    <wire loc="193:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="LinkEstimator" scoped="" ref="0xb6e12460"/></from>
      <to><interface-ref name="LinkEstimator" scoped="" ref="0xb673bb10"/></to>
    </wire>
    <wire loc="121:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CollectionId" scoped="" ref="0xb679b5e8"/></from>
      <to><interface-ref name="CollectionId" scoped="" ref="0xb6e15280"/></to>
    </wire>
    <wire loc="128:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="QEntryPool" scoped="" ref="0xb67a2488"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb677b010"/></to>
    </wire>
    <wire loc="49:../../tos/system/PoolC.nc">
      <from><interface-ref name="Pool" scoped="" ref="0xb677b010"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb5e888f8"/></to>
    </wire>
    <wire loc="129:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="MessagePool" scoped="" ref="0xb67a1a30"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb6792b18"/></to>
    </wire>
    <wire loc="49:../../tos/system/PoolC.nc">
      <from><interface-ref name="Pool" scoped="" ref="0xb6792b18"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0xb5e911e0"/></to>
    </wire>
    <wire loc="132:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SendQueue" scoped="" ref="0xb67a56a0"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0xb67770a0"/></to>
    </wire>
    <wire loc="135:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SentCache" scoped="" ref="0xb679e010"/></from>
      <to><interface-ref name="Cache" scoped="" ref="0xb6764dc0"/></to>
    </wire>
    <wire loc="44:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
      <from><interface-ref name="Cache" scoped="" ref="0xb6764dc0"/></from>
      <to><interface-ref name="Cache" scoped="" ref="0xb5e78a98"/></to>
    </wire>
    <wire loc="140:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="LinkEstimator" scoped="" ref="0xb67a6010"/></from>
      <to><interface-ref name="LinkEstimator" scoped="" ref="0xb673bb10"/></to>
    </wire>
    <wire loc="154:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="BeaconSend" scoped="" ref="0xb65e1838"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb673b090"/></to>
    </wire>
    <wire loc="155:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="BeaconReceive" scoped="" ref="0xb65e1ef0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb673b770"/></to>
    </wire>
    <wire loc="156:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="LinkEstimator" scoped="" ref="0xb65e0220"/></from>
      <to><interface-ref name="LinkEstimator" scoped="" ref="0xb673bb10"/></to>
    </wire>
    <wire loc="158:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CompareBit" scoped="" ref="0xb65d8230"/></from>
      <to><interface-ref name="CompareBit" scoped="" ref="0xb6736300"/></to>
    </wire>
    <wire loc="160:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb65e0b58"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6dfc7b0"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb6dfc7b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6de0368"/></to>
    </wire>
    <wire loc="161:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0xb65df790"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6e0f3b8"/></to>
    </wire>
    <wire loc="162:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="BeaconTimer" scoped="" ref="0xb65dfdf8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb6749838"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb6749838"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0xb70fed20"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RouteTimer" scoped="" ref="0xb65db0c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb6745670"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb6745670"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0xb70fed20"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CollectionDebug" scoped="" ref="0xb65d96f8"/></from>
      <to><interface-ref name="CollectionDebug" scoped="" ref="0xb6e15630"/></to>
    </wire>
    <wire loc="165:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CollectionDebug" scoped="" ref="0xb6799708"/></from>
      <to><interface-ref name="CollectionDebug" scoped="" ref="0xb6e15630"/></to>
    </wire>
    <wire loc="166:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpInfo" scoped="" ref="0xb679c488"/></from>
      <to><interface-ref name="CtpInfo" scoped="" ref="0xb65e3ae0"/></to>
    </wire>
    <wire loc="167:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpCongestion" scoped="" ref="0xb65d9d90"/></from>
      <to><interface-ref name="CtpCongestion" scoped="" ref="0xb67abc50"/></to>
    </wire>
    <wire loc="172:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RetxmitTimer" scoped="" ref="0xb67aace0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb65d2d90"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb65d2d90"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0xb70fed20"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Random" scoped="" ref="0xb65d9300"/></from>
      <to><interface-ref name="Random" scoped="" ref="0xb6b1b478"/></to>
    </wire>
    <wire loc="56:../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0xb6b1b478"/></from>
      <to><interface-ref name="Random" scoped="" ref="0xb6b16ec8"/></to>
    </wire>
    <wire loc="176:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Random" scoped="" ref="0xb6799310"/></from>
      <to><interface-ref name="Random" scoped="" ref="0xb6b1b478"/></to>
    </wire>
    <wire loc="179:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb67aa0c0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb66cdbb8"/></to>
    </wire>
    <wire loc="64:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb66cdbb8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb5e629e8"/></to>
    </wire>
    <wire loc="180:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb679ed68"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb667c030"/></to>
    </wire>
    <wire loc="54:../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb667c030"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6e0c718"/>
      <arguments>
        <value cst="I:113">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="181:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubSnoop" scoped="" ref="0xb679c170"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6679a28"/></to>
    </wire>
    <wire loc="55:../../tos/system/AMSnooperC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6679a28"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6e0cdb0"/>
      <arguments>
        <value cst="I:113">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="182:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb67a6f20"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb66cc310"/></to>
    </wire>
    <wire loc="65:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb66cc310"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb5e5f150"/></to>
    </wire>
    <wire loc="183:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RootControl" scoped="" ref="0xb679b078"/></from>
      <to><interface-ref name="RootControl" scoped="" ref="0xb65e3608"/></to>
    </wire>
    <wire loc="184:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb67a6948"/></from>
      <to><interface-ref name="Routing" scoped="" ref="0xb65e3050"/></to>
    </wire>
    <wire loc="185:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0xb6799dc0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6e0f3b8"/></to>
    </wire>
    <wire loc="186:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb67aa758"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0xb66825d0"/></to>
    </wire>
    <wire loc="67:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0xb66825d0"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0xb5e5e410"/></to>
    </wire>
    <wire loc="187:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb679ba10"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb66cc9a8"/></to>
    </wire>
    <wire loc="66:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb66cc9a8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb5e5f7e8"/></to>
    </wire>
    <wire loc="188:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb679a690"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb711b1a0"/></to>
    </wire>
    <wire loc="195:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Random" scoped="" ref="0xb6735a28"/></from>
      <to><interface-ref name="Random" scoped="" ref="0xb6b1b478"/></to>
    </wire>
    <wire loc="197:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb6736698"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb65cc1f8"/></to>
    </wire>
    <wire loc="64:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb65cc1f8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb5dedcf0"/></to>
    </wire>
    <wire loc="198:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6735300"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb65c81f8"/></to>
    </wire>
    <wire loc="54:../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb65c81f8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6e0c718"/>
      <arguments>
        <value cst="I:112">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="199:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6737ad0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb65cc890"/></to>
    </wire>
    <wire loc="65:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb65cc890"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb5de93f0"/></to>
    </wire>
    <wire loc="200:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubAMPacket" scoped="" ref="0xb6736e18"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb65ccf28"/></to>
    </wire>
    <wire loc="66:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb65ccf28"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb5de9a88"/></to>
    </wire>
    <wire loc="224:../../tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb67356d0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6dd2228"/></to>
    </wire>
    <wire loc="100:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6dd2228"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6db7df0"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6de7a78"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6dd08e0"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0xb6e07538"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0xb6de3a68"/></to>
    </wire>
    <wire loc="84:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0xb6de3a68"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0xb6dcb8e0"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6e07890"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6de2bb0"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6de2bb0"/></from>
      <to><interface-ref name="PacketForActiveMessage" scoped="" ref="0xb6dc97d0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb6e0fc90"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb6de4380"/></to>
    </wire>
    <wire loc="81:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb6de4380"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb6dcd1f8"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb6e0cdb0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6de33f0"/></to>
    </wire>
    <wire loc="83:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb6de33f0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6dcb268"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0xb6df66e0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0xb6ddf5c8"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0xb6ddf5c8"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0xb6dc6e48"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6e0c718"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6de4d40"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6de4d40"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6dcdbb8"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6dfaa90"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6ddf040"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6ddf040"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6dc68c0"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0xb6dfe040"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0xb6ddfbe8"/></to>
    </wire>
    <wire loc="94:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0xb6ddfbe8"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0xb6dc1498"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb6de0368"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6dcaa60"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0xb6dee940"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0xb6dde390"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0xb6dde390"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0xb6dc1bb0"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMicro" scoped="" ref="0xb6df02a8"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6dd52e8"/></to>
    </wire>
    <wire loc="104:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6dd52e8"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6db5ec8"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6dedc58"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6dd3ca0"/></to>
    </wire>
    <wire loc="103:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6dd3ca0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6db2a08"/></to>
    </wire>
    <wire loc="254:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6dd08e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6b91728"/></to>
    </wire>
    <wire loc="99:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0xb6dd8158"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0xb6db8b60"/></to>
    </wire>
    <wire loc="345:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0xb6db8b60"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0xb6a7ea58"/></to>
    </wire>
    <wire loc="310:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6db2a08"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6ad8998"/></to>
    </wire>
    <wire loc="139:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0xb6dcb8e0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0xb6cbf468"/></to>
    </wire>
    <wire loc="141:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForActiveMessage" scoped="" ref="0xb6dc97d0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6cc1d98"/></to>
    </wire>
    <wire loc="136:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb6dcd1f8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb6cc0568"/></to>
    </wire>
    <wire loc="138:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb6dcb268"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6cbf0a8"/></to>
    </wire>
    <wire loc="98:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6ddddc8"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6db97f0"/></to>
    </wire>
    <wire loc="343:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6db97f0"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6a7f6f8"/></to>
    </wire>
    <wire loc="255:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0xb6dc6e48"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0xb6b90ce0"/></to>
    </wire>
    <wire loc="137:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6dcdbb8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6cc0ca8"/></to>
    </wire>
    <wire loc="309:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6db5ec8"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6aa7180"/></to>
    </wire>
    <wire loc="102:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6dd2720"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6db5330"/></to>
    </wire>
    <wire loc="347:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6db5330"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6a78950"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6ddaa10"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6dbb368"/></to>
    </wire>
    <wire loc="344:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6dbb368"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6a79208"/></to>
    </wire>
    <wire loc="288:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6dc68c0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6b0b628"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="ReceiveDefault" scoped="" ref="0xb6de2178"/></from>
      <to><interface-ref name="ReceiveDefault" scoped="" ref="0xb6dca010"/></to>
    </wire>
    <wire loc="143:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="ReceiveDefault" scoped="" ref="0xb6dca010"/></from>
      <to><interface-ref name="ReceiveDefault" scoped="" ref="0xb6cbf848"/></to>
    </wire>
    <wire loc="226:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0xb6dc1498"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0xb6b9c010"/></to>
    </wire>
    <wire loc="140:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb6dcaa60"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6cc11c0"/></to>
    </wire>
    <wire loc="264:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0xb6dc1bb0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0xb6b7eb40"/></to>
    </wire>
    <wire loc="346:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6db7df0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6a78458"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SnoopDefault" scoped="" ref="0xb6de2858"/></from>
      <to><interface-ref name="SnoopDefault" scoped="" ref="0xb6dca6f0"/></to>
    </wire>
    <wire loc="144:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SnoopDefault" scoped="" ref="0xb6dca6f0"/></from>
      <to><interface-ref name="SnoopDefault" scoped="" ref="0xb6cbfc28"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6b91728"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0xb6b84360"/></to>
    </wire>
    <wire loc="89:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0xb6a7ea58"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0xb6a68b98"/></to>
    </wire>
    <wire loc="175:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Notifier" scoped="" ref="0xb6dc2c78"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0xb6c7ace8"/></to>
    </wire>
    <wire loc="163:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendResource" scoped="" ref="0xb6dc73b0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6cacef0"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6cacef0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb602f180"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0xb6cbf468"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0xb6061298"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb6cc0568"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb60623a8"/></to>
    </wire>
    <wire loc="69:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0xb6cbf0a8"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0xb6062ec8"/></to>
    </wire>
    <wire loc="176:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0xb6dbc5b8"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0xb6be0f10"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0xb6be0f10"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0xb5ff44f0"/></to>
    </wire>
    <wire loc="177:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForIeee154Message" scoped="" ref="0xb6dc6148"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6c7bc68"/></to>
    </wire>
    <wire loc="86:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6a7f6f8"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6a69838"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0xb6b90ce0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0xb5fb2b68"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6cc1d98"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6063c18"/></to>
    </wire>
    <wire loc="68:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6cc0ca8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6062ae8"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6aa7180"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb5f5d688"/></to>
    </wire>
    <wire loc="82:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6a78950"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0xb69d5b48"/></to>
    </wire>
    <wire loc="95:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6a79208"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6a633d8"/></to>
    </wire>
    <wire loc="173:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Send" scoped="" ref="0xb6dc2098"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0xb6c7a318"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="ReceiveDefault" scoped="" ref="0xb6cbf848"/></from>
      <to><interface-ref name="ReceiveDefault" scoped="" ref="0xb6061678"/></to>
    </wire>
    <wire loc="117:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0xb6b9c010"/></from>
      <to><interface-ref name="UnconnectedPacketLink" scoped="" ref="0xb6b95390"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0xb6b7eb40"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0xb5fa9040"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb6cc11c0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6063040"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6ad8998"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb5f62e88"/></to>
    </wire>
    <wire loc="174:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Receive" scoped="" ref="0xb6dc2828"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0xb6c7a9d0"/></to>
    </wire>
    <wire loc="97:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6a78458"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6a62680"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SnoopDefault" scoped="" ref="0xb6cbfc28"/></from>
      <to><interface-ref name="SnoopDefault" scoped="" ref="0xb6061a58"/></to>
    </wire>
    <wire loc="116:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6d7b3a8"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6be1530"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6be1530"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb5ffb9f0"/></to>
    </wire>
    <wire loc="117:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb6d77830"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6d3fb78"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="118:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6d793a8"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6aa7180"/></to>
    </wire>
    <wire loc="119:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RF230Packet" scoped="" ref="0xb6d739d0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6a80c88"/></to>
    </wire>
    <wire loc="80:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6a80c88"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6a6ae70"/></to>
    </wire>
    <wire loc="124:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb6d3ea00"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb6a77428"/></to>
    </wire>
    <wire loc="101:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb6a77428"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb69d7030"/></to>
    </wire>
    <wire loc="125:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0xb6d3e268"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0xb6daf1a8"/></to>
    </wire>
    <wire loc="131:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6cbc010"/></from>
      <to><interface-ref name="ActiveMessageConfig" scoped="" ref="0xb6d8ca60"/></to>
    </wire>
    <wire loc="132:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6cbd7a8"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0xb6cafc60"/></to>
    </wire>
    <wire loc="133:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6cbdca0"/></from>
      <to><interface-ref name="TinyosReceive" scoped="" ref="0xb6c3a528"/></to>
    </wire>
    <wire loc="134:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6cbd010"/></from>
      <to><interface-ref name="TinyosPacket" scoped="" ref="0xb6c3a860"/></to>
    </wire>
    <wire loc="152:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb6cb8678"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb6cacef0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6cb81a0"/></from>
      <to><interface-ref name="TinyosSend" scoped="" ref="0xb6c3a030"/></to>
    </wire>
    <wire loc="168:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6c5e070"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6be1530"/></to>
    </wire>
    <wire loc="169:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6c5c250"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0xb6c57050"/></to>
    </wire>
    <wire loc="170:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6c5c748"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0xb6c57548"/></to>
    </wire>
    <wire loc="171:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6c5da30"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0xb6c57880"/></to>
    </wire>
    <wire loc="185:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6c39050"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6bdbd18"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6bdbd18"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb5fc9b18"/></to>
    </wire>
    <wire loc="186:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6c39548"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6bde170"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6bde170"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb5ff36b0"/></to>
    </wire>
    <wire loc="187:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6c39880"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6bdf948"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6bdf948"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb5ff4f08"/></to>
    </wire>
    <wire loc="193:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6bde4d8"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6b9c6a8"/></to>
    </wire>
    <wire loc="115:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6b9c6a8"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6b966c8"/></to>
    </wire>
    <wire loc="197:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6bdec70"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6b9dc58"/></to>
    </wire>
    <wire loc="114:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6b9dc58"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6b96390"/></to>
    </wire>
    <wire loc="220:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6b9f010"/></from>
      <to><interface-ref name="UniqueConfig" scoped="" ref="0xb6d988f8"/></to>
    </wire>
    <wire loc="221:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6bda678"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6b9d760"/></to>
    </wire>
    <wire loc="113:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6b9d760"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6b9ce70"/></to>
    </wire>
    <wire loc="230:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6b96e40"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6b0b628"/></to>
    </wire>
    <wire loc="232:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6b9ce70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6b91d00"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6b91d00"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6b84938"/></to>
    </wire>
    <wire loc="233:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6b96390"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6b90250"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6b90250"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6b84e30"/></to>
    </wire>
    <wire loc="234:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6b966c8"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6b90568"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6b90568"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6b831b0"/></to>
    </wire>
    <wire loc="250:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0xb6b84360"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6b7fd20"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6b7fd20"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb5fadee0"/></to>
    </wire>
    <wire loc="251:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6b84938"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6b7e330"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6b7e330"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb5faa818"/></to>
    </wire>
    <wire loc="252:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6b84e30"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6b7e828"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6b7e828"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb5faad10"/></to>
    </wire>
    <wire loc="253:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6b831b0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6aa67f0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6aa67f0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb5f5cd10"/></to>
    </wire>
    <wire loc="260:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0xb6b42da0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6b3d010"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0xb6b3d010"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb5f8bb78"/></to>
    </wire>
    <wire loc="261:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb6b41310"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6bda230"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb6bda230"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb5fc6010"/></to>
    </wire>
    <wire loc="262:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0xb6b42628"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0xb6a8b220"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0xb6a8b220"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0xb6a88010"/></to>
    </wire>
    <wire loc="263:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0xb6b42070"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0xb6daf1a8"/></to>
    </wire>
    <wire loc="268:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6bdab70"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6b3d4e8"/></to>
    </wire>
    <wire loc="59:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb6b3d4e8"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb5f88070"/></to>
    </wire>
    <wire loc="277:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6b1c928"/></from>
      <to><interface-ref name="RandomCollisionConfig" scoped="" ref="0xb6d936d8"/></to>
    </wire>
    <wire loc="278:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6b3d930"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6b0ccf8"/></to>
    </wire>
    <wire loc="279:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6b3de28"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6b0b230"/></to>
    </wire>
    <wire loc="280:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb6b1c270"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6d3fb78"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="286:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AckReceivedFlag" scoped="" ref="0xb6af14f0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0xb6a8deb8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="287:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb6af2458"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6d3fb78"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6af2b10"/></from>
      <to><interface-ref name="SoftwareAckConfig" scoped="" ref="0xb6d9b250"/></to>
    </wire>
    <wire loc="293:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6b0bb50"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6ae2de0"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0xb6ae2de0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6adfcc8"/></to>
    </wire>
    <wire loc="294:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6af2060"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6ae1310"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb6ae1310"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6ade250"/></to>
    </wire>
    <wire loc="299:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6adc250"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0xb6d97a10"/></to>
    </wire>
    <wire loc="300:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6adfcc8"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6a8b998"/></to>
    </wire>
    <wire loc="71:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0xb6a8b998"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6a88828"/></to>
    </wire>
    <wire loc="301:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6ade250"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6a8be70"/></to>
    </wire>
    <wire loc="72:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb6a8be70"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6a88d20"/></to>
    </wire>
    <wire loc="302:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioCCA" scoped="" ref="0xb6ade668"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0xb6a80820"/></to>
    </wire>
    <wire loc="79:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0xb6a80820"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0xb6a6aa08"/></to>
    </wire>
    <wire loc="307:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6aa4078"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6a78950"/></to>
    </wire>
    <wire loc="308:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6aa48f0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6aa04a0"/></to>
    </wire>
    <wire loc="311:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0xb6aa3098"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0xb6a8deb8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6aa0c68"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0xb6a80c88"/></to>
    </wire>
    <wire loc="326:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6a86d20"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0xb6d97a10"/></to>
    </wire>
    <wire loc="327:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb6a88828"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6a83e30"/></to>
    </wire>
    <wire loc="77:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0xb6a83e30"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6a6a060"/></to>
    </wire>
    <wire loc="328:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6a88d20"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6a803d0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb6a803d0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6a6a5b8"/></to>
    </wire>
    <wire loc="329:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubState" scoped="" ref="0xb6a88010"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0xb6a83658"/></to>
    </wire>
    <wire loc="76:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0xb6a83658"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0xb6a6b858"/></to>
    </wire>
    <wire loc="341:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6a76ec0"/></from>
      <to><interface-ref name="RF230DriverConfig" scoped="" ref="0xb6da0120"/></to>
    </wire>
    <wire loc="342:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6a74898"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6aa7180"/></to>
    </wire>
    <wire loc="349:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0xb6a720e0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0xb6a8deb8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="350:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0xb6a72778"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0xb6a8deb8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="351:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0xb6a72e38"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0xb6a8deb8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="352:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb6a71498"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6d3fb78"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="353:../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0xb6a71b78"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0xb6daf1a8"/></to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb6d3fb78"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6081f08"/></to>
    </wire>
    <wire loc="56:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb607f718"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb6d3ea00"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0xb607c070"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0xb6d3e268"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb605f6f0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb6cd1e38"/></to>
    </wire>
    <wire loc="75:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb6061dd0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6cbd010"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb60605d0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6cbd7a8"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb6060ac8"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6cbdca0"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6060e00"/></from>
      <to><interface-ref name="Config" scoped="" ref="0xb6cbc010"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0xb6cab648"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0xb602f8c0"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb6caba50"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb602fcc8"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb602e218"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb6cabf00"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0xb602e640"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0xb6030170"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0xb602ec38"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb5ff39f8"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb6cd1e38"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb5ff2010"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6bde4d8"/></to>
    </wire>
    <wire loc="62:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb5ff27a8"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6bdec70"/></to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0xb5fc5630"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0xb6bbb010"/></to>
    </wire>
    <wire loc="44:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0xb6bbb010"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0xb6bb8010"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb5fc5cc8"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb5fc21b0"/></to>
    </wire>
    <wire loc="45:../../tos/lib/rfxlink/util/NeighborhoodFlagC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb5fc21b0"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb6bb8a38"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb5fc6770"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6bda678"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb5fc6c68"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6bdab70"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="UniqueConfig" scoped="" ref="0xb5fc5078"/></from>
      <to><interface-ref name="Config" scoped="" ref="0xb6b9f010"/></to>
    </wire>
    <wire loc="118:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0xb6b95a68"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6b96e40"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0xb5fa9cc0"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0xb6b42070"/></to>
    </wire>
    <wire loc="65:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0xb5fa9548"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0xb6b42628"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0xb5fa8310"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0xb6b42da0"/></to>
    </wire>
    <wire loc="67:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0xb5fa87e8"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0xb6b41310"/></to>
    </wire>
    <wire loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0xb5fa6080"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="stateDoneTask" scoped="" ref="0xb5fa64b8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="deliverTask" scoped="" ref="0xb5fa8c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb5f884b8"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0xb6b3d930"/></to>
    </wire>
    <wire loc="58:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb5f878e8"/></from>
      <to><interface-ref name="Config" scoped="" ref="0xb6b1c928"/></to>
    </wire>
    <wire loc="60:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb5f889b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0xb6b3de28"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb5f88da8"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6b1c270"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Random" scoped="" ref="0xb5f874d0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0xb6b1b478"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <from><interface-ref name="calcNextRandom" scoped="" ref="0xb5f87ee0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0xb6b19b58"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0xb6b16608"/></to>
    </wire>
    <wire loc="54:../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb6b1e900"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6b160e8"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6aec8a0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0xb6ae0698"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0xb6ae1708"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0xb6ade668"/></to>
    </wire>
    <wire loc="70:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0xb6ae2668"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0xb6adf4b0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6ae1b00"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6adea80"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0xb6ae0330"/></from>
      <to><interface-ref name="Config" scoped="" ref="0xb6adc250"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0xb6ae2350"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0xb6adf178"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0xb6aece58"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0xb6ae0c70"/></to>
    </wire>
    <wire loc="61:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0xb5f59d38"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6aa48f0"/></to>
    </wire>
    <wire loc="63:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0xb5f5ab88"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6aa4078"/></to>
    </wire>
    <wire loc="64:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0xb5f594c0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0xb6aac5c8"/></to>
    </wire>
    <wire loc="26:../../tos/system/LocalTimeMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0xb6aac5c8"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0xb70f2da8"/></to>
    </wire>
    <wire loc="66:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0xb5f5a520"/></from>
      <to><interface-ref name="TimeStampFlag" scoped="" ref="0xb6aa3098"/></to>
    </wire>
    <wire loc="76:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb6a8c450"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0xb6a891a0"/></to>
    </wire>
    <wire loc="73:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0xb6a8a290"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0xb6a86170"/></to>
    </wire>
    <wire loc="74:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0xb6a8a688"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0xb6a86588"/></to>
    </wire>
    <wire loc="80:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0xb6a8ae20"/></from>
      <to><interface-ref name="Config" scoped="" ref="0xb6a86d20"/></to>
    </wire>
    <wire loc="78:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0xb6a8cee0"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0xb6a89c70"/></to>
    </wire>
    <wire loc="77:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0xb6a8ca08"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0xb6a89778"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb69d7030"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb68e7670"/></to>
    </wire>
    <wire loc="92:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0xb6a7de28"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0xb6a65010"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0xb69d5b48"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0xb68b6010"/></to>
    </wire>
    <wire loc="84:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0xb6a5a978"/></from>
      <to><interface-ref name="Config" scoped="" ref="0xb6a76ec0"/></to>
    </wire>
    <wire loc="87:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0xb6a57198"/></from>
      <to><interface-ref name="TransmitPowerFlag" scoped="" ref="0xb6a720e0"/></to>
    </wire>
    <wire loc="90:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0xb6a57830"/></from>
      <to><interface-ref name="RSSIFlag" scoped="" ref="0xb6a72778"/></to>
    </wire>
    <wire loc="93:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0xb6a57ef0"/></from>
      <to><interface-ref name="TimeSyncFlag" scoped="" ref="0xb6a72e38"/></to>
    </wire>
    <wire loc="96:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6a56710"/></from>
      <to><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6a74898"/></to>
    </wire>
    <wire loc="99:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0xb6a5a010"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0xb69d5b48"/></to>
    </wire>
    <wire loc="102:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0xb6a54630"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0xb6a71498"/></to>
    </wire>
    <wire loc="104:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SELN" scoped="" ref="0xb6a62a98"/></from>
      <to><interface-ref name="SELN" scoped="" ref="0xb69ddaf8"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SELN" scoped="" ref="0xb69ddaf8"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0xb729e750"/></to>
    </wire>
    <wire loc="105:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0xb6a615b8"/></from>
      <to><interface-ref name="SpiResource" scoped="" ref="0xb69da5b8"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0xb69da5b8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb69c0588"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0xb6a5cb40"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0xb69dacc0"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0xb69dacc0"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0xb69be5f0"/></to>
    </wire>
    <wire loc="108:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0xb6a60210"/></from>
      <to><interface-ref name="SLP_TR" scoped="" ref="0xb69d93d0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0xb69d93d0"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0xb7299010"/></to>
    </wire>
    <wire loc="109:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0xb6a60bf8"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0xb69d9db8"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0xb69d9db8"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0xb729f2f0"/></to>
    </wire>
    <wire loc="111:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0xb6a59d50"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0xb69d8820"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0xb69d8820"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0xb69d11d0"/></to>
    </wire>
    <wire loc="112:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0xb6a54010"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0xb6a71b78"/></to>
    </wire>
    <wire loc="113:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0xb6a5b528"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0xb6e530d0"/></to>
    </wire>
    <wire loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <from><interface-ref name="releaseSpi" scoped="" ref="0xb6a00910"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0xb68e7670"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0xb5f17ac0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0xb69be5f0"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0xb69b8d78"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0xb68b6010"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0xb688f988"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortCLKM" scoped="" ref="0xb69cfc18"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0xb728fa98"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortIRQ" scoped="" ref="0xb69c9678"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0xb7290670"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0xb69cbe68"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0xb6943508"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0xb6943508"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0xb6934bd8"/></to>
    </wire>
    <wire loc="96:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0xb69bcdc8"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0xb69b7450"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0xb69be248"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0xb69b89f0"/></to>
    </wire>
    <wire loc="92:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb69d25a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb69b8690"/></to>
    </wire>
    <wire loc="97:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb69c0588"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb694ee00"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0xb694ee00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0xb5f2fd38"/></to>
    </wire>
    <wire loc="99:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb694de20"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb69b7bd8"/></to>
    </wire>
    <wire loc="100:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Spi" scoped="" ref="0xb69a6bc8"/></from>
      <to><interface-ref name="SpiBus" scoped="" ref="0xb69b9d10"/></to>
    </wire>
    <wire loc="83:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SpiBus" scoped="" ref="0xb69b9d10"/></from>
      <to><interface-ref name="SPI" scoped="" ref="0xb6979100"/></to>
    </wire>
    <wire loc="101:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0xb69b3558"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0xb72ce3d0"/></to>
    </wire>
    <wire loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <from><interface-ref name="zeroTask" scoped="" ref="0xb698f1e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="Mcu" scoped="" ref="0xb6974758"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0xb72ce3d0"/></to>
    </wire>
    <wire loc="86:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SS" scoped="" ref="0xb6978ea8"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0xb729e750"/></to>
    </wire>
    <wire loc="87:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SCK" scoped="" ref="0xb69778c0"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0xb729d210"/></to>
    </wire>
    <wire loc="88:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MOSI" scoped="" ref="0xb69752e0"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0xb729dc08"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MISO" scoped="" ref="0xb6975cc8"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0xb729c670"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0xb694d568"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0xb5f2e490"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0xb694d970"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0xb5f2e898"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0xb5f2ed58"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0xb694de20"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0xb5f2d250"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0xb5f32c80"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0xb5f2d848"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0xb693e7f8"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0xb6935e98"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb694aec0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb693abb8"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb693c720"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0xb6931aa0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb693c720"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0xb692f6d8"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb693c720"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0xb692c340"/></to>
    </wire>
    <wire loc="43:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0xb5f15548"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb694aec0"/></to>
    </wire>
    <wire loc="44:../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0xb5f127e8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0xb693c720"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb68e1698"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb694aec0"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb688d360"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb68b3908"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0xb6891b40"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb68b2128"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb68b2128"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb68b0890"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb68afa58"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb694aec0"/></to>
    </wire>
    <wire loc="234:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0xb6798430"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="45:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
      <from><interface-ref name="CtpPacket" scoped="" ref="0xb5e77818"/></from>
      <to><interface-ref name="CtpPacket" scoped="" ref="0xb6e19450"/></to>
    </wire>
    <wire loc="63:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb5e629e8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb5e58060"/></to>
    </wire>
    <wire loc="64:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb5e5f150"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e07890"/></to>
    </wire>
    <wire loc="65:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb5e5f7e8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6dfc7b0"/></to>
    </wire>
    <wire loc="66:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0xb5e5e410"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6dfaa90"/></to>
    </wire>
    <wire loc="60:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb5e58728"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb66b8da0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb5e58dc0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6dfc7b0"/></to>
    </wire>
    <wire loc="53:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb66b8da0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb66b3be0"/></to>
    </wire>
    <wire loc="54:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb668c3d8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb6e0fc90"/></to>
    </wire>
    <wire loc="55:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb668ca80"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6dfc7b0"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb668b690"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e07890"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0xb668bd68"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0xb668a270"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb667c348"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e07890"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb667c9e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6dfc7b0"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMSnooperC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6679d40"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e07890"/></to>
    </wire>
    <wire loc="57:../../tos/system/AMSnooperC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb66783f0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6dfc7b0"/></to>
    </wire>
    <wire loc="269:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <from><interface-ref name="updateRouteTask" scoped="" ref="0xb65d89c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="388:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <from><interface-ref name="sendBeaconTask" scoped="" ref="0xb65d8588"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb5dedcf0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb5de33d0"/></to>
    </wire>
    <wire loc="64:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb5de93f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e07890"/></to>
    </wire>
    <wire loc="65:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb5de9a88"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6dfc7b0"/></to>
    </wire>
    <wire loc="67:../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0xb65cbb30"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0xb5de86b0"/></to>
    </wire>
    <wire loc="66:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0xb5de86b0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6dfaa90"/></to>
    </wire>
    <wire loc="60:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb5de3a98"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb66b8da0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb5de2150"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6dfc7b0"/></to>
    </wire>
    <wire loc="55:../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb65c8510"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e07890"/></to>
    </wire>
    <wire loc="56:../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb65c8ba8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb6dfc7b0"/></to>
    </wire>
    <wire loc="52:../../tos/lib/net/ctp/CollectionSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb65b4d40"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb5dd4d48"/></to>
    </wire>
    <wire loc="47:../../tos/lib/net/ctp/CollectionSenderP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb5dd4d48"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb6e39ce8"/></to>
    </wire>
    <wire loc="46:../../tos/lib/net/ctp/CollectionSenderP.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb5dd46b0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6e44d58"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="48:../../tos/lib/net/ctp/CollectionSenderP.nc">
      <from><interface-ref name="CollectionId" scoped="" ref="0xb6e23780"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CollectionId" scoped="" ref="0xb5dd2e10"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0xb65691d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0xb6552280"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb65a6750"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb659f108"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb65a5478"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb659e770"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb65a5120"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb659f848"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb65a2850"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb659ee08"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb65a5b68"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb659fb70"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0xb656cdf0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0xb6553ec0"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb6563ca8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb65a2d88"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0xb656d360"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6568100"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0xb656da18"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb6569a90"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0xb65637a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0xb6394808"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb6568100"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb64ddc60"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0xb6569a90"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0xb64dd8a0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0xb64a4400"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0xb65637a0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb654c500"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb6563ca8"/></to>
    </wire>
    <wire loc="71:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb64a33f0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb6563ca8"/></to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb649d420"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb6563ca8"/></to>
    </wire>
    <wire loc="74:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0xb64a48e8"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0xb654ba80"/></to>
    </wire>
    <wire loc="75:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0xb64a4dc0"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0xb654d960"/></to>
    </wire>
    <wire loc="77:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0xb6547c10"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0xb64a1858"/></to>
    </wire>
    <wire loc="78:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0xb654a260"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb64a03e0"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb64a03e0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb6483168"/></to>
    </wire>
    <wire loc="80:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0xb6497b80"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0xb64a0860"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0xb64a0860"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0xb6483a58"/></to>
    </wire>
    <wire loc="332:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0xb65171e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0xb6537518"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0xb651a970"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0xb6516e08"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0xb64a2030"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0xb64a2468"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0xb64846e8"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0xb64835d8"/></to>
    </wire>
    <wire loc="51:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0xb64835d8"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0xb647fe28"/></to>
    </wire>
    <wire loc="52:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0xb6483a58"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0xb647e290"/></to>
    </wire>
    <wire loc="50:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb6483168"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb647fa10"/></to>
    </wire>
    <wire loc="53:../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb6482530"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb6485868"/></to>
    </wire>
    <wire loc="33:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb6485868"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb6403c80"/></to>
    </wire>
    <wire loc="53:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb64570a0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb6482530"/></to>
    </wire>
    <wire loc="56:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0xb647eb28"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0xb6445a80"/></to>
    </wire>
    <wire loc="60:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0xb6445a80"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0xb643e288"/></to>
    </wire>
    <wire loc="57:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0xb6458010"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0xb6444010"/></to>
    </wire>
    <wire loc="61:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0xb6444010"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0xb643e7b8"/></to>
    </wire>
    <wire loc="58:../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0xb6458448"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0xb6444508"/></to>
    </wire>
    <wire loc="62:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0xb6444508"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0xb643ecd0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0xb6442b80"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0xb643c880"/></to>
    </wire>
    <wire loc="64:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0xb6442178"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0xb643dd70"/></to>
    </wire>
    <wire loc="65:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0xb6442688"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0xb643c368"/></to>
    </wire>
    <wire loc="68:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0xb643b4a8"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0xb72b2268"/></to>
    </wire>
    <wire loc="69:../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0xb643bbe8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0xb72ce3d0"/></to>
    </wire>
    <wire loc="34:../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0xb6399ec8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb64023c0"/></to>
    </wire>
    <wire loc="31:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0xb64023c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0xb63a4ca8"/></to>
    </wire>
    <wire loc="32:../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb63a3e58"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb6401d10"/></to>
    </wire>
    <wire loc="89:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb6401d10"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb63f2348"/></to>
    </wire>
    <wire loc="90:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0xb63fa010"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0xb63ef648"/></to>
    </wire>
    <wire loc="91:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0xb63fad00"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0xb63ee350"/></to>
    </wire>
    <wire loc="93:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb63f8ec0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0xb63eb268"/></to>
    </wire>
    <wire loc="94:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb63f8ec0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0xb63eae60"/></to>
    </wire>
    <wire loc="95:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0xb63f8ec0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0xb63e7a78"/></to>
    </wire>
    <wire loc="27:../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb63a2a58"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb6401d10"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb638adf8"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb65a5478"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb637a4d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb65a5b68"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0xb6379170"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb65a2850"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb5d70180"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb63846d8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb5d70818"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb65a5b68"/></to>
    </wire>
    <wire loc="54:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb63846d8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb6381db8"/></to>
    </wire>
    <wire loc="55:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0xb6380598"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0xb65a6750"/></to>
    </wire>
    <wire loc="56:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb6380c40"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb65a5b68"/></to>
    </wire>
    <wire loc="57:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb637f850"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb65a5478"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0xb637ff28"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0xb637e370"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0xb6368150"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0xb65a5478"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb63687e8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb65a5b68"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0xb6366410"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb65a2850"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0xb5d278f0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0xb63846d8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0xb5d26010"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0xb65a5b68"/></to>
    </wire>
    <wire loc="36:../../tos/lib/net/UARTDebugSenderP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0xb6359640"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../tos/system/MainC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:../../tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:../../tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:../../tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:../../tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:../../tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="40:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <documentation loc="34:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G5" loc="42(HplAtm128GeneralIOC.G5):../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="56:../../tos/platforms/iris/MeasureClockC.nc">
      <documentation loc="47:../../tos/platforms/iris/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="82:../../tos/chips/atm1281/McuSleepC.nc" safe="">
      <documentation loc="67:../../tos/chips/atm1281/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.6 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @date   October 30, 2007&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeC" loc="22:MultihopOscilloscopeC.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../tos/system/LedsC.nc">
      <documentation loc="34:../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="42:../../tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.TimerMilliC" loc="44(MultihopOscilloscopeAppC.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:../../tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:../../tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC):../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP):../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm1281AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0xb70df330"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm1281Timer2AsyncC" loc="77:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer2AsyncP" loc="78:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc" safe="">
      <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
        <short>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 2 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.Sensor" loc="18(MultihopOscilloscopeAppC.Sensor):../../tos/sensorboards/mts300/AccelXC.nc">
      <documentation loc="32:../../tos/sensorboards/mts300/mts300.h">
        <short>&#10; &#10; </short>
        <long>&#10; &#10; @author Hu Siquan &#60;husq@xbow.com>&#10; Revision: $Revision: 1.6 $&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AccelXC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AccelReadP" loc="1:../../tos/sensorboards/mts300/AccelReadP.nc">
      <configuration/>
    </component>
    <component qname="AccelConfigP" loc="17:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <documentation loc="10:../../tos/sensorboards/mts300/AccelConfigP.nc">
        <short>&#10; Internal component for basicsb photodiode.</short>
        <long>&#10; Internal component for basicsb photodiode. Arbitrates access to the photo&#10; diode and automatically turns it on or off based on user requests.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AccelP" loc="14:../../tos/sensorboards/mts300/AccelP.nc">
      <documentation loc="10:../../tos/sensorboards/mts300/AccelP.nc">
        <short>&#10; ADXL202JE accelerometer ADC configuration and power management.</short>
        <long>&#10; ADXL202JE accelerometer ADC configuration and power management.&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MicaBusC" loc="18:../../tos/platforms/mica/MicaBusC.nc">
      <documentation loc="11:../../tos/platforms/mica/MicaBusC.nc">
        <short>&#10; A simplistic beginning to providing a standard interface to the&#10; mica-family 51-pin bus.</short>
        <long>&#10; A simplistic beginning to providing a standard interface to the&#10; mica-family 51-pin bus. Just provides the PW0-PW7 and Int0-3 digital&#10; I/O pins and returns the ADC channel number for the ADC pins.&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MicaBusP" loc="16:../../tos/platforms/mica/MicaBusP.nc">
      <documentation loc="11:../../tos/platforms/mica/MicaBusP.nc">
        <short>&#10; Internal component of the simplistic mica bus interface.</short>
        <long>&#10; Internal component of the simplistic mica bus interface.&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC" loc="41:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <documentation loc="36:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
        <short>&#10; Component providing access to all external interrupt pins on ATmega128.</short>
        <long>&#10; Component providing access to all external interrupt pins on ATmega128.&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128InterruptSigP" loc="41:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10; Exposes just the interrupt vector routine for &#10; easy linking to generic components.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin0" loc="39(HplAtm128InterruptC.IntPin0):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:105">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin1" loc="39(HplAtm128InterruptC.IntPin1):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:105">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin2" loc="39(HplAtm128InterruptC.IntPin2):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:105">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin3" loc="39(HplAtm128InterruptC.IntPin3):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:105">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin4" loc="39(HplAtm128InterruptC.IntPin4):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin5" loc="39(HplAtm128InterruptC.IntPin5):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin6" loc="39(HplAtm128InterruptC.IntPin6):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin7" loc="39(HplAtm128InterruptC.IntPin7):../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MicaBusC.Atm128GpioInterrupt0C" loc="6(MicaBusC.Atm128GpioInterrupt0C):../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <documentation loc="3:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128GpioInterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="MicaBusC.Atm128GpioInterrupt1C" loc="6(MicaBusC.Atm128GpioInterrupt1C):../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <documentation loc="3:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128GpioInterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="MicaBusC.Atm128GpioInterrupt2C" loc="6(MicaBusC.Atm128GpioInterrupt2C):../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <documentation loc="3:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Atm128GpioInterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="MicaBusC.Atm128GpioInterrupt3C" loc="6(MicaBusC.Atm128GpioInterrupt3C):../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <documentation loc="3:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Atm128GpioInterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="AccelConfigP.WarmupTimer" loc="44(AccelConfigP.WarmupTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AccelConfigP.Arbiter" loc="89(AccelConfigP.Arbiter):../../tos/system/RoundRobinArbiterC.nc">
      <documentation loc="69:../../tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:mts300.accel">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AccelConfigP.Arbiter.Queue" loc="42(AccelConfigP.Arbiter.Queue):../../tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AccelConfigP.Arbiter.Arbiter" loc="52(AccelConfigP.Arbiter.Arbiter):../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AccelConfigP.PowerManager" loc="67(AccelConfigP.PowerManager):../../tos/lib/power/SplitControlPowerManagerC.nc">
      <documentation loc="41:../../tos/lib/power/SplitControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.  Non-virtualized devices are shared&#10; using a parameterized Resource interface, and are powered down according&#10; to some policy whenever there are no more pending requests to that Resource.&#10; The policy implemented by this component is to delay the power down of a&#10; device by some contant factor.  Such a policy is useful whenever a device&#10; has a long wake-up latency.  The cost of waiting for the device to power&#10; up can be avoided if the device is requested again before some predetermined&#10; amount of time.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>SplitControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>AsyncStdControl&#60;/code> or&#10; &#60;code>StdControl&#60;/code> interfaces, please use either the&#10; &#60;code>AsyncStdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SplitControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AccelConfigP.PowerManager.PowerManager" loc="58(AccelConfigP.PowerManager.PowerManager):../../tos/lib/power/PowerManagerP.nc">
      <documentation loc="41:../../tos/lib/power/PowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AccelReadP.MultiplexX" loc="23(AccelReadP.MultiplexX):../../tos/system/ArbitratedReadC.nc">
      <documentation loc="10:../../tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AccelReadP.MultiplexY" loc="23(AccelReadP.MultiplexY):../../tos/system/ArbitratedReadC.nc">
      <documentation loc="10:../../tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.Sensor.AdcX" loc="21(MultihopOscilloscopeAppC.Sensor.AdcX):../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <documentation loc="10:../../tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="17:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <documentation loc="10:../../tos/chips/atm1281/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="51:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="44:../../tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="51:../../tos/chips/atm1281/adc/Atm128AdcP.nc" safe="">
      <documentation loc="40:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega1281 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega1281 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="44:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="36:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="47:../../tos/chips/atm1281/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="38:../../tos/chips/atm1281/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega1281 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega1281 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="89(Atm128AdcC.AdcArbiter):../../tos/system/RoundRobinArbiterC.nc">
      <documentation loc="69:../../tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="42(Atm128AdcC.AdcArbiter.Queue):../../tos/system/RoundRobinResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="67(Atm128AdcC.PM):../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="58(Atm128AdcC.PM.PowerManager):../../tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:../../tos/chips/atm1281/adc/AdcP.nc" safe="">
      <documentation loc="39:../../tos/chips/atm1281/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="34:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):../../tos/system/ArbitratedReadC.nc">
      <documentation loc="10:../../tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CollectionC" loc="45:../../tos/lib/net/ctp/CollectionC.nc">
      <documentation loc="34:../../tos/lib/net/ctp/CollectionC.nc">
        <short>&#10; A data collection service that uses a tree routing protocol&#10; to deliver data to collection roots, following TEP 119.</short>
        <long>&#10; A data collection service that uses a tree routing protocol&#10; to deliver data to collection roots, following TEP 119.&#10;&#10; @author Rodrigo Fonseca&#10; @author Omprakash Gnawali&#10; @author Kyle Jamieson&#10; @author Philip Levis&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CtpP" loc="77:../../tos/lib/net/ctp/CtpP.nc">
      <documentation loc="66:../../tos/lib/net/ctp/CtpP.nc">
        <short>&#10; A data collection service that uses a tree routing protocol&#10; to deliver data to collection roots, following TEP 119.</short>
        <long>&#10; A data collection service that uses a tree routing protocol&#10; to deliver data to collection roots, following TEP 119.&#10;&#10; @author Rodrigo Fonseca&#10; @author Omprakash Gnawali&#10; @author Kyle Jamieson&#10; @author Philip Levis&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="ActiveMessageC" loc="37:../../tos/platforms/iris/ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230ActiveMessageC" loc="41:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC" loc="37:../../tos/chips/rf230/RF230RadioC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC.TaskletC" loc="42(RF230RadioC.TaskletC):../../tos/lib/rfxlink/util/TaskletC.nc">
      <instance number="0">
        <component-ref qname="TaskletC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioP" loc="39:../../tos/chips/rf230/RF230RadioP.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC" loc="37(RF230RadioC.RadioAlarmC):../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC.RadioAlarmP" loc="50(RF230RadioC.RadioAlarmC.RadioAlarmP):../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC" loc="35(RF230RadioC.ActiveMessageLayerC):../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP" loc="38(RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP):../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.AutoResourceAcquireLayerC" loc="35(RF230RadioC.AutoResourceAcquireLayerC):../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <instance number="0">
        <component-ref qname="AutoResourceAcquireLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC" loc="83(RF230RadioC.SendResourceC):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:RADIO_SEND_RESOURCE">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Queue" loc="42(RF230RadioC.SendResourceC.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <documentation loc="33:../../tos/system/FcfsResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Arbiter" loc="49(RF230RadioC.SendResourceC.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154MessageLayerC" loc="35(RF230RadioC.Ieee154MessageLayerC):../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154MessageLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TinyosNetworkLayerC" loc="50(RF230RadioC.TinyosNetworkLayerC):../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <instance number="0">
        <component-ref qname="TinyosNetworkLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC" loc="35(RF230RadioC.Ieee154PacketLayerC):../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP" loc="37(RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP):../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC" loc="35(RF230RadioC.UniqueLayerC):../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC.UniqueLayerP" loc="38(RF230RadioC.UniqueLayerC.UniqueLayerP):../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="NeighborhoodC" loc="35:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <configuration/>
    </component>
    <component qname="NeighborhoodP" loc="37:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC.NeighborhoodFlagC" loc="35(RF230RadioC.UniqueLayerC.NeighborhoodFlagC):../../tos/lib/rfxlink/util/NeighborhoodFlagC.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodFlagC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.PacketLinkLayerC" loc="73(RF230RadioC.PacketLinkLayerC):../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketLinkLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC" loc="35(RF230RadioC.LowPowerListeningLayerC):../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP" loc="35(RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP):../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC" loc="35(RF230RadioC.MessageBufferLayerC):../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP" loc="39(RF230RadioC.MessageBufferLayerC.MessageBufferLayerP):../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC" loc="35(RF230RadioC.CollisionAvoidanceLayerC):../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP" loc="38(RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP):../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="43:../../tos/system/RandomC.nc">
      <documentation loc="33:../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.SoftwareAckLayerC" loc="38(RF230RadioC.SoftwareAckLayerC):../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <instance number="0">
        <component-ref qname="SoftwareAckLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CsmaLayerC" loc="35(RF230RadioC.CsmaLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="0">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC" loc="37(RF230RadioC.TimeStampingLayerC):../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP" loc="38(RF230RadioC.TimeStampingLayerC.TimeStampingLayerP):../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMilliC" loc="19:../../tos/system/LocalTimeMilliC.nc">
      <documentation loc="11:../../tos/system/LocalTimeMilliC.nc">
        <short>&#10; Provide current time via the LocalTime&#60;TMilli> interface.</short>
        <long>&#10; Provide current time via the LocalTime&#60;TMilli> interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MetadataFlagsLayerC" loc="38(RF230RadioC.MetadataFlagsLayerC):../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <instance number="0">
        <component-ref qname="MetadataFlagsLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TrafficMonitorLayerC" loc="35(RF230RadioC.TrafficMonitorLayerC):../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="1">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230DriverLayerC" loc="38:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <configuration/>
    </component>
    <component qname="RF230DriverLayerP" loc="42:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <module/>
    </component>
    <component qname="HplRF230C" loc="37:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <configuration/>
    </component>
    <component qname="HplRF230P" loc="35:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <module/>
    </component>
    <component qname="Atm128SpiC" loc="80:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <documentation loc="66:../../tos/chips/atm128/spi/Atm128SpiC.nc">
        <short>&#10; The HAL of the SPI bus on the atm128.</short>
        <long>&#10; The HAL of the SPI bus on the atm128.&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiC.nc,v 1.7 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10; @author Joe Polastre&#10; @date   September 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128SpiP" loc="89:../../tos/chips/atm128/spi/Atm128SpiP.nc" safe="">
      <documentation loc="67:../../tos/chips/atm128/spi/Atm128SpiP.nc">
        <short>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.</short>
        <long>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.  This module assumes the bus has been reserved and&#10; checks that the bus owner is in fact the person using the bus.&#10; SpiPacket provides an asynchronous send interface where the&#10; transmit data length is equal to the receive data length, while&#10; SpiByte provides an interface for sending a single byte&#10; synchronously. SpiByte allows a component to send a few bytes&#10; in a simple fashion: if more than a handful need to be sent,&#10; SpiPacket should be used.&#10;&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiP.nc,v 1.12 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128SpiC" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
        <short>&#10; Configuration encapsulating the basic SPI HPL for the atm128.</short>
        <long>&#10; Configuration encapsulating the basic SPI HPL for the atm128.&#10;&#10; &#60;pre>&#10; $Id: HplAtm128SpiC.nc,v 1.5 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128SpiP" loc="73:../../tos/chips/atm128/spi/HplAtm128SpiP.nc" safe="">
      <documentation loc="63:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
        <short>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.</short>
        <long>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter" loc="83(Atm128SpiC.Arbiter):../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128SpiC.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Queue" loc="42(Atm128SpiC.Arbiter.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <documentation loc="33:../../tos/system/FcfsResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Arbiter" loc="49(Atm128SpiC.Arbiter.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer1C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer1P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC" loc="28(HplRF230C.AlarmC):../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="InitOneP.InitOne" loc="44(InitOneP.InitOne):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC.NAlarm" loc="51(HplRF230C.AlarmC.NAlarm):../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TOne" ref="0xb72e5db0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC" loc="37:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <configuration/>
    </component>
    <component qname="CounterOne16C" loc="22:../../tos/platforms/mica/CounterOne16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterOne16C.nc">
        <short>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C.NCounter" loc="42(CounterOne16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TOne" ref="0xb72e5db0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.TransformCounterC" loc="54(LocalTimeMicroC.TransformCounterC):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.CounterToLocalTimeC" loc="46(LocalTimeMicroC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.Forwarder" loc="107(CtpP.Forwarder):../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <instance number="0">
        <component-ref qname="CtpForwardingEngineP"/>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.MessagePoolP" loc="41(CtpP.MessagePoolP):../../tos/system/PoolC.nc">
      <documentation loc="33:../../tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
            <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
          </type-tag>
          <value cst="I:12">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.MessagePoolP.PoolP" loc="53(CtpP.MessagePoolP.PoolP):../../tos/system/PoolP.nc">
      <documentation loc="34:../../tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0xb67933d8"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.QEntryPoolP" loc="41(CtpP.QEntryPoolP):../../tos/system/PoolC.nc">
      <documentation loc="33:../../tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb685a3a0"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0xb685a628"/></typename>
          </type-tag>
          <value cst="I:12">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.QEntryPoolP.PoolP" loc="53(CtpP.QEntryPoolP.PoolP):../../tos/system/PoolP.nc">
      <documentation loc="34:../../tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0xb67933d8"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.SendQueueP" loc="42(CtpP.SendQueueP):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb685a3a0"/>
              <typename><typedef-ref name="fe_queue_entry_t" ref="0xb685a628"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:13">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.SentCacheP" loc="38(CtpP.SentCacheP):../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
      <documentation loc="32:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
        <short>&#10; An LRU cache CTP packet instances, where insertion represents use.</short>
        <long>&#10; An LRU cache CTP packet instances, where insertion represents use.&#10;&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="LruCtpMsgCacheC"/>
        <arguments>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.SentCacheP.CacheP" loc="43(CtpP.SentCacheP.CacheP):../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
      <documentation loc="32:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
        <short>&#10; An LRU cache that stores the signature of a CTP packet instance.</short>
        <long>&#10; An LRU cache that stores the signature of a CTP packet instance.&#10; An insert operation indicates &#34;use&#34;.  Inserting an element not in&#10; the cache will replace the oldest, and inserting an element already&#10; in the cache will refresh its age.&#10;&#10; @author Philip Levis &#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="LruCtpMsgCacheP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.RoutingBeaconTimer" loc="44(CtpP.RoutingBeaconTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.RouteUpdateTimer" loc="44(CtpP.RouteUpdateTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="LinkEstimatorP" loc="42:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <module/>
    </component>
    <component qname="CtpP.AMSenderC" loc="47(CtpP.AMSenderC):../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:113">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.AMSenderC.SenderC" loc="47(CtpP.AMSenderC.SenderC):../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.AMSenderC.SenderC.AMQueueEntryP" loc="43(CtpP.AMSenderC.SenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.AMReceiverC" loc="43(CtpP.AMReceiverC):../../tos/system/AMReceiverC.nc">
      <documentation loc="33:../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:113">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.AMSnooperC" loc="44(CtpP.AMSnooperC):../../tos/system/AMSnooperC.nc">
      <documentation loc="33:../../tos/system/AMSnooperC.nc">
        <short>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node.</short>
        <long>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node. &#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSnooperC"/>
        <arguments>
          <value cst="I:113">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.Router" loc="107(CtpP.Router):../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <documentation loc="38:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
        <short> &#10;  The TreeRoutingEngine is responsible for computing the routes for&#10;  collection.</short>
        <long> &#10;  The TreeRoutingEngine is responsible for computing the routes for&#10;  collection.  It builds a set of trees rooted at specific nodes (roots) and&#10;  maintains these trees using information provided by the link estimator on&#10;  the quality of one hop links.&#10; &#10;  &#60;p>Each node is part of only one tree at any given time, but there is no&#10;  difference from the node's point of view of which tree it is part. In other&#10;  words, a message is sent towards &#60;i>a&#60;/i> root, but which one is not&#10;  specified. It is assumed that the roots will work together to have all data&#10;  aggregated later if need be.  The tree routing engine's responsibility is&#10;  for each node to find the path with the least number of transmissions to&#10;  any one root.&#10;&#10;  &#60;p>The tree is proactively maintained by periodic beacons sent by each&#10;  node. These beacons are jittered in time to prevent synchronizations in the&#10;  network. All nodes maintain the same &#60;i>average&#60;/i> beacon sending rate&#10;  (defined by BEACON_INTERVAL +- 50%). The beacon contains the node's parent,&#10;  the current hopcount, and the cumulative path quality metric. The metric is&#10;  defined as the parent's metric plus the bidirectional quality of the link&#10;  between the current node and its parent.  The metric represents the&#10;  expected number of transmissions along the path to the root, and is 0 by&#10;  definition at the root.&#10; &#10;  &#60;p>Every time a node receives an update from a neighbor it records the&#10;  information if the node is part of the neighbor table. The neighbor table&#10;  keeps the best candidates for being parents i.e., the nodes with the best&#10;  path metric. The neighbor table does not store the full path metric,&#10;  though. It stores the parent's path metric, and the link quality to the&#10;  parent is only added when the information is needed: (i) when choosing a&#10;  parent and (ii) when choosing a route. The nodes in the neighbor table are&#10;  a subset of the nodes in the link estimator table, as a node is not&#10;  admitted in the neighbor table with an estimate of infinity.&#10; &#10;  &#60;p>There are two uses for the neighbor table, as mentioned above. The first&#10;  one is to select a parent. The parent is just the neighbor with the best&#10;  path metric. It serves to define the node's own path metric and hopcount,&#10;  and the set of child-parent links is what defines the tree. In a sense the&#10;  tree is defined to form a coherent propagation substrate for the path&#10;  metrics. The parent is (re)-selected periodically, immediately before a&#10;  node sends its own beacon, in the updateRouteTask.&#10;  &#10;  &#60;p>The second use is to actually choose a next hop towards any root at&#10;  message forwarding time.  This need not be the current parent, even though&#10;  it is currently implemented as such.&#10;&#10;  &#60;p>The operation of the routing engine has two main tasks and one main&#10;  event: updateRouteTask is called periodically and chooses a new parent;&#10;  sendBeaconTask broadcasts the current route information to the neighbors.&#10;  The main event is the receiving of a neighbor's beacon, which updates the&#10;  neighbor table.&#10;  &#10;  &#60;p> The interface with the ForwardingEngine occurs through the nextHop()&#10;  call.&#10; &#10;  &#60;p> Any node can become a root, and routed messages from a subset of the&#10;  network will be routed towards it. The RootControl interface allows&#10;  setting, unsetting, and querying the root state of a node. By convention,&#10;  when a node is root its hopcount and metric are 0, and the parent is&#10;  itself. A root always has a valid route, to itself.&#10;&#10;  @author Rodrigo Fonseca&#10;  @author Philip Levis (added trickle-like updates)&#10;  Acknowledgment: based on MintRoute, MultiHopLQI, BVR tree construction, Berkeley's MTree&#10;                           &#10;  @date   $Date: 2010-06-29 22:07:49 $&#10;  @see Net2-WG&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CtpRoutingEngineP"/>
        <arguments>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:128">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:512000">
            <type-int cname="long" size="I:4" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.RetxmitTimer" loc="44(CtpP.RetxmitTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.SendControl" loc="47(CtpP.SendControl):../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:112">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.SendControl.SenderC" loc="47(CtpP.SendControl.SenderC):../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.SendControl.SenderC.AMQueueEntryP" loc="43(CtpP.SendControl.SenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.ReceiveControl" loc="43(CtpP.ReceiveControl):../../tos/system/AMReceiverC.nc">
      <documentation loc="33:../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:112">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.CollectionSenderC" loc="43(MultihopOscilloscopeAppC.CollectionSenderC):../../tos/lib/net/ctp/CollectionSenderC.nc">
      <documentation loc="32:../../tos/lib/net/ctp/CollectionSenderC.nc">
        <short>&#10; The virtualized collection sender abstraction.</short>
        <long>&#10; The virtualized collection sender abstraction.&#10;&#10; @author Kyle Jamieson&#10; @author Philip Levis&#10; @date April 25 2006&#10; @see TinyOS Net2-WG&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CollectionSenderC"/>
        <arguments>
          <value cst="I:147">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP" loc="34(MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP):../../tos/lib/net/ctp/CollectionSenderP.nc">
      <instance number="0">
        <component-ref qname="CollectionSenderP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP.CollectionIdP" loc="45(MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP.CollectionIdP):../../tos/lib/net/CollectionIdP.nc">
      <documentation loc="35:../../tos/lib/net/CollectionIdP.nc">
        <short>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.</short>
        <long>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.&#10;&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2006-12-12 18:23:28 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CollectionIdP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:../../tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:../../tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:../../tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):../../tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:../../tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="38:../../tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="112:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <documentation loc="102:../../tos/chips/atm1281/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega1281 serial port HPL.</short>
        <long> &#10; Private component of the Atmega1281 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:../../tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:../../tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:../../tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="75:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer3P" loc="75:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc" safe="">
      <documentation loc="66:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="44(InitThreeP.InitThree):../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="42(CounterThree16C.NCounter):../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TThree" ref="0xb72e3010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="54(CounterMicro32C.Transform32):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TThree" ref="0xb72e3010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0xb72e35e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.SerialAMSenderC" loc="47(MultihopOscilloscopeAppC.SerialAMSenderC):../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:147">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.SerialAMSenderC.AMQueueEntryP" loc="43(MultihopOscilloscopeAppC.SerialAMSenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.UARTMessagePoolP" loc="41(MultihopOscilloscopeAppC.UARTMessagePoolP):../../tos/system/PoolC.nc">
      <documentation loc="33:../../tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
            <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
          </type-tag>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.UARTMessagePoolP.PoolP" loc="53(MultihopOscilloscopeAppC.UARTMessagePoolP.PoolP):../../tos/system/PoolP.nc">
      <documentation loc="34:../../tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0xb67933d8"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.UARTQueueP" loc="42(MultihopOscilloscopeAppC.UARTQueueP):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
              <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.DebugMessagePool" loc="41(MultihopOscilloscopeAppC.DebugMessagePool):../../tos/system/PoolC.nc">
      <documentation loc="33:../../tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
            <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
          </type-tag>
          <value cst="I:20">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.DebugMessagePool.PoolP" loc="53(MultihopOscilloscopeAppC.DebugMessagePool.PoolP):../../tos/system/PoolP.nc">
      <documentation loc="34:../../tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0xb67933d8"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.DebugSendQueue" loc="42(MultihopOscilloscopeAppC.DebugSendQueue):../../tos/system/QueueC.nc">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
              <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:20">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MultihopOscilloscopeAppC.DebugSerialSender" loc="47(MultihopOscilloscopeAppC.DebugSerialSender):../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:114">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MultihopOscilloscopeAppC.DebugSerialSender.AMQueueEntryP" loc="43(MultihopOscilloscopeAppC.DebugSerialSender.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="UARTDebugSenderP" loc="2:../../tos/lib/net/UARTDebugSenderP.nc">
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0xb727d5c8" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0xb727d7e0" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0xb727d9f8" loc="40:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0xb72759d0" loc="41:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0xb7275bf8" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0xb7275e20" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0xb7272030" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0xb7222088" loc="42:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0xb72222b0" loc="43:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0xb72224d8" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0xb72226c8" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0xb70df330" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0xb70df330"/></type-var>
        </typedef>
        <constant name="divider" ref="0xb70df4f0" loc="58:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm1281AlarmAsyncP" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="45:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0xb70da7c0" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0xb70da7c0"/></type-var>
        </typedef>
        <constant name="divider" ref="0xb70da980" loc="58:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb70ee9b8" loc="46:../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb70ee9b8"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb7034010" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb7034010"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0xb70341f0" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb700a8e0" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb700a8e0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AccelXC" loc="18:../../tos/sensorboards/mts300/AccelXC.nc" abstract="">
      <documentation loc="32:../../tos/sensorboards/mts300/mts300.h">
        <short>&#10; &#10; </short>
        <long>&#10; &#10; @author Hu Siquan &#60;husq@xbow.com>&#10; Revision: $Revision: 1.6 $&#10;&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128InterruptPinP" loc="39:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="ctrl_addr" ref="0xb6fb5c10" loc="39:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <constant name="edge0bit" ref="0xb6fb5e38" loc="40:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <constant name="edge1bit" ref="0xb6f9f088" loc="41:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0xb6f9f278" loc="42:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128GpioInterruptC" loc="6:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc" abstract="" safe="">
      <documentation loc="3:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RoundRobinArbiterC" loc="89:../../tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="69:../../tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0xb6f64b70" loc="89:../../tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:../../tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0xb6f56088" loc="42:../../tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0xb6f456c8" loc="52:../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SplitControlPowerManagerC" loc="67:../../tos/lib/power/SplitControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../tos/lib/power/SplitControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.  Non-virtualized devices are shared&#10; using a parameterized Resource interface, and are powered down according&#10; to some policy whenever there are no more pending requests to that Resource.&#10; The policy implemented by this component is to delay the power down of a&#10; device by some contant factor.  Such a policy is useful whenever a device&#10; has a long wake-up latency.  The cost of waiting for the device to power&#10; up can be avoided if the device is requested again before some predetermined&#10; amount of time.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>SplitControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>AsyncStdControl&#60;/code> or&#10; &#60;code>StdControl&#60;/code> interfaces, please use either the&#10; &#60;code>AsyncStdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="PowerManagerP" loc="58:../../tos/lib/power/PowerManagerP.nc" abstract="">
      <documentation loc="41:../../tos/lib/power/PowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:../../tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:../../tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0xb6efc730" loc="23:../../tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0xb6efc730"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadClientC" loc="21:../../tos/chips/atm128/adc/AdcReadClientC.nc" abstract="">
      <documentation loc="10:../../tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:../../tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:../../tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TaskletC" loc="42:../../tos/lib/rfxlink/util/TaskletC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RadioAlarmC" loc="37:../../tos/lib/rfxlink/util/RadioAlarmC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RadioAlarmP" loc="50:../../tos/lib/rfxlink/util/RadioAlarmP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ActiveMessageLayerC" loc="35:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ActiveMessageLayerP" loc="38:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AutoResourceAcquireLayerC" loc="35:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleFcfsArbiterC" loc="83:../../tos/system/SimpleFcfsArbiterC.nc" abstract="">
      <documentation loc="62:../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0xb6cad950" loc="83:../../tos/system/SimpleFcfsArbiterC.nc">
          <component-ref qname="SimpleFcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/FcfsResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0xb6ca8450" loc="42:../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154MessageLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TinyosNetworkLayerC" loc="50:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154PacketLayerC" loc="35:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Ieee154PacketLayerP" loc="37:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="UniqueLayerC" loc="35:../../tos/lib/rfxlink/layers/UniqueLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="UniqueLayerP" loc="38:../../tos/lib/rfxlink/layers/UniqueLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="NeighborhoodFlagC" loc="35:../../tos/lib/rfxlink/util/NeighborhoodFlagC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="PacketLinkLayerC" loc="73:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc" abstract="">
      <documentation loc="64:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyC" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyP" loc="35:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="MessageBufferLayerC" loc="35:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="MessageBufferLayerP" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RandomCollisionLayerC" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RandomCollisionLayerP" loc="38:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SoftwareAckLayerC" loc="38:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="DummyLayerC" loc="35:../../tos/lib/rfxlink/layers/DummyLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerC" loc="37:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerP" loc="38:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="MetadataFlagsLayerC" loc="38:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmOne16C" loc="28:../../tos/platforms/mica/AlarmOne16C.nc" abstract="">
      <documentation loc="11:../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128TimerInitC" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0xb68e28f0" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb68e28f0"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0xb68e2b10" loc="44:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmC" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0xb68e47f0" loc="51:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0xb68e47f0"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0xb68e4c38" loc="52:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb68e4c38"/></type-var>
        </typedef>
        <constant name="mindt" ref="0xb68e4df8" loc="53:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0xb68b1ef8" loc="42:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0xb68b1ef8"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0xb68ae368" loc="43:../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb68ae368"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0xb689f010" loc="55:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0xb689f010"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0xb689f470" loc="56:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0xb689f470"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0xb689f6d8" loc="57:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0xb689f6d8"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0xb689fb48" loc="58:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0xb689fb48"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0xb689fdb0" loc="59:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0xb689e258" loc="60:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0xb689e258"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="CtpForwardingEngineP" loc="107:../../tos/lib/net/ctp/CtpForwardingEngineP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="PoolC" loc="41:../../tos/system/PoolC.nc" abstract="">
      <documentation loc="33:../../tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="pool_t" ref="0xb67933d8" loc="41:../../tos/system/PoolC.nc">
          <component-ref qname="PoolC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0xb67933d8"/></type-var>
        </typedef>
        <constant name="POOL_SIZE" ref="0xb67935f8" loc="41:../../tos/system/PoolC.nc">
          <component-ref qname="PoolC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PoolP" loc="53:../../tos/system/PoolP.nc" abstract="">
      <documentation loc="34:../../tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="pool_t" ref="0xb678e960" loc="53:../../tos/system/PoolP.nc">
          <component-ref qname="PoolP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0xb678e960"/></type-var>
        </typedef>
        <constant name="size" ref="0xb678eb50" loc="53:../../tos/system/PoolP.nc">
          <component-ref qname="PoolP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0xb6778438" loc="42:../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0xb6778438"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0xb6778660" loc="42:../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="LruCtpMsgCacheC" loc="38:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc" abstract="">
      <documentation loc="32:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
        <short>&#10; An LRU cache CTP packet instances, where insertion represents use.</short>
        <long>&#10; An LRU cache CTP packet instances, where insertion represents use.&#10;&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="CACHE_SIZE" ref="0xb6766b08" loc="38:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
          <component-ref qname="LruCtpMsgCacheC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="LruCtpMsgCacheP" loc="43:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc" abstract="">
      <documentation loc="32:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
        <short>&#10; An LRU cache that stores the signature of a CTP packet instance.</short>
        <long>&#10; An LRU cache that stores the signature of a CTP packet instance.&#10; An insert operation indicates &#34;use&#34;.  Inserting an element not in&#10; the cache will replace the oldest, and inserting an element already&#10; in the cache will refresh its age.&#10;&#10; @author Philip Levis &#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0xb6762590" loc="43:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
          <component-ref qname="LruCtpMsgCacheP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0xb6740430" loc="47:../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0xb66c7010" loc="47:../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0xb66c5ad8" loc="43:../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0xb66b22c0" loc="45:../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="43:../../tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="33:../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0xb66818a0" loc="43:../../tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMSnooperC" loc="44:../../tos/system/AMSnooperC.nc" abstract="">
      <documentation loc="33:../../tos/system/AMSnooperC.nc">
        <short>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node.</short>
        <long>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node. &#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0xb667a320" loc="44:../../tos/system/AMSnooperC.nc">
          <component-ref qname="AMSnooperC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="CtpRoutingEngineP" loc="107:../../tos/lib/net/ctp/CtpRoutingEngineP.nc" abstract="">
      <documentation loc="38:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
        <short> &#10;  The TreeRoutingEngine is responsible for computing the routes for&#10;  collection.</short>
        <long> &#10;  The TreeRoutingEngine is responsible for computing the routes for&#10;  collection.  It builds a set of trees rooted at specific nodes (roots) and&#10;  maintains these trees using information provided by the link estimator on&#10;  the quality of one hop links.&#10; &#10;  &#60;p>Each node is part of only one tree at any given time, but there is no&#10;  difference from the node's point of view of which tree it is part. In other&#10;  words, a message is sent towards &#60;i>a&#60;/i> root, but which one is not&#10;  specified. It is assumed that the roots will work together to have all data&#10;  aggregated later if need be.  The tree routing engine's responsibility is&#10;  for each node to find the path with the least number of transmissions to&#10;  any one root.&#10;&#10;  &#60;p>The tree is proactively maintained by periodic beacons sent by each&#10;  node. These beacons are jittered in time to prevent synchronizations in the&#10;  network. All nodes maintain the same &#60;i>average&#60;/i> beacon sending rate&#10;  (defined by BEACON_INTERVAL +- 50%). The beacon contains the node's parent,&#10;  the current hopcount, and the cumulative path quality metric. The metric is&#10;  defined as the parent's metric plus the bidirectional quality of the link&#10;  between the current node and its parent.  The metric represents the&#10;  expected number of transmissions along the path to the root, and is 0 by&#10;  definition at the root.&#10; &#10;  &#60;p>Every time a node receives an update from a neighbor it records the&#10;  information if the node is part of the neighbor table. The neighbor table&#10;  keeps the best candidates for being parents i.e., the nodes with the best&#10;  path metric. The neighbor table does not store the full path metric,&#10;  though. It stores the parent's path metric, and the link quality to the&#10;  parent is only added when the information is needed: (i) when choosing a&#10;  parent and (ii) when choosing a route. The nodes in the neighbor table are&#10;  a subset of the nodes in the link estimator table, as a node is not&#10;  admitted in the neighbor table with an estimate of infinity.&#10; &#10;  &#60;p>There are two uses for the neighbor table, as mentioned above. The first&#10;  one is to select a parent. The parent is just the neighbor with the best&#10;  path metric. It serves to define the node's own path metric and hopcount,&#10;  and the set of child-parent links is what defines the tree. In a sense the&#10;  tree is defined to form a coherent propagation substrate for the path&#10;  metrics. The parent is (re)-selected periodically, immediately before a&#10;  node sends its own beacon, in the updateRouteTask.&#10;  &#10;  &#60;p>The second use is to actually choose a next hop towards any root at&#10;  message forwarding time.  This need not be the current parent, even though&#10;  it is currently implemented as such.&#10;&#10;  &#60;p>The operation of the routing engine has two main tasks and one main&#10;  event: updateRouteTask is called periodically and chooses a new parent;&#10;  sendBeaconTask broadcasts the current route information to the neighbors.&#10;  The main event is the receiving of a neighbor's beacon, which updates the&#10;  neighbor table.&#10;  &#10;  &#60;p> The interface with the ForwardingEngine occurs through the nextHop()&#10;  call.&#10; &#10;  &#60;p> Any node can become a root, and routed messages from a subset of the&#10;  network will be routed towards it. The RootControl interface allows&#10;  setting, unsetting, and querying the root state of a node. By convention,&#10;  when a node is root its hopcount and metric are 0, and the parent is&#10;  itself. A root always has a valid route, to itself.&#10;&#10;  @author Rodrigo Fonseca&#10;  @author Philip Levis (added trickle-like updates)&#10;  Acknowledgment: based on MintRoute, MultiHopLQI, BVR tree construction, Berkeley's MTree&#10;                           &#10;  @date   $Date: 2010-06-29 22:07:49 $&#10;  @see Net2-WG&#10;</long>
      </documentation>
      <parameters>
        <constant name="routingTableSize" ref="0xb666e3c0" loc="107:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
          <component-ref qname="CtpRoutingEngineP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
        <constant name="minInterval" ref="0xb666e600" loc="107:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
          <component-ref qname="CtpRoutingEngineP"/>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </constant>
        <constant name="maxInterval" ref="0xb666e840" loc="107:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
          <component-ref qname="CtpRoutingEngineP"/>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CollectionSenderC" loc="43:../../tos/lib/net/ctp/CollectionSenderC.nc" abstract="">
      <documentation loc="32:../../tos/lib/net/ctp/CollectionSenderC.nc">
        <short>&#10; The virtualized collection sender abstraction.</short>
        <long>&#10; The virtualized collection sender abstraction.&#10;&#10; @author Kyle Jamieson&#10; @author Philip Levis&#10; @date April 25 2006&#10; @see TinyOS Net2-WG&#10;</long>
      </documentation>
      <parameters>
        <constant name="collectid" ref="0xb65b5b30" loc="43:../../tos/lib/net/ctp/CollectionSenderC.nc">
          <component-ref qname="CollectionSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="CollectionSenderP" loc="34:../../tos/lib/net/ctp/CollectionSenderP.nc" abstract="">
      <parameters>
        <constant name="collectid" ref="0xb65b1688" loc="35:../../tos/lib/net/ctp/CollectionSenderP.nc">
          <component-ref qname="CollectionSenderP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
          </type-int>
        </constant>
        <constant name="clientid" ref="0xb65b18a0" loc="35:../../tos/lib/net/ctp/CollectionSenderP.nc">
          <component-ref qname="CollectionSenderP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="CollectionIdP" loc="45:../../tos/lib/net/CollectionIdP.nc" abstract="">
      <documentation loc="35:../../tos/lib/net/CollectionIdP.nc">
        <short>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.</short>
        <long>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.&#10;&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2006-12-12 18:23:28 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="collectid" ref="0xb65aa358" loc="45:../../tos/lib/net/CollectionIdP.nc">
          <component-ref qname="CollectionIdP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:../../tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0xb6389010" loc="47:../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0xb72bd0f0" loc="58:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0xb72bd0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb72bd2c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0xb72bb4a0" loc="57:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0xb72bb4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0xb72bb678"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0xb72b29c8" loc="52:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0xb72b29c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb72b2ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb72bd9d8" loc="46:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb72bd9d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb72bdbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0xb72b2268" loc="50:../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0xb72b2268"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0xb72b2440"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0xb72b2520"/>
        <function-ref name="calibrateMicro" scoped="" ref="0xb72b2600"/>
        <function-ref name="actualMicro" scoped="" ref="0xb72b26e0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0xb72b27c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0xb72b0140" loc="45:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0xb72b0140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb72b0318"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb72b9d48" loc="44:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb72b9d48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb72b9f20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0xb72b0548" loc="46:../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0xb72b0548"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb72b0720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0xb72b89f0" loc="41:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0xb72b89f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb72b8bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0xb72b8620" loc="40:../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0xb72b8620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb72b87f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0xb72a9588" loc="45:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0xb72a9588"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb72a9760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0xb72a6ad0" loc="44:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0xb72a6ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a6ca8"/>
        <function-ref name="isInput" scoped="" ref="0xb72a6d88"/>
        <function-ref name="toggle" scoped="" ref="0xb72a6e68"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a9010"/>
        <function-ref name="get" scoped="" ref="0xb72a90f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a91d0"/>
        <function-ref name="set" scoped="" ref="0xb72a92b0"/>
        <function-ref name="clr" scoped="" ref="0xb72a9390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0xb72ad590" loc="43:../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0xb72ad590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb72ad768"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0xb7283210" loc="98:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0xb7283210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72835e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72836c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72837a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7283888"/>
        <function-ref name="get" scoped="" ref="0xb7283968"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7283a48"/>
        <function-ref name="set" scoped="" ref="0xb7283b28"/>
        <function-ref name="clr" scoped="" ref="0xb7283c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0xb7293750" loc="72:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0xb7293750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7293928"/>
        <function-ref name="isInput" scoped="" ref="0xb7293a08"/>
        <function-ref name="toggle" scoped="" ref="0xb7293ae8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7293bc8"/>
        <function-ref name="get" scoped="" ref="0xb7293ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7293d88"/>
        <function-ref name="set" scoped="" ref="0xb7293e68"/>
        <function-ref name="clr" scoped="" ref="0xb7292010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0xb728cce8" loc="83:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0xb728cce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728cec0"/>
        <function-ref name="isInput" scoped="" ref="0xb728b010"/>
        <function-ref name="toggle" scoped="" ref="0xb728b0f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb728b1d0"/>
        <function-ref name="get" scoped="" ref="0xb728b2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728b390"/>
        <function-ref name="set" scoped="" ref="0xb728b470"/>
        <function-ref name="clr" scoped="" ref="0xb728b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0xb7287ea8" loc="92:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0xb7287ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72860c0"/>
        <function-ref name="isInput" scoped="" ref="0xb72861a0"/>
        <function-ref name="toggle" scoped="" ref="0xb7286280"/>
        <function-ref name="isOutput" scoped="" ref="0xb7286360"/>
        <function-ref name="get" scoped="" ref="0xb7286440"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7286520"/>
        <function-ref name="set" scoped="" ref="0xb7286600"/>
        <function-ref name="clr" scoped="" ref="0xb72866e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG5" ref="0xb7280750" loc="103:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG5" scoped="" ref="0xb7280750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7280928"/>
        <function-ref name="isInput" scoped="" ref="0xb7280a08"/>
        <function-ref name="toggle" scoped="" ref="0xb7280ae8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7280bc8"/>
        <function-ref name="get" scoped="" ref="0xb7280ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7280d88"/>
        <function-ref name="set" scoped="" ref="0xb7280e68"/>
        <function-ref name="clr" scoped="" ref="0xb727f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0xb729f2f0" loc="50:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0xb729f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729f4c8"/>
        <function-ref name="isInput" scoped="" ref="0xb729f5a8"/>
        <function-ref name="toggle" scoped="" ref="0xb729f688"/>
        <function-ref name="isOutput" scoped="" ref="0xb729f768"/>
        <function-ref name="get" scoped="" ref="0xb729f848"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729f928"/>
        <function-ref name="set" scoped="" ref="0xb729fa08"/>
        <function-ref name="clr" scoped="" ref="0xb729fae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0xb7288a98" loc="90:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0xb7288a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7288c70"/>
        <function-ref name="isInput" scoped="" ref="0xb7288d50"/>
        <function-ref name="toggle" scoped="" ref="0xb7288e30"/>
        <function-ref name="isOutput" scoped="" ref="0xb7288f10"/>
        <function-ref name="get" scoped="" ref="0xb7287010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72870f0"/>
        <function-ref name="set" scoped="" ref="0xb72871d0"/>
        <function-ref name="clr" scoped="" ref="0xb72872b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0xb729e750" loc="53:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0xb729e750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729e928"/>
        <function-ref name="isInput" scoped="" ref="0xb729ea08"/>
        <function-ref name="toggle" scoped="" ref="0xb729eae8"/>
        <function-ref name="isOutput" scoped="" ref="0xb729ebc8"/>
        <function-ref name="get" scoped="" ref="0xb729eca8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729ed88"/>
        <function-ref name="set" scoped="" ref="0xb729ee68"/>
        <function-ref name="clr" scoped="" ref="0xb729d010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0xb7298ea8" loc="64:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0xb7298ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72970c0"/>
        <function-ref name="isInput" scoped="" ref="0xb72971a0"/>
        <function-ref name="toggle" scoped="" ref="0xb7297280"/>
        <function-ref name="isOutput" scoped="" ref="0xb7297360"/>
        <function-ref name="get" scoped="" ref="0xb7297440"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7297520"/>
        <function-ref name="set" scoped="" ref="0xb7297600"/>
        <function-ref name="clr" scoped="" ref="0xb72976e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0xb7290670" loc="75:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0xb7290670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7290848"/>
        <function-ref name="isInput" scoped="" ref="0xb7290928"/>
        <function-ref name="toggle" scoped="" ref="0xb7290a08"/>
        <function-ref name="isOutput" scoped="" ref="0xb7290ae8"/>
        <function-ref name="get" scoped="" ref="0xb7290bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7290ca8"/>
        <function-ref name="set" scoped="" ref="0xb7290d88"/>
        <function-ref name="clr" scoped="" ref="0xb7290e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0xb728ac08" loc="86:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0xb728ac08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728ade0"/>
        <function-ref name="isInput" scoped="" ref="0xb728aec0"/>
        <function-ref name="toggle" scoped="" ref="0xb7289010"/>
        <function-ref name="isOutput" scoped="" ref="0xb72890f0"/>
        <function-ref name="get" scoped="" ref="0xb72891d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72892b0"/>
        <function-ref name="set" scoped="" ref="0xb7289390"/>
        <function-ref name="clr" scoped="" ref="0xb7289470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0xb72acf10" loc="45:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0xb72acf10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a2108"/>
        <function-ref name="isInput" scoped="" ref="0xb72a21e8"/>
        <function-ref name="toggle" scoped="" ref="0xb72a22c8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a23a8"/>
        <function-ref name="get" scoped="" ref="0xb72a2488"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a2568"/>
        <function-ref name="set" scoped="" ref="0xb72a2648"/>
        <function-ref name="clr" scoped="" ref="0xb72a2728"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0xb729c670" loc="56:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0xb729c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729c848"/>
        <function-ref name="isInput" scoped="" ref="0xb729c928"/>
        <function-ref name="toggle" scoped="" ref="0xb729ca08"/>
        <function-ref name="isOutput" scoped="" ref="0xb729cae8"/>
        <function-ref name="get" scoped="" ref="0xb729cbc8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729cca8"/>
        <function-ref name="set" scoped="" ref="0xb729cd88"/>
        <function-ref name="clr" scoped="" ref="0xb729ce68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0xb7296ce8" loc="67:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0xb7296ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7296ec0"/>
        <function-ref name="isInput" scoped="" ref="0xb7295010"/>
        <function-ref name="toggle" scoped="" ref="0xb72950f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72951d0"/>
        <function-ref name="get" scoped="" ref="0xb72952b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7295390"/>
        <function-ref name="set" scoped="" ref="0xb7295470"/>
        <function-ref name="clr" scoped="" ref="0xb7295550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0xb728e4b0" loc="78:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0xb728e4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728e688"/>
        <function-ref name="isInput" scoped="" ref="0xb728e768"/>
        <function-ref name="toggle" scoped="" ref="0xb728e848"/>
        <function-ref name="isOutput" scoped="" ref="0xb728e928"/>
        <function-ref name="get" scoped="" ref="0xb728ea08"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728eae8"/>
        <function-ref name="set" scoped="" ref="0xb728ebc8"/>
        <function-ref name="clr" scoped="" ref="0xb728eca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0xb7285ce8" loc="95:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0xb7285ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7285ec0"/>
        <function-ref name="isInput" scoped="" ref="0xb7284010"/>
        <function-ref name="toggle" scoped="" ref="0xb72840f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72841d0"/>
        <function-ref name="get" scoped="" ref="0xb72842b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7284390"/>
        <function-ref name="set" scoped="" ref="0xb7284470"/>
        <function-ref name="clr" scoped="" ref="0xb7284550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0xb72812f0" loc="101:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0xb72812f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72814c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72815a8"/>
        <function-ref name="toggle" scoped="" ref="0xb7281688"/>
        <function-ref name="isOutput" scoped="" ref="0xb7281768"/>
        <function-ref name="get" scoped="" ref="0xb7281848"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7281928"/>
        <function-ref name="set" scoped="" ref="0xb7281a08"/>
        <function-ref name="clr" scoped="" ref="0xb7281ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0xb728d8e0" loc="81:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0xb728d8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728dab8"/>
        <function-ref name="isInput" scoped="" ref="0xb728db98"/>
        <function-ref name="toggle" scoped="" ref="0xb728dc78"/>
        <function-ref name="isOutput" scoped="" ref="0xb728dd58"/>
        <function-ref name="get" scoped="" ref="0xb728de38"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728df18"/>
        <function-ref name="set" scoped="" ref="0xb728c010"/>
        <function-ref name="clr" scoped="" ref="0xb728c0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0xb72a1dc8" loc="48:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0xb72a1dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a0010"/>
        <function-ref name="isInput" scoped="" ref="0xb72a00f0"/>
        <function-ref name="toggle" scoped="" ref="0xb72a01d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a02b0"/>
        <function-ref name="get" scoped="" ref="0xb72a0390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a0470"/>
        <function-ref name="set" scoped="" ref="0xb72a0550"/>
        <function-ref name="clr" scoped="" ref="0xb72a0630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0xb729a590" loc="59:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0xb729a590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729a768"/>
        <function-ref name="isInput" scoped="" ref="0xb729a848"/>
        <function-ref name="toggle" scoped="" ref="0xb729a928"/>
        <function-ref name="isOutput" scoped="" ref="0xb729aa08"/>
        <function-ref name="get" scoped="" ref="0xb729aae8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729abc8"/>
        <function-ref name="set" scoped="" ref="0xb729aca8"/>
        <function-ref name="clr" scoped="" ref="0xb729ad88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0xb7283e08" loc="99:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0xb7283e08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7282010"/>
        <function-ref name="isInput" scoped="" ref="0xb72820f0"/>
        <function-ref name="toggle" scoped="" ref="0xb72821d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72822b0"/>
        <function-ref name="get" scoped="" ref="0xb7282390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7282470"/>
        <function-ref name="set" scoped="" ref="0xb7282550"/>
        <function-ref name="clr" scoped="" ref="0xb7282630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0xb7299a08" loc="62:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0xb7299a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7299be0"/>
        <function-ref name="isInput" scoped="" ref="0xb7299cc0"/>
        <function-ref name="toggle" scoped="" ref="0xb7299da0"/>
        <function-ref name="isOutput" scoped="" ref="0xb7299e80"/>
        <function-ref name="get" scoped="" ref="0xb7298010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72980f0"/>
        <function-ref name="set" scoped="" ref="0xb72981d0"/>
        <function-ref name="clr" scoped="" ref="0xb72982b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0xb7292210" loc="73:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0xb7292210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72923e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72924c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72925a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7292688"/>
        <function-ref name="get" scoped="" ref="0xb7292768"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7292848"/>
        <function-ref name="set" scoped="" ref="0xb7292928"/>
        <function-ref name="clr" scoped="" ref="0xb7292a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0xb728b750" loc="84:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0xb728b750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728b928"/>
        <function-ref name="isInput" scoped="" ref="0xb728ba08"/>
        <function-ref name="toggle" scoped="" ref="0xb728bae8"/>
        <function-ref name="isOutput" scoped="" ref="0xb728bbc8"/>
        <function-ref name="get" scoped="" ref="0xb728bca8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728bd88"/>
        <function-ref name="set" scoped="" ref="0xb728be68"/>
        <function-ref name="clr" scoped="" ref="0xb728a010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0xb72868e0" loc="93:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0xb72868e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7286ab8"/>
        <function-ref name="isInput" scoped="" ref="0xb7286b98"/>
        <function-ref name="toggle" scoped="" ref="0xb7286c78"/>
        <function-ref name="isOutput" scoped="" ref="0xb7286d58"/>
        <function-ref name="get" scoped="" ref="0xb7286e38"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7286f18"/>
        <function-ref name="set" scoped="" ref="0xb7285010"/>
        <function-ref name="clr" scoped="" ref="0xb72850f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0xb729fce8" loc="51:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0xb729fce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729fec0"/>
        <function-ref name="isInput" scoped="" ref="0xb729e010"/>
        <function-ref name="toggle" scoped="" ref="0xb729e0f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb729e1d0"/>
        <function-ref name="get" scoped="" ref="0xb729e2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729e390"/>
        <function-ref name="set" scoped="" ref="0xb729e470"/>
        <function-ref name="clr" scoped="" ref="0xb729e550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0xb729d210" loc="54:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0xb729d210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729d3e8"/>
        <function-ref name="isInput" scoped="" ref="0xb729d4c8"/>
        <function-ref name="toggle" scoped="" ref="0xb729d5a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb729d688"/>
        <function-ref name="get" scoped="" ref="0xb729d768"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729d848"/>
        <function-ref name="set" scoped="" ref="0xb729d928"/>
        <function-ref name="clr" scoped="" ref="0xb729da08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0xb72978e0" loc="65:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0xb72978e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7297ab8"/>
        <function-ref name="isInput" scoped="" ref="0xb7297b98"/>
        <function-ref name="toggle" scoped="" ref="0xb7297c78"/>
        <function-ref name="isOutput" scoped="" ref="0xb7297d58"/>
        <function-ref name="get" scoped="" ref="0xb7297e38"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7297f18"/>
        <function-ref name="set" scoped="" ref="0xb7296010"/>
        <function-ref name="clr" scoped="" ref="0xb72960f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0xb728f0a0" loc="76:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0xb728f0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728f278"/>
        <function-ref name="isInput" scoped="" ref="0xb728f358"/>
        <function-ref name="toggle" scoped="" ref="0xb728f438"/>
        <function-ref name="isOutput" scoped="" ref="0xb728f518"/>
        <function-ref name="get" scoped="" ref="0xb728f5f8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728f6d8"/>
        <function-ref name="set" scoped="" ref="0xb728f7b8"/>
        <function-ref name="clr" scoped="" ref="0xb728f898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0xb7289670" loc="87:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0xb7289670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7289848"/>
        <function-ref name="isInput" scoped="" ref="0xb7289928"/>
        <function-ref name="toggle" scoped="" ref="0xb7289a08"/>
        <function-ref name="isOutput" scoped="" ref="0xb7289ae8"/>
        <function-ref name="get" scoped="" ref="0xb7289bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7289ca8"/>
        <function-ref name="set" scoped="" ref="0xb7289d88"/>
        <function-ref name="clr" scoped="" ref="0xb7289e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0xb72a2928" loc="46:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0xb72a2928"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a2b00"/>
        <function-ref name="isInput" scoped="" ref="0xb72a2be0"/>
        <function-ref name="toggle" scoped="" ref="0xb72a2cc0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a2da0"/>
        <function-ref name="get" scoped="" ref="0xb72a2e80"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a1010"/>
        <function-ref name="set" scoped="" ref="0xb72a10f0"/>
        <function-ref name="clr" scoped="" ref="0xb72a11d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0xb729b0a0" loc="57:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0xb729b0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729b2f8"/>
        <function-ref name="isInput" scoped="" ref="0xb729b3d8"/>
        <function-ref name="toggle" scoped="" ref="0xb729b4b8"/>
        <function-ref name="isOutput" scoped="" ref="0xb729b598"/>
        <function-ref name="get" scoped="" ref="0xb729b678"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729b758"/>
        <function-ref name="set" scoped="" ref="0xb729b838"/>
        <function-ref name="clr" scoped="" ref="0xb729b918"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0xb7295750" loc="68:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0xb7295750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7295928"/>
        <function-ref name="isInput" scoped="" ref="0xb7295a08"/>
        <function-ref name="toggle" scoped="" ref="0xb7295ae8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7295bc8"/>
        <function-ref name="get" scoped="" ref="0xb7295ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7295d88"/>
        <function-ref name="set" scoped="" ref="0xb7295e68"/>
        <function-ref name="clr" scoped="" ref="0xb7294010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0xb7284750" loc="96:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0xb7284750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7284928"/>
        <function-ref name="isInput" scoped="" ref="0xb7284a08"/>
        <function-ref name="toggle" scoped="" ref="0xb7284ae8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7284bc8"/>
        <function-ref name="get" scoped="" ref="0xb7284ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7284d88"/>
        <function-ref name="set" scoped="" ref="0xb7284e68"/>
        <function-ref name="clr" scoped="" ref="0xb7283010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0xb7294c08" loc="71:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0xb7294c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7294ee0"/>
        <function-ref name="isInput" scoped="" ref="0xb7293010"/>
        <function-ref name="toggle" scoped="" ref="0xb72930f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72931d0"/>
        <function-ref name="get" scoped="" ref="0xb72932b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7293390"/>
        <function-ref name="set" scoped="" ref="0xb7293470"/>
        <function-ref name="clr" scoped="" ref="0xb7293550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0xb728c2f0" loc="82:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0xb728c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728c4c8"/>
        <function-ref name="isInput" scoped="" ref="0xb728c5a8"/>
        <function-ref name="toggle" scoped="" ref="0xb728c688"/>
        <function-ref name="isOutput" scoped="" ref="0xb728c768"/>
        <function-ref name="get" scoped="" ref="0xb728c848"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728c928"/>
        <function-ref name="set" scoped="" ref="0xb728ca08"/>
        <function-ref name="clr" scoped="" ref="0xb728cae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0xb72874b0" loc="91:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0xb72874b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7287688"/>
        <function-ref name="isInput" scoped="" ref="0xb7287768"/>
        <function-ref name="toggle" scoped="" ref="0xb7287848"/>
        <function-ref name="isOutput" scoped="" ref="0xb7287928"/>
        <function-ref name="get" scoped="" ref="0xb7287a08"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7287ae8"/>
        <function-ref name="set" scoped="" ref="0xb7287bc8"/>
        <function-ref name="clr" scoped="" ref="0xb7287ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0xb7281ce8" loc="102:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0xb7281ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7281ec0"/>
        <function-ref name="isInput" scoped="" ref="0xb7280010"/>
        <function-ref name="toggle" scoped="" ref="0xb72800f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72801d0"/>
        <function-ref name="get" scoped="" ref="0xb72802b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7280390"/>
        <function-ref name="set" scoped="" ref="0xb7280470"/>
        <function-ref name="clr" scoped="" ref="0xb7280550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0xb72a0830" loc="49:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0xb72a0830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a0a08"/>
        <function-ref name="isInput" scoped="" ref="0xb72a0ae8"/>
        <function-ref name="toggle" scoped="" ref="0xb72a0bc8"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a0ca8"/>
        <function-ref name="get" scoped="" ref="0xb72a0d88"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a0e68"/>
        <function-ref name="set" scoped="" ref="0xb729f010"/>
        <function-ref name="clr" scoped="" ref="0xb729f0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0xb7299010" loc="60:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0xb7299010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72991e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72992c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72993a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7299488"/>
        <function-ref name="get" scoped="" ref="0xb7299568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7299648"/>
        <function-ref name="set" scoped="" ref="0xb7299728"/>
        <function-ref name="clr" scoped="" ref="0xb7299808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0xb72880a0" loc="89:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0xb72880a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7288278"/>
        <function-ref name="isInput" scoped="" ref="0xb7288358"/>
        <function-ref name="toggle" scoped="" ref="0xb7288438"/>
        <function-ref name="isOutput" scoped="" ref="0xb7288518"/>
        <function-ref name="get" scoped="" ref="0xb72885f8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72886d8"/>
        <function-ref name="set" scoped="" ref="0xb72887b8"/>
        <function-ref name="clr" scoped="" ref="0xb7288898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0xb72984b0" loc="63:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0xb72984b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7298688"/>
        <function-ref name="isInput" scoped="" ref="0xb7298768"/>
        <function-ref name="toggle" scoped="" ref="0xb7298848"/>
        <function-ref name="isOutput" scoped="" ref="0xb7298928"/>
        <function-ref name="get" scoped="" ref="0xb7298a08"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7298ae8"/>
        <function-ref name="set" scoped="" ref="0xb7298bc8"/>
        <function-ref name="clr" scoped="" ref="0xb7298ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0xb7292c08" loc="74:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0xb7292c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7292de0"/>
        <function-ref name="isInput" scoped="" ref="0xb7292ec0"/>
        <function-ref name="toggle" scoped="" ref="0xb7290010"/>
        <function-ref name="isOutput" scoped="" ref="0xb72900f0"/>
        <function-ref name="get" scoped="" ref="0xb72901d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72902b0"/>
        <function-ref name="set" scoped="" ref="0xb7290390"/>
        <function-ref name="clr" scoped="" ref="0xb7290470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0xb728a210" loc="85:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0xb728a210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728a3e8"/>
        <function-ref name="isInput" scoped="" ref="0xb728a4c8"/>
        <function-ref name="toggle" scoped="" ref="0xb728a5a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb728a688"/>
        <function-ref name="get" scoped="" ref="0xb728a768"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728a848"/>
        <function-ref name="set" scoped="" ref="0xb728a928"/>
        <function-ref name="clr" scoped="" ref="0xb728aa08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0xb72852f0" loc="94:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0xb72852f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72854c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72855a8"/>
        <function-ref name="toggle" scoped="" ref="0xb7285688"/>
        <function-ref name="isOutput" scoped="" ref="0xb7285768"/>
        <function-ref name="get" scoped="" ref="0xb7285848"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7285928"/>
        <function-ref name="set" scoped="" ref="0xb7285a08"/>
        <function-ref name="clr" scoped="" ref="0xb7285ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0xb72ac518" loc="44:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0xb72ac518"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72ac6f0"/>
        <function-ref name="isInput" scoped="" ref="0xb72ac7d0"/>
        <function-ref name="toggle" scoped="" ref="0xb72ac8b0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72ac990"/>
        <function-ref name="get" scoped="" ref="0xb72aca70"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72acb50"/>
        <function-ref name="set" scoped="" ref="0xb72acc30"/>
        <function-ref name="clr" scoped="" ref="0xb72acd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0xb729dc08" loc="55:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0xb729dc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729dde0"/>
        <function-ref name="isInput" scoped="" ref="0xb729dec0"/>
        <function-ref name="toggle" scoped="" ref="0xb729c010"/>
        <function-ref name="isOutput" scoped="" ref="0xb729c0f0"/>
        <function-ref name="get" scoped="" ref="0xb729c1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729c2b0"/>
        <function-ref name="set" scoped="" ref="0xb729c390"/>
        <function-ref name="clr" scoped="" ref="0xb729c470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0xb72962f0" loc="66:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0xb72962f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72964c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72965a8"/>
        <function-ref name="toggle" scoped="" ref="0xb7296688"/>
        <function-ref name="isOutput" scoped="" ref="0xb7296768"/>
        <function-ref name="get" scoped="" ref="0xb7296848"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7296928"/>
        <function-ref name="set" scoped="" ref="0xb7296a08"/>
        <function-ref name="clr" scoped="" ref="0xb7296ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0xb728fa98" loc="77:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0xb728fa98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728fc70"/>
        <function-ref name="isInput" scoped="" ref="0xb728fd50"/>
        <function-ref name="toggle" scoped="" ref="0xb728fe30"/>
        <function-ref name="isOutput" scoped="" ref="0xb728ff10"/>
        <function-ref name="get" scoped="" ref="0xb728e010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728e0f0"/>
        <function-ref name="set" scoped="" ref="0xb728e1d0"/>
        <function-ref name="clr" scoped="" ref="0xb728e2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0xb7282830" loc="100:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0xb7282830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7282a08"/>
        <function-ref name="isInput" scoped="" ref="0xb7282ae8"/>
        <function-ref name="toggle" scoped="" ref="0xb7282bc8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7282ca8"/>
        <function-ref name="get" scoped="" ref="0xb7282d88"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7282e68"/>
        <function-ref name="set" scoped="" ref="0xb7281010"/>
        <function-ref name="clr" scoped="" ref="0xb72810f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0xb728eea8" loc="80:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0xb728eea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb728d0c0"/>
        <function-ref name="isInput" scoped="" ref="0xb728d1a0"/>
        <function-ref name="toggle" scoped="" ref="0xb728d280"/>
        <function-ref name="isOutput" scoped="" ref="0xb728d360"/>
        <function-ref name="get" scoped="" ref="0xb728d440"/>
        <function-ref name="makeOutput" scoped="" ref="0xb728d520"/>
        <function-ref name="set" scoped="" ref="0xb728d600"/>
        <function-ref name="clr" scoped="" ref="0xb728d6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0xb7294210" loc="69:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0xb7294210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72943e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72944c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72945a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7294688"/>
        <function-ref name="get" scoped="" ref="0xb7294768"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7294848"/>
        <function-ref name="set" scoped="" ref="0xb7294928"/>
        <function-ref name="clr" scoped="" ref="0xb7294a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0xb72a13d0" loc="47:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0xb72a13d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72a15a8"/>
        <function-ref name="isInput" scoped="" ref="0xb72a1688"/>
        <function-ref name="toggle" scoped="" ref="0xb72a1768"/>
        <function-ref name="isOutput" scoped="" ref="0xb72a1848"/>
        <function-ref name="get" scoped="" ref="0xb72a1928"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72a1a08"/>
        <function-ref name="set" scoped="" ref="0xb72a1ae8"/>
        <function-ref name="clr" scoped="" ref="0xb72a1bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0xb729bb18" loc="58:../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0xb729bb18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb729bcf0"/>
        <function-ref name="isInput" scoped="" ref="0xb729bdd0"/>
        <function-ref name="toggle" scoped="" ref="0xb729beb0"/>
        <function-ref name="isOutput" scoped="" ref="0xb729a010"/>
        <function-ref name="get" scoped="" ref="0xb729a0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb729a1d0"/>
        <function-ref name="set" scoped="" ref="0xb729a2b0"/>
        <function-ref name="clr" scoped="" ref="0xb729a390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0xb7257d68" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0xb7257d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7256010"/>
        <function-ref name="isInput" scoped="" ref="0xb72560f0"/>
        <function-ref name="toggle" scoped="" ref="0xb72561d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72562b0"/>
        <function-ref name="get" scoped="" ref="0xb7256390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7256470"/>
        <function-ref name="set" scoped="" ref="0xb7256550"/>
        <function-ref name="clr" scoped="" ref="0xb7256630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0xb7255ac8" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0xb7255ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7255ca0"/>
        <function-ref name="isInput" scoped="" ref="0xb7255d80"/>
        <function-ref name="toggle" scoped="" ref="0xb7255e60"/>
        <function-ref name="isOutput" scoped="" ref="0xb7254010"/>
        <function-ref name="get" scoped="" ref="0xb72540f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72541d0"/>
        <function-ref name="set" scoped="" ref="0xb72542b0"/>
        <function-ref name="clr" scoped="" ref="0xb7254390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0xb7258a28" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0xb7258a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7258c00"/>
        <function-ref name="isInput" scoped="" ref="0xb7258ce0"/>
        <function-ref name="toggle" scoped="" ref="0xb7258dc0"/>
        <function-ref name="isOutput" scoped="" ref="0xb7258ea0"/>
        <function-ref name="get" scoped="" ref="0xb7257010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72570f0"/>
        <function-ref name="set" scoped="" ref="0xb72571d0"/>
        <function-ref name="clr" scoped="" ref="0xb72572b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0xb7256790" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0xb7256790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7256968"/>
        <function-ref name="isInput" scoped="" ref="0xb7256a48"/>
        <function-ref name="toggle" scoped="" ref="0xb7256b28"/>
        <function-ref name="isOutput" scoped="" ref="0xb7256c08"/>
        <function-ref name="get" scoped="" ref="0xb7256ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7256dc8"/>
        <function-ref name="set" scoped="" ref="0xb7256ea8"/>
        <function-ref name="clr" scoped="" ref="0xb7255010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0xb72544f0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0xb72544f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72546c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72547a8"/>
        <function-ref name="toggle" scoped="" ref="0xb7254888"/>
        <function-ref name="isOutput" scoped="" ref="0xb7254968"/>
        <function-ref name="get" scoped="" ref="0xb7254a48"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7254b28"/>
        <function-ref name="set" scoped="" ref="0xb7254c08"/>
        <function-ref name="clr" scoped="" ref="0xb7254ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0xb7257410" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0xb7257410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72575e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72576c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72577a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7257888"/>
        <function-ref name="get" scoped="" ref="0xb7257968"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7257a48"/>
        <function-ref name="set" scoped="" ref="0xb7257b28"/>
        <function-ref name="clr" scoped="" ref="0xb7257c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0xb7255170" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0xb7255170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7255348"/>
        <function-ref name="isInput" scoped="" ref="0xb7255428"/>
        <function-ref name="toggle" scoped="" ref="0xb7255508"/>
        <function-ref name="isOutput" scoped="" ref="0xb72555e8"/>
        <function-ref name="get" scoped="" ref="0xb72556c8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72557a8"/>
        <function-ref name="set" scoped="" ref="0xb7255888"/>
        <function-ref name="clr" scoped="" ref="0xb7255968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0xb7254e48" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0xb7254e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7252050"/>
        <function-ref name="isInput" scoped="" ref="0xb7252130"/>
        <function-ref name="toggle" scoped="" ref="0xb7252210"/>
        <function-ref name="isOutput" scoped="" ref="0xb72522f0"/>
        <function-ref name="get" scoped="" ref="0xb72523d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72524b0"/>
        <function-ref name="set" scoped="" ref="0xb7252590"/>
        <function-ref name="clr" scoped="" ref="0xb7252670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb631c998" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb631c998"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb631cb70"/>
        <function-ref name="isInput" scoped="" ref="0xb631cc50"/>
        <function-ref name="toggle" scoped="" ref="0xb631cd30"/>
        <function-ref name="isOutput" scoped="" ref="0xb631ce10"/>
        <function-ref name="get" scoped="" ref="0xb631cef0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb631b010"/>
        <function-ref name="set" scoped="" ref="0xb631b0f0"/>
        <function-ref name="clr" scoped="" ref="0xb631b1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb631a3b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb631a3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb631a588"/>
        <function-ref name="isInput" scoped="" ref="0xb631a668"/>
        <function-ref name="toggle" scoped="" ref="0xb631a748"/>
        <function-ref name="isOutput" scoped="" ref="0xb631a828"/>
        <function-ref name="get" scoped="" ref="0xb631a908"/>
        <function-ref name="makeOutput" scoped="" ref="0xb631a9e8"/>
        <function-ref name="set" scoped="" ref="0xb631aac8"/>
        <function-ref name="clr" scoped="" ref="0xb631aba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6319d70" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6319d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6318010"/>
        <function-ref name="isInput" scoped="" ref="0xb63180f0"/>
        <function-ref name="toggle" scoped="" ref="0xb63181d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb63182b0"/>
        <function-ref name="get" scoped="" ref="0xb6318390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6318470"/>
        <function-ref name="set" scoped="" ref="0xb6318550"/>
        <function-ref name="clr" scoped="" ref="0xb6318630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb63177f8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb63177f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb63179d0"/>
        <function-ref name="isInput" scoped="" ref="0xb6317ab0"/>
        <function-ref name="toggle" scoped="" ref="0xb6317b90"/>
        <function-ref name="isOutput" scoped="" ref="0xb6317c70"/>
        <function-ref name="get" scoped="" ref="0xb6317d50"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6317e30"/>
        <function-ref name="set" scoped="" ref="0xb6317f10"/>
        <function-ref name="clr" scoped="" ref="0xb6316010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6315228" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6315228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6315400"/>
        <function-ref name="isInput" scoped="" ref="0xb63154e0"/>
        <function-ref name="toggle" scoped="" ref="0xb63155c0"/>
        <function-ref name="isOutput" scoped="" ref="0xb63156a0"/>
        <function-ref name="get" scoped="" ref="0xb6315780"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6315860"/>
        <function-ref name="set" scoped="" ref="0xb6315940"/>
        <function-ref name="clr" scoped="" ref="0xb6315a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6314c08" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6314c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6314de0"/>
        <function-ref name="isInput" scoped="" ref="0xb6314ec0"/>
        <function-ref name="toggle" scoped="" ref="0xb6313010"/>
        <function-ref name="isOutput" scoped="" ref="0xb63130f0"/>
        <function-ref name="get" scoped="" ref="0xb63131d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb63132b0"/>
        <function-ref name="set" scoped="" ref="0xb6313390"/>
        <function-ref name="clr" scoped="" ref="0xb6313470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb63126c0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb63126c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6312898"/>
        <function-ref name="isInput" scoped="" ref="0xb6312978"/>
        <function-ref name="toggle" scoped="" ref="0xb6312a58"/>
        <function-ref name="isOutput" scoped="" ref="0xb6312b38"/>
        <function-ref name="get" scoped="" ref="0xb6312c18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6312cf8"/>
        <function-ref name="set" scoped="" ref="0xb6312dd8"/>
        <function-ref name="clr" scoped="" ref="0xb6312eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb63100b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb63100b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6310288"/>
        <function-ref name="isInput" scoped="" ref="0xb6310368"/>
        <function-ref name="toggle" scoped="" ref="0xb6310448"/>
        <function-ref name="isOutput" scoped="" ref="0xb6310528"/>
        <function-ref name="get" scoped="" ref="0xb6310608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb63106e8"/>
        <function-ref name="set" scoped="" ref="0xb63107c8"/>
        <function-ref name="clr" scoped="" ref="0xb63108a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0xb724e6b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0xb724e6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb724e888"/>
        <function-ref name="isInput" scoped="" ref="0xb724e968"/>
        <function-ref name="toggle" scoped="" ref="0xb724ea48"/>
        <function-ref name="isOutput" scoped="" ref="0xb724eb28"/>
        <function-ref name="get" scoped="" ref="0xb724ec08"/>
        <function-ref name="makeOutput" scoped="" ref="0xb724ece8"/>
        <function-ref name="set" scoped="" ref="0xb724edc8"/>
        <function-ref name="clr" scoped="" ref="0xb724eea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0xb724c330" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0xb724c330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb724c508"/>
        <function-ref name="isInput" scoped="" ref="0xb724c5e8"/>
        <function-ref name="toggle" scoped="" ref="0xb724c6c8"/>
        <function-ref name="isOutput" scoped="" ref="0xb724c7a8"/>
        <function-ref name="get" scoped="" ref="0xb724c888"/>
        <function-ref name="makeOutput" scoped="" ref="0xb724c968"/>
        <function-ref name="set" scoped="" ref="0xb724ca48"/>
        <function-ref name="clr" scoped="" ref="0xb724cb28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0xb724f3d8" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0xb724f3d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb724f5b0"/>
        <function-ref name="isInput" scoped="" ref="0xb724f690"/>
        <function-ref name="toggle" scoped="" ref="0xb724f770"/>
        <function-ref name="isOutput" scoped="" ref="0xb724f850"/>
        <function-ref name="get" scoped="" ref="0xb724f930"/>
        <function-ref name="makeOutput" scoped="" ref="0xb724fa10"/>
        <function-ref name="set" scoped="" ref="0xb724faf0"/>
        <function-ref name="clr" scoped="" ref="0xb724fbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0xb724d030" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0xb724d030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb724d208"/>
        <function-ref name="isInput" scoped="" ref="0xb724d2e8"/>
        <function-ref name="toggle" scoped="" ref="0xb724d3c8"/>
        <function-ref name="isOutput" scoped="" ref="0xb724d4a8"/>
        <function-ref name="get" scoped="" ref="0xb724d588"/>
        <function-ref name="makeOutput" scoped="" ref="0xb724d668"/>
        <function-ref name="set" scoped="" ref="0xb724d748"/>
        <function-ref name="clr" scoped="" ref="0xb724d828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0xb724cc88" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0xb724cc88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb724ce60"/>
        <function-ref name="isInput" scoped="" ref="0xb724b010"/>
        <function-ref name="toggle" scoped="" ref="0xb724b0f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb724b1d0"/>
        <function-ref name="get" scoped="" ref="0xb724b2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb724b390"/>
        <function-ref name="set" scoped="" ref="0xb724b470"/>
        <function-ref name="clr" scoped="" ref="0xb724b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0xb724fd30" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0xb724fd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb724ff08"/>
        <function-ref name="isInput" scoped="" ref="0xb724e010"/>
        <function-ref name="toggle" scoped="" ref="0xb724e0f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb724e1d0"/>
        <function-ref name="get" scoped="" ref="0xb724e2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb724e390"/>
        <function-ref name="set" scoped="" ref="0xb724e470"/>
        <function-ref name="clr" scoped="" ref="0xb724e550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0xb724d988" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0xb724d988"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb724db60"/>
        <function-ref name="isInput" scoped="" ref="0xb724dc40"/>
        <function-ref name="toggle" scoped="" ref="0xb724dd20"/>
        <function-ref name="isOutput" scoped="" ref="0xb724de00"/>
        <function-ref name="get" scoped="" ref="0xb724dee0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb724c010"/>
        <function-ref name="set" scoped="" ref="0xb724c0f0"/>
        <function-ref name="clr" scoped="" ref="0xb724c1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0xb724b6b0" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0xb724b6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb724b888"/>
        <function-ref name="isInput" scoped="" ref="0xb724b968"/>
        <function-ref name="toggle" scoped="" ref="0xb724ba48"/>
        <function-ref name="isOutput" scoped="" ref="0xb724bb28"/>
        <function-ref name="get" scoped="" ref="0xb724bc08"/>
        <function-ref name="makeOutput" scoped="" ref="0xb724bce8"/>
        <function-ref name="set" scoped="" ref="0xb724bdc8"/>
        <function-ref name="clr" scoped="" ref="0xb724bea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62de538" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62de538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62de710"/>
        <function-ref name="isInput" scoped="" ref="0xb62de7f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62de8d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62de9b0"/>
        <function-ref name="get" scoped="" ref="0xb62dea90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62deb70"/>
        <function-ref name="set" scoped="" ref="0xb62dec50"/>
        <function-ref name="clr" scoped="" ref="0xb62ded30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62dc010" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62dc010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62dc1e8"/>
        <function-ref name="isInput" scoped="" ref="0xb62dc2c8"/>
        <function-ref name="toggle" scoped="" ref="0xb62dc3a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb62dc488"/>
        <function-ref name="get" scoped="" ref="0xb62dc568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62dc648"/>
        <function-ref name="set" scoped="" ref="0xb62dc728"/>
        <function-ref name="clr" scoped="" ref="0xb62dc808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62db9e8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62db9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62dbbc0"/>
        <function-ref name="isInput" scoped="" ref="0xb62dbca0"/>
        <function-ref name="toggle" scoped="" ref="0xb62dbd80"/>
        <function-ref name="isOutput" scoped="" ref="0xb62dbe60"/>
        <function-ref name="get" scoped="" ref="0xb62da010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62da0f0"/>
        <function-ref name="set" scoped="" ref="0xb62da1d0"/>
        <function-ref name="clr" scoped="" ref="0xb62da2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62d9538" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62d9538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62d9710"/>
        <function-ref name="isInput" scoped="" ref="0xb62d97f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62d98d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62d99b0"/>
        <function-ref name="get" scoped="" ref="0xb62d9a90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62d9b70"/>
        <function-ref name="set" scoped="" ref="0xb62d9c50"/>
        <function-ref name="clr" scoped="" ref="0xb62d9d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62d7010" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62d7010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62d71e8"/>
        <function-ref name="isInput" scoped="" ref="0xb62d72c8"/>
        <function-ref name="toggle" scoped="" ref="0xb62d73a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb62d7488"/>
        <function-ref name="get" scoped="" ref="0xb62d7568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62d7648"/>
        <function-ref name="set" scoped="" ref="0xb62d7728"/>
        <function-ref name="clr" scoped="" ref="0xb62d7808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62d69e8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62d69e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62d6bc0"/>
        <function-ref name="isInput" scoped="" ref="0xb62d6ca0"/>
        <function-ref name="toggle" scoped="" ref="0xb62d6d80"/>
        <function-ref name="isOutput" scoped="" ref="0xb62d6e60"/>
        <function-ref name="get" scoped="" ref="0xb62d5010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62d50f0"/>
        <function-ref name="set" scoped="" ref="0xb62d51d0"/>
        <function-ref name="clr" scoped="" ref="0xb62d52b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62d4538" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62d4538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62d4710"/>
        <function-ref name="isInput" scoped="" ref="0xb62d47f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62d48d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62d49b0"/>
        <function-ref name="get" scoped="" ref="0xb62d4a90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62d4b70"/>
        <function-ref name="set" scoped="" ref="0xb62d4c50"/>
        <function-ref name="clr" scoped="" ref="0xb62d4d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62d2010" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62d2010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62d21e8"/>
        <function-ref name="isInput" scoped="" ref="0xb62d22c8"/>
        <function-ref name="toggle" scoped="" ref="0xb62d23a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb62d2488"/>
        <function-ref name="get" scoped="" ref="0xb62d2568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62d2648"/>
        <function-ref name="set" scoped="" ref="0xb62d2728"/>
        <function-ref name="clr" scoped="" ref="0xb62d2808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0xb7245170" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0xb7245170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7245348"/>
        <function-ref name="isInput" scoped="" ref="0xb7245428"/>
        <function-ref name="toggle" scoped="" ref="0xb7245508"/>
        <function-ref name="isOutput" scoped="" ref="0xb72455e8"/>
        <function-ref name="get" scoped="" ref="0xb72456c8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72457a8"/>
        <function-ref name="set" scoped="" ref="0xb7245888"/>
        <function-ref name="clr" scoped="" ref="0xb7245968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0xb7244e48" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0xb7244e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7243050"/>
        <function-ref name="isInput" scoped="" ref="0xb7243130"/>
        <function-ref name="toggle" scoped="" ref="0xb7243210"/>
        <function-ref name="isOutput" scoped="" ref="0xb72432f0"/>
        <function-ref name="get" scoped="" ref="0xb72433d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72434b0"/>
        <function-ref name="set" scoped="" ref="0xb7243590"/>
        <function-ref name="clr" scoped="" ref="0xb7243670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0xb7247dc8" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0xb7247dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7246010"/>
        <function-ref name="isInput" scoped="" ref="0xb72460f0"/>
        <function-ref name="toggle" scoped="" ref="0xb72461d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72462b0"/>
        <function-ref name="get" scoped="" ref="0xb7246390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7246470"/>
        <function-ref name="set" scoped="" ref="0xb7246550"/>
        <function-ref name="clr" scoped="" ref="0xb7246630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0xb7245ac8" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0xb7245ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7245ca0"/>
        <function-ref name="isInput" scoped="" ref="0xb7245d80"/>
        <function-ref name="toggle" scoped="" ref="0xb7245e60"/>
        <function-ref name="isOutput" scoped="" ref="0xb7244010"/>
        <function-ref name="get" scoped="" ref="0xb72440f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72441d0"/>
        <function-ref name="set" scoped="" ref="0xb72442b0"/>
        <function-ref name="clr" scoped="" ref="0xb7244390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0xb72437d0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0xb72437d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72439a8"/>
        <function-ref name="isInput" scoped="" ref="0xb7243a88"/>
        <function-ref name="toggle" scoped="" ref="0xb7243b68"/>
        <function-ref name="isOutput" scoped="" ref="0xb7243c48"/>
        <function-ref name="get" scoped="" ref="0xb7243d28"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7243e08"/>
        <function-ref name="set" scoped="" ref="0xb7243ee8"/>
        <function-ref name="clr" scoped="" ref="0xb7242010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0xb7246790" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0xb7246790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7246968"/>
        <function-ref name="isInput" scoped="" ref="0xb7246a48"/>
        <function-ref name="toggle" scoped="" ref="0xb7246b28"/>
        <function-ref name="isOutput" scoped="" ref="0xb7246c08"/>
        <function-ref name="get" scoped="" ref="0xb7246ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7246dc8"/>
        <function-ref name="set" scoped="" ref="0xb7246ea8"/>
        <function-ref name="clr" scoped="" ref="0xb7245010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0xb72444f0" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0xb72444f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72446c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72447a8"/>
        <function-ref name="toggle" scoped="" ref="0xb7244888"/>
        <function-ref name="isOutput" scoped="" ref="0xb7244968"/>
        <function-ref name="get" scoped="" ref="0xb7244a48"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7244b28"/>
        <function-ref name="set" scoped="" ref="0xb7244c08"/>
        <function-ref name="clr" scoped="" ref="0xb7244ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0xb7242170" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0xb7242170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7242348"/>
        <function-ref name="isInput" scoped="" ref="0xb7242428"/>
        <function-ref name="toggle" scoped="" ref="0xb7242508"/>
        <function-ref name="isOutput" scoped="" ref="0xb72425e8"/>
        <function-ref name="get" scoped="" ref="0xb72426c8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72427a8"/>
        <function-ref name="set" scoped="" ref="0xb7242888"/>
        <function-ref name="clr" scoped="" ref="0xb7242968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62a6418" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62a6418"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62a65f0"/>
        <function-ref name="isInput" scoped="" ref="0xb62a66d0"/>
        <function-ref name="toggle" scoped="" ref="0xb62a67b0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62a6890"/>
        <function-ref name="get" scoped="" ref="0xb62a6970"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62a6a50"/>
        <function-ref name="set" scoped="" ref="0xb62a6b30"/>
        <function-ref name="clr" scoped="" ref="0xb62a6c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62a5de0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62a5de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62a4010"/>
        <function-ref name="isInput" scoped="" ref="0xb62a40f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62a41d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62a42b0"/>
        <function-ref name="get" scoped="" ref="0xb62a4390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62a4470"/>
        <function-ref name="set" scoped="" ref="0xb62a4550"/>
        <function-ref name="clr" scoped="" ref="0xb62a4630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62a37f8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62a37f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62a39d0"/>
        <function-ref name="isInput" scoped="" ref="0xb62a3ab0"/>
        <function-ref name="toggle" scoped="" ref="0xb62a3b90"/>
        <function-ref name="isOutput" scoped="" ref="0xb62a3c70"/>
        <function-ref name="get" scoped="" ref="0xb62a3d50"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62a3e30"/>
        <function-ref name="set" scoped="" ref="0xb62a3f10"/>
        <function-ref name="clr" scoped="" ref="0xb62a2010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62a1228" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62a1228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62a1400"/>
        <function-ref name="isInput" scoped="" ref="0xb62a14e0"/>
        <function-ref name="toggle" scoped="" ref="0xb62a15c0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62a16a0"/>
        <function-ref name="get" scoped="" ref="0xb62a1780"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62a1860"/>
        <function-ref name="set" scoped="" ref="0xb62a1940"/>
        <function-ref name="clr" scoped="" ref="0xb62a1a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62a0c08" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62a0c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62a0de0"/>
        <function-ref name="isInput" scoped="" ref="0xb62a0ec0"/>
        <function-ref name="toggle" scoped="" ref="0xb629f010"/>
        <function-ref name="isOutput" scoped="" ref="0xb629f0f0"/>
        <function-ref name="get" scoped="" ref="0xb629f1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb629f2b0"/>
        <function-ref name="set" scoped="" ref="0xb629f390"/>
        <function-ref name="clr" scoped="" ref="0xb629f470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb629e6c0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb629e6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb629e898"/>
        <function-ref name="isInput" scoped="" ref="0xb629e978"/>
        <function-ref name="toggle" scoped="" ref="0xb629ea58"/>
        <function-ref name="isOutput" scoped="" ref="0xb629eb38"/>
        <function-ref name="get" scoped="" ref="0xb629ec18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb629ecf8"/>
        <function-ref name="set" scoped="" ref="0xb629edd8"/>
        <function-ref name="clr" scoped="" ref="0xb629eeb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb629c0b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb629c0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb629c288"/>
        <function-ref name="isInput" scoped="" ref="0xb629c368"/>
        <function-ref name="toggle" scoped="" ref="0xb629c448"/>
        <function-ref name="isOutput" scoped="" ref="0xb629c528"/>
        <function-ref name="get" scoped="" ref="0xb629c608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb629c6e8"/>
        <function-ref name="set" scoped="" ref="0xb629c7c8"/>
        <function-ref name="clr" scoped="" ref="0xb629c8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb629ba88" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb629ba88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb629bc60"/>
        <function-ref name="isInput" scoped="" ref="0xb629bd40"/>
        <function-ref name="toggle" scoped="" ref="0xb629be20"/>
        <function-ref name="isOutput" scoped="" ref="0xb629bf00"/>
        <function-ref name="get" scoped="" ref="0xb629a010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb629a0f0"/>
        <function-ref name="set" scoped="" ref="0xb629a1d0"/>
        <function-ref name="clr" scoped="" ref="0xb629a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0xb723e9e8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0xb723e9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb723ebc0"/>
        <function-ref name="isInput" scoped="" ref="0xb723eca0"/>
        <function-ref name="toggle" scoped="" ref="0xb723ed80"/>
        <function-ref name="isOutput" scoped="" ref="0xb723ee60"/>
        <function-ref name="get" scoped="" ref="0xb723c010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb723c0f0"/>
        <function-ref name="set" scoped="" ref="0xb723c1d0"/>
        <function-ref name="clr" scoped="" ref="0xb723c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0xb723b790" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0xb723b790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb723b968"/>
        <function-ref name="isInput" scoped="" ref="0xb723ba48"/>
        <function-ref name="toggle" scoped="" ref="0xb723bb28"/>
        <function-ref name="isOutput" scoped="" ref="0xb723bc08"/>
        <function-ref name="get" scoped="" ref="0xb723bce8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb723bdc8"/>
        <function-ref name="set" scoped="" ref="0xb723bea8"/>
        <function-ref name="clr" scoped="" ref="0xb723a010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0xb723f6f8" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0xb723f6f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb723f8d0"/>
        <function-ref name="isInput" scoped="" ref="0xb723f9b0"/>
        <function-ref name="toggle" scoped="" ref="0xb723fa90"/>
        <function-ref name="isOutput" scoped="" ref="0xb723fb70"/>
        <function-ref name="get" scoped="" ref="0xb723fc50"/>
        <function-ref name="makeOutput" scoped="" ref="0xb723fd30"/>
        <function-ref name="set" scoped="" ref="0xb723fe10"/>
        <function-ref name="clr" scoped="" ref="0xb723fef0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0xb723c410" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0xb723c410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb723c5e8"/>
        <function-ref name="isInput" scoped="" ref="0xb723c6c8"/>
        <function-ref name="toggle" scoped="" ref="0xb723c7a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb723c888"/>
        <function-ref name="get" scoped="" ref="0xb723c968"/>
        <function-ref name="makeOutput" scoped="" ref="0xb723ca48"/>
        <function-ref name="set" scoped="" ref="0xb723cb28"/>
        <function-ref name="clr" scoped="" ref="0xb723cc08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0xb723a170" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0xb723a170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb723a348"/>
        <function-ref name="isInput" scoped="" ref="0xb723a428"/>
        <function-ref name="toggle" scoped="" ref="0xb723a508"/>
        <function-ref name="isOutput" scoped="" ref="0xb723a5e8"/>
        <function-ref name="get" scoped="" ref="0xb723a6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb723a7a8"/>
        <function-ref name="set" scoped="" ref="0xb723a888"/>
        <function-ref name="clr" scoped="" ref="0xb723a968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0xb723e090" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0xb723e090"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb723e268"/>
        <function-ref name="isInput" scoped="" ref="0xb723e348"/>
        <function-ref name="toggle" scoped="" ref="0xb723e428"/>
        <function-ref name="isOutput" scoped="" ref="0xb723e508"/>
        <function-ref name="get" scoped="" ref="0xb723e5e8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb723e6c8"/>
        <function-ref name="set" scoped="" ref="0xb723e7a8"/>
        <function-ref name="clr" scoped="" ref="0xb723e888"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0xb723cd68" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0xb723cd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb723b010"/>
        <function-ref name="isInput" scoped="" ref="0xb723b0f0"/>
        <function-ref name="toggle" scoped="" ref="0xb723b1d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb723b2b0"/>
        <function-ref name="get" scoped="" ref="0xb723b390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb723b470"/>
        <function-ref name="set" scoped="" ref="0xb723b550"/>
        <function-ref name="clr" scoped="" ref="0xb723b630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0xb723aac8" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0xb723aac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb723aca0"/>
        <function-ref name="isInput" scoped="" ref="0xb723ad80"/>
        <function-ref name="toggle" scoped="" ref="0xb723ae60"/>
        <function-ref name="isOutput" scoped="" ref="0xb7239010"/>
        <function-ref name="get" scoped="" ref="0xb72390f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72391d0"/>
        <function-ref name="set" scoped="" ref="0xb72392b0"/>
        <function-ref name="clr" scoped="" ref="0xb7239390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6272de8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6272de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb626d010"/>
        <function-ref name="isInput" scoped="" ref="0xb626d0f0"/>
        <function-ref name="toggle" scoped="" ref="0xb626d1d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb626d2b0"/>
        <function-ref name="get" scoped="" ref="0xb626d390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb626d470"/>
        <function-ref name="set" scoped="" ref="0xb626d550"/>
        <function-ref name="clr" scoped="" ref="0xb626d630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb626c7f8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb626c7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb626c9d0"/>
        <function-ref name="isInput" scoped="" ref="0xb626cab0"/>
        <function-ref name="toggle" scoped="" ref="0xb626cb90"/>
        <function-ref name="isOutput" scoped="" ref="0xb626cc70"/>
        <function-ref name="get" scoped="" ref="0xb626cd50"/>
        <function-ref name="makeOutput" scoped="" ref="0xb626ce30"/>
        <function-ref name="set" scoped="" ref="0xb626cf10"/>
        <function-ref name="clr" scoped="" ref="0xb626b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb626a228" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb626a228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb626a400"/>
        <function-ref name="isInput" scoped="" ref="0xb626a4e0"/>
        <function-ref name="toggle" scoped="" ref="0xb626a5c0"/>
        <function-ref name="isOutput" scoped="" ref="0xb626a6a0"/>
        <function-ref name="get" scoped="" ref="0xb626a780"/>
        <function-ref name="makeOutput" scoped="" ref="0xb626a860"/>
        <function-ref name="set" scoped="" ref="0xb626a940"/>
        <function-ref name="clr" scoped="" ref="0xb626aa20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6269c08" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6269c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6269de0"/>
        <function-ref name="isInput" scoped="" ref="0xb6269ec0"/>
        <function-ref name="toggle" scoped="" ref="0xb6268010"/>
        <function-ref name="isOutput" scoped="" ref="0xb62680f0"/>
        <function-ref name="get" scoped="" ref="0xb62681d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62682b0"/>
        <function-ref name="set" scoped="" ref="0xb6268390"/>
        <function-ref name="clr" scoped="" ref="0xb6268470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62676c0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62676c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6267898"/>
        <function-ref name="isInput" scoped="" ref="0xb6267978"/>
        <function-ref name="toggle" scoped="" ref="0xb6267a58"/>
        <function-ref name="isOutput" scoped="" ref="0xb6267b38"/>
        <function-ref name="get" scoped="" ref="0xb6267c18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6267cf8"/>
        <function-ref name="set" scoped="" ref="0xb6267dd8"/>
        <function-ref name="clr" scoped="" ref="0xb6267eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62650b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62650b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6265288"/>
        <function-ref name="isInput" scoped="" ref="0xb6265368"/>
        <function-ref name="toggle" scoped="" ref="0xb6265448"/>
        <function-ref name="isOutput" scoped="" ref="0xb6265528"/>
        <function-ref name="get" scoped="" ref="0xb6265608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62656e8"/>
        <function-ref name="set" scoped="" ref="0xb62657c8"/>
        <function-ref name="clr" scoped="" ref="0xb62658a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6264a88" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6264a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6264c60"/>
        <function-ref name="isInput" scoped="" ref="0xb6264d40"/>
        <function-ref name="toggle" scoped="" ref="0xb6264e20"/>
        <function-ref name="isOutput" scoped="" ref="0xb6264f00"/>
        <function-ref name="get" scoped="" ref="0xb6263010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62630f0"/>
        <function-ref name="set" scoped="" ref="0xb62631d0"/>
        <function-ref name="clr" scoped="" ref="0xb62632b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6262538" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6262538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6262710"/>
        <function-ref name="isInput" scoped="" ref="0xb62627f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62628d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62629b0"/>
        <function-ref name="get" scoped="" ref="0xb6262a90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6262b70"/>
        <function-ref name="set" scoped="" ref="0xb6262c50"/>
        <function-ref name="clr" scoped="" ref="0xb6262d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0xb7235410" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0xb7235410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72355e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72356c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72357a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7235888"/>
        <function-ref name="get" scoped="" ref="0xb7235968"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7235a48"/>
        <function-ref name="set" scoped="" ref="0xb7235b28"/>
        <function-ref name="clr" scoped="" ref="0xb7235c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0xb7233170" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0xb7233170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7233348"/>
        <function-ref name="isInput" scoped="" ref="0xb7233428"/>
        <function-ref name="toggle" scoped="" ref="0xb7233508"/>
        <function-ref name="isOutput" scoped="" ref="0xb72335e8"/>
        <function-ref name="get" scoped="" ref="0xb72336c8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72337a8"/>
        <function-ref name="set" scoped="" ref="0xb7233888"/>
        <function-ref name="clr" scoped="" ref="0xb7233968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0xb7236128" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0xb7236128"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7236300"/>
        <function-ref name="isInput" scoped="" ref="0xb72363e0"/>
        <function-ref name="toggle" scoped="" ref="0xb72364c0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72365a0"/>
        <function-ref name="get" scoped="" ref="0xb7236680"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7236760"/>
        <function-ref name="set" scoped="" ref="0xb7236840"/>
        <function-ref name="clr" scoped="" ref="0xb7236920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0xb7235d68" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0xb7235d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7234010"/>
        <function-ref name="isInput" scoped="" ref="0xb72340f0"/>
        <function-ref name="toggle" scoped="" ref="0xb72341d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb72342b0"/>
        <function-ref name="get" scoped="" ref="0xb7234390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7234470"/>
        <function-ref name="set" scoped="" ref="0xb7234550"/>
        <function-ref name="clr" scoped="" ref="0xb7234630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0xb7233ac8" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0xb7233ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7233ca0"/>
        <function-ref name="isInput" scoped="" ref="0xb7233d80"/>
        <function-ref name="toggle" scoped="" ref="0xb7233e60"/>
        <function-ref name="isOutput" scoped="" ref="0xb7231010"/>
        <function-ref name="get" scoped="" ref="0xb72310f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72311d0"/>
        <function-ref name="set" scoped="" ref="0xb72312b0"/>
        <function-ref name="clr" scoped="" ref="0xb7231390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0xb7236a80" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0xb7236a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7236c58"/>
        <function-ref name="isInput" scoped="" ref="0xb7236d38"/>
        <function-ref name="toggle" scoped="" ref="0xb7236e18"/>
        <function-ref name="isOutput" scoped="" ref="0xb7236ef8"/>
        <function-ref name="get" scoped="" ref="0xb7235010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72350f0"/>
        <function-ref name="set" scoped="" ref="0xb72351d0"/>
        <function-ref name="clr" scoped="" ref="0xb72352b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0xb7234790" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0xb7234790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7234968"/>
        <function-ref name="isInput" scoped="" ref="0xb7234a48"/>
        <function-ref name="toggle" scoped="" ref="0xb7234b28"/>
        <function-ref name="isOutput" scoped="" ref="0xb7234c08"/>
        <function-ref name="get" scoped="" ref="0xb7234ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7234dc8"/>
        <function-ref name="set" scoped="" ref="0xb7234ea8"/>
        <function-ref name="clr" scoped="" ref="0xb7233010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0xb72314f0" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0xb72314f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72316c8"/>
        <function-ref name="isInput" scoped="" ref="0xb72317a8"/>
        <function-ref name="toggle" scoped="" ref="0xb7231888"/>
        <function-ref name="isOutput" scoped="" ref="0xb7231968"/>
        <function-ref name="get" scoped="" ref="0xb7231a48"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7231b28"/>
        <function-ref name="set" scoped="" ref="0xb7231c08"/>
        <function-ref name="clr" scoped="" ref="0xb7231ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62355c0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62355c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6235798"/>
        <function-ref name="isInput" scoped="" ref="0xb6235878"/>
        <function-ref name="toggle" scoped="" ref="0xb6235958"/>
        <function-ref name="isOutput" scoped="" ref="0xb6235a38"/>
        <function-ref name="get" scoped="" ref="0xb6235b18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6235bf8"/>
        <function-ref name="set" scoped="" ref="0xb6235cd8"/>
        <function-ref name="clr" scoped="" ref="0xb6235db8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6233010" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6233010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62331e8"/>
        <function-ref name="isInput" scoped="" ref="0xb62332c8"/>
        <function-ref name="toggle" scoped="" ref="0xb62333a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb6233488"/>
        <function-ref name="get" scoped="" ref="0xb6233568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6233648"/>
        <function-ref name="set" scoped="" ref="0xb6233728"/>
        <function-ref name="clr" scoped="" ref="0xb6233808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb62329e8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb62329e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6232bc0"/>
        <function-ref name="isInput" scoped="" ref="0xb6232ca0"/>
        <function-ref name="toggle" scoped="" ref="0xb6232d80"/>
        <function-ref name="isOutput" scoped="" ref="0xb6232e60"/>
        <function-ref name="get" scoped="" ref="0xb6231010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb62310f0"/>
        <function-ref name="set" scoped="" ref="0xb62311d0"/>
        <function-ref name="clr" scoped="" ref="0xb62312b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6230538" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6230538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6230710"/>
        <function-ref name="isInput" scoped="" ref="0xb62307f0"/>
        <function-ref name="toggle" scoped="" ref="0xb62308d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb62309b0"/>
        <function-ref name="get" scoped="" ref="0xb6230a90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6230b70"/>
        <function-ref name="set" scoped="" ref="0xb6230c50"/>
        <function-ref name="clr" scoped="" ref="0xb6230d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb622e010" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb622e010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb622e1e8"/>
        <function-ref name="isInput" scoped="" ref="0xb622e2c8"/>
        <function-ref name="toggle" scoped="" ref="0xb622e3a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb622e488"/>
        <function-ref name="get" scoped="" ref="0xb622e568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb622e648"/>
        <function-ref name="set" scoped="" ref="0xb622e728"/>
        <function-ref name="clr" scoped="" ref="0xb622e808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb622d9e8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb622d9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb622dbc0"/>
        <function-ref name="isInput" scoped="" ref="0xb622dca0"/>
        <function-ref name="toggle" scoped="" ref="0xb622dd80"/>
        <function-ref name="isOutput" scoped="" ref="0xb622de60"/>
        <function-ref name="get" scoped="" ref="0xb622c010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb622c0f0"/>
        <function-ref name="set" scoped="" ref="0xb622c1d0"/>
        <function-ref name="clr" scoped="" ref="0xb622c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb622b538" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb622b538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb622b710"/>
        <function-ref name="isInput" scoped="" ref="0xb622b7f0"/>
        <function-ref name="toggle" scoped="" ref="0xb622b8d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb622b9b0"/>
        <function-ref name="get" scoped="" ref="0xb622ba90"/>
        <function-ref name="makeOutput" scoped="" ref="0xb622bb70"/>
        <function-ref name="set" scoped="" ref="0xb622bc50"/>
        <function-ref name="clr" scoped="" ref="0xb622bd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb6229010" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb6229010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb62291e8"/>
        <function-ref name="isInput" scoped="" ref="0xb62292c8"/>
        <function-ref name="toggle" scoped="" ref="0xb62293a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb6229488"/>
        <function-ref name="get" scoped="" ref="0xb6229568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6229648"/>
        <function-ref name="set" scoped="" ref="0xb6229728"/>
        <function-ref name="clr" scoped="" ref="0xb6229808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0xb722de48" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0xb722de48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb722c050"/>
        <function-ref name="isInput" scoped="" ref="0xb722c130"/>
        <function-ref name="toggle" scoped="" ref="0xb722c210"/>
        <function-ref name="isOutput" scoped="" ref="0xb722c2f0"/>
        <function-ref name="get" scoped="" ref="0xb722c3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb722c4b0"/>
        <function-ref name="set" scoped="" ref="0xb722c590"/>
        <function-ref name="clr" scoped="" ref="0xb722c670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0xb722bac8" loc="49:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0xb722bac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb722bca0"/>
        <function-ref name="isInput" scoped="" ref="0xb722bd80"/>
        <function-ref name="toggle" scoped="" ref="0xb722be60"/>
        <function-ref name="isOutput" scoped="" ref="0xb722a010"/>
        <function-ref name="get" scoped="" ref="0xb722a0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb722a1d0"/>
        <function-ref name="set" scoped="" ref="0xb722a2b0"/>
        <function-ref name="clr" scoped="" ref="0xb722a390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0xb722eb00" loc="44:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0xb722eb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb722ecd8"/>
        <function-ref name="isInput" scoped="" ref="0xb722edb8"/>
        <function-ref name="toggle" scoped="" ref="0xb722ee98"/>
        <function-ref name="isOutput" scoped="" ref="0xb722d010"/>
        <function-ref name="get" scoped="" ref="0xb722d0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb722d1d0"/>
        <function-ref name="set" scoped="" ref="0xb722d2b0"/>
        <function-ref name="clr" scoped="" ref="0xb722d390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0xb722c7d0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0xb722c7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb722c9a8"/>
        <function-ref name="isInput" scoped="" ref="0xb722ca88"/>
        <function-ref name="toggle" scoped="" ref="0xb722cb68"/>
        <function-ref name="isOutput" scoped="" ref="0xb722cc48"/>
        <function-ref name="get" scoped="" ref="0xb722cd28"/>
        <function-ref name="makeOutput" scoped="" ref="0xb722ce08"/>
        <function-ref name="set" scoped="" ref="0xb722cee8"/>
        <function-ref name="clr" scoped="" ref="0xb722b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0xb722a4f0" loc="50:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0xb722a4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb722a6c8"/>
        <function-ref name="isInput" scoped="" ref="0xb722a7a8"/>
        <function-ref name="toggle" scoped="" ref="0xb722a888"/>
        <function-ref name="isOutput" scoped="" ref="0xb722a968"/>
        <function-ref name="get" scoped="" ref="0xb722aa48"/>
        <function-ref name="makeOutput" scoped="" ref="0xb722ab28"/>
        <function-ref name="set" scoped="" ref="0xb722ac08"/>
        <function-ref name="clr" scoped="" ref="0xb722ace8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0xb722d4f0" loc="45:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0xb722d4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb722d6c8"/>
        <function-ref name="isInput" scoped="" ref="0xb722d7a8"/>
        <function-ref name="toggle" scoped="" ref="0xb722d888"/>
        <function-ref name="isOutput" scoped="" ref="0xb722d968"/>
        <function-ref name="get" scoped="" ref="0xb722da48"/>
        <function-ref name="makeOutput" scoped="" ref="0xb722db28"/>
        <function-ref name="set" scoped="" ref="0xb722dc08"/>
        <function-ref name="clr" scoped="" ref="0xb722dce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0xb722b170" loc="48:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0xb722b170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb722b348"/>
        <function-ref name="isInput" scoped="" ref="0xb722b428"/>
        <function-ref name="toggle" scoped="" ref="0xb722b508"/>
        <function-ref name="isOutput" scoped="" ref="0xb722b5e8"/>
        <function-ref name="get" scoped="" ref="0xb722b6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb722b7a8"/>
        <function-ref name="set" scoped="" ref="0xb722b888"/>
        <function-ref name="clr" scoped="" ref="0xb722b968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0xb722ae48" loc="51:../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0xb722ae48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7229050"/>
        <function-ref name="isInput" scoped="" ref="0xb7229130"/>
        <function-ref name="toggle" scoped="" ref="0xb7229210"/>
        <function-ref name="isOutput" scoped="" ref="0xb72292f0"/>
        <function-ref name="get" scoped="" ref="0xb72293d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72294b0"/>
        <function-ref name="set" scoped="" ref="0xb7229590"/>
        <function-ref name="clr" scoped="" ref="0xb7229670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb61fc418" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb61fc418"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb61fc5f0"/>
        <function-ref name="isInput" scoped="" ref="0xb61fc6d0"/>
        <function-ref name="toggle" scoped="" ref="0xb61fc7b0"/>
        <function-ref name="isOutput" scoped="" ref="0xb61fc890"/>
        <function-ref name="get" scoped="" ref="0xb61fc970"/>
        <function-ref name="makeOutput" scoped="" ref="0xb61fca50"/>
        <function-ref name="set" scoped="" ref="0xb61fcb30"/>
        <function-ref name="clr" scoped="" ref="0xb61fcc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb61fbde0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb61fbde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb61fa010"/>
        <function-ref name="isInput" scoped="" ref="0xb61fa0f0"/>
        <function-ref name="toggle" scoped="" ref="0xb61fa1d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb61fa2b0"/>
        <function-ref name="get" scoped="" ref="0xb61fa390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb61fa470"/>
        <function-ref name="set" scoped="" ref="0xb61fa550"/>
        <function-ref name="clr" scoped="" ref="0xb61fa630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb61f97f8" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb61f97f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb61f99d0"/>
        <function-ref name="isInput" scoped="" ref="0xb61f9ab0"/>
        <function-ref name="toggle" scoped="" ref="0xb61f9b90"/>
        <function-ref name="isOutput" scoped="" ref="0xb61f9c70"/>
        <function-ref name="get" scoped="" ref="0xb61f9d50"/>
        <function-ref name="makeOutput" scoped="" ref="0xb61f9e30"/>
        <function-ref name="set" scoped="" ref="0xb61f9f10"/>
        <function-ref name="clr" scoped="" ref="0xb61f8010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb61f7228" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb61f7228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb61f7400"/>
        <function-ref name="isInput" scoped="" ref="0xb61f74e0"/>
        <function-ref name="toggle" scoped="" ref="0xb61f75c0"/>
        <function-ref name="isOutput" scoped="" ref="0xb61f76a0"/>
        <function-ref name="get" scoped="" ref="0xb61f7780"/>
        <function-ref name="makeOutput" scoped="" ref="0xb61f7860"/>
        <function-ref name="set" scoped="" ref="0xb61f7940"/>
        <function-ref name="clr" scoped="" ref="0xb61f7a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb61f6c08" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb61f6c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb61f6de0"/>
        <function-ref name="isInput" scoped="" ref="0xb61f6ec0"/>
        <function-ref name="toggle" scoped="" ref="0xb61f5010"/>
        <function-ref name="isOutput" scoped="" ref="0xb61f50f0"/>
        <function-ref name="get" scoped="" ref="0xb61f51d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb61f52b0"/>
        <function-ref name="set" scoped="" ref="0xb61f5390"/>
        <function-ref name="clr" scoped="" ref="0xb61f5470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb61f46c0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb61f46c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb61f4898"/>
        <function-ref name="isInput" scoped="" ref="0xb61f4978"/>
        <function-ref name="toggle" scoped="" ref="0xb61f4a58"/>
        <function-ref name="isOutput" scoped="" ref="0xb61f4b38"/>
        <function-ref name="get" scoped="" ref="0xb61f4c18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb61f4cf8"/>
        <function-ref name="set" scoped="" ref="0xb61f4dd8"/>
        <function-ref name="clr" scoped="" ref="0xb61f4eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb61f20b0" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb61f20b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb61f2288"/>
        <function-ref name="isInput" scoped="" ref="0xb61f2368"/>
        <function-ref name="toggle" scoped="" ref="0xb61f2448"/>
        <function-ref name="isOutput" scoped="" ref="0xb61f2528"/>
        <function-ref name="get" scoped="" ref="0xb61f2608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb61f26e8"/>
        <function-ref name="set" scoped="" ref="0xb61f27c8"/>
        <function-ref name="clr" scoped="" ref="0xb61f28a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb61f1a88" loc="46:../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb61f1a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb61f1c60"/>
        <function-ref name="isInput" scoped="" ref="0xb61f1d40"/>
        <function-ref name="toggle" scoped="" ref="0xb61f1e20"/>
        <function-ref name="isOutput" scoped="" ref="0xb61f1f00"/>
        <function-ref name="get" scoped="" ref="0xb61f0010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb61f00f0"/>
        <function-ref name="set" scoped="" ref="0xb61f01d0"/>
        <function-ref name="clr" scoped="" ref="0xb61f02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb7223010" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb7223010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72231e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72232c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72233a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7223488"/>
        <function-ref name="get" scoped="" ref="0xb7223568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7223648"/>
        <function-ref name="set" scoped="" ref="0xb7223728"/>
        <function-ref name="clr" scoped="" ref="0xb7223808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb72157b8" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb72157b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7215990"/>
        <function-ref name="isInput" scoped="" ref="0xb7215a70"/>
        <function-ref name="toggle" scoped="" ref="0xb7215b50"/>
        <function-ref name="isOutput" scoped="" ref="0xb7215c30"/>
        <function-ref name="get" scoped="" ref="0xb7215d10"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7215df0"/>
        <function-ref name="set" scoped="" ref="0xb7215ed0"/>
        <function-ref name="clr" scoped="" ref="0xb7214010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb7212010" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb7212010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb72121e8"/>
        <function-ref name="isInput" scoped="" ref="0xb72122c8"/>
        <function-ref name="toggle" scoped="" ref="0xb72123a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7212488"/>
        <function-ref name="get" scoped="" ref="0xb7212568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7212648"/>
        <function-ref name="set" scoped="" ref="0xb7212728"/>
        <function-ref name="clr" scoped="" ref="0xb7212808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb720f7b8" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb720f7b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb720f990"/>
        <function-ref name="isInput" scoped="" ref="0xb720fa70"/>
        <function-ref name="toggle" scoped="" ref="0xb720fb50"/>
        <function-ref name="isOutput" scoped="" ref="0xb720fc30"/>
        <function-ref name="get" scoped="" ref="0xb720fd10"/>
        <function-ref name="makeOutput" scoped="" ref="0xb720fdf0"/>
        <function-ref name="set" scoped="" ref="0xb720fed0"/>
        <function-ref name="clr" scoped="" ref="0xb720e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb720c010" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb720c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb720c1e8"/>
        <function-ref name="isInput" scoped="" ref="0xb720c2c8"/>
        <function-ref name="toggle" scoped="" ref="0xb720c3a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb720c488"/>
        <function-ref name="get" scoped="" ref="0xb720c568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb720c648"/>
        <function-ref name="set" scoped="" ref="0xb720c728"/>
        <function-ref name="clr" scoped="" ref="0xb720c808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb720a7b8" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb720a7b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb720a990"/>
        <function-ref name="isInput" scoped="" ref="0xb720aa70"/>
        <function-ref name="toggle" scoped="" ref="0xb720ab50"/>
        <function-ref name="isOutput" scoped="" ref="0xb720ac30"/>
        <function-ref name="get" scoped="" ref="0xb720ad10"/>
        <function-ref name="makeOutput" scoped="" ref="0xb720adf0"/>
        <function-ref name="set" scoped="" ref="0xb720aed0"/>
        <function-ref name="clr" scoped="" ref="0xb7209010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb7206080" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb7206080"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7206258"/>
        <function-ref name="isInput" scoped="" ref="0xb7206338"/>
        <function-ref name="toggle" scoped="" ref="0xb7206418"/>
        <function-ref name="isOutput" scoped="" ref="0xb72064f8"/>
        <function-ref name="get" scoped="" ref="0xb72065d8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72066b8"/>
        <function-ref name="set" scoped="" ref="0xb7206798"/>
        <function-ref name="clr" scoped="" ref="0xb7206878"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb7204840" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb7204840"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7204a18"/>
        <function-ref name="isInput" scoped="" ref="0xb7204af8"/>
        <function-ref name="toggle" scoped="" ref="0xb7204bd8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7204cb8"/>
        <function-ref name="get" scoped="" ref="0xb7204d98"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7204e78"/>
        <function-ref name="set" scoped="" ref="0xb7203010"/>
        <function-ref name="clr" scoped="" ref="0xb72030f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb72010b0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb72010b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7201288"/>
        <function-ref name="isInput" scoped="" ref="0xb7201368"/>
        <function-ref name="toggle" scoped="" ref="0xb7201448"/>
        <function-ref name="isOutput" scoped="" ref="0xb7201528"/>
        <function-ref name="get" scoped="" ref="0xb7201608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb72016e8"/>
        <function-ref name="set" scoped="" ref="0xb72017c8"/>
        <function-ref name="clr" scoped="" ref="0xb72018a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb71fe880" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb71fe880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb71fea58"/>
        <function-ref name="isInput" scoped="" ref="0xb71feb38"/>
        <function-ref name="toggle" scoped="" ref="0xb71fec18"/>
        <function-ref name="isOutput" scoped="" ref="0xb71fecf8"/>
        <function-ref name="get" scoped="" ref="0xb71fedd8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb71feeb8"/>
        <function-ref name="set" scoped="" ref="0xb71fd010"/>
        <function-ref name="clr" scoped="" ref="0xb71fd0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb71fb0b0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb71fb0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb71fb288"/>
        <function-ref name="isInput" scoped="" ref="0xb71fb368"/>
        <function-ref name="toggle" scoped="" ref="0xb71fb448"/>
        <function-ref name="isOutput" scoped="" ref="0xb71fb528"/>
        <function-ref name="get" scoped="" ref="0xb71fb608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb71fb6e8"/>
        <function-ref name="set" scoped="" ref="0xb71fb7c8"/>
        <function-ref name="clr" scoped="" ref="0xb71fb8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb71f8880" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb71f8880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb71f8a58"/>
        <function-ref name="isInput" scoped="" ref="0xb71f8b38"/>
        <function-ref name="toggle" scoped="" ref="0xb71f8c18"/>
        <function-ref name="isOutput" scoped="" ref="0xb71f8cf8"/>
        <function-ref name="get" scoped="" ref="0xb71f8dd8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb71f8eb8"/>
        <function-ref name="set" scoped="" ref="0xb71f7010"/>
        <function-ref name="clr" scoped="" ref="0xb71f70f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb71f50b0" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb71f50b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb71f5288"/>
        <function-ref name="isInput" scoped="" ref="0xb71f5368"/>
        <function-ref name="toggle" scoped="" ref="0xb71f5448"/>
        <function-ref name="isOutput" scoped="" ref="0xb71f5528"/>
        <function-ref name="get" scoped="" ref="0xb71f5608"/>
        <function-ref name="makeOutput" scoped="" ref="0xb71f56e8"/>
        <function-ref name="set" scoped="" ref="0xb71f57c8"/>
        <function-ref name="clr" scoped="" ref="0xb71f58a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0xb71f3880" loc="47:../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0xb71f3880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb71f3a58"/>
        <function-ref name="isInput" scoped="" ref="0xb71f3b38"/>
        <function-ref name="toggle" scoped="" ref="0xb71f3c18"/>
        <function-ref name="isOutput" scoped="" ref="0xb71f3cf8"/>
        <function-ref name="get" scoped="" ref="0xb71f3dd8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb71f3eb8"/>
        <function-ref name="set" scoped="" ref="0xb71f2010"/>
        <function-ref name="clr" scoped="" ref="0xb71f20f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb71d5bf8" loc="61:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb71d5bf8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0xb73767d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0xb73767d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb71d5dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0xb71d4010" loc="62:../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0xb71d4010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0xb71d41e8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0xb71d42c8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0xb71d43a8"/>
        <function-ref name="actualMicro" scoped="" ref="0xb71d4488"/>
        <function-ref name="adcPrescaler" scoped="" ref="0xb71d4568"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0xb71c3808" loc="60:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0xb71c3808"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb71c39e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0xb72bca18" loc="57:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0xb72bca18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0xb72bcbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0xb71c3400" loc="59:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0xb71c3400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb71c35d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0xb72bcdb0" loc="58:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0xb72bcdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb71c3010"/>
        <function-ref name="taskLoop" scoped="" ref="0xb71c30f0"/>
        <function-ref name="runNextTask" scoped="" ref="0xb71c31d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0xb7355c30" loc="48:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0xb7355c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb7355e08"/>
        <function-ref name="runTask" scoped="" ref="0xb7355ee8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0xb735a528" loc="47:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0xb735a528"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb735a700"/>
        <function-ref name="taskLoop" scoped="" ref="0xb735a7e0"/>
        <function-ref name="runNextTask" scoped="" ref="0xb735a8c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0xb72e0100" loc="56:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0xb72e0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb72e02d8"/>
        <function-ref name="runTask" scoped="" ref="0xb72e03b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0xb72e0d58" loc="57:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0xb72e0d58"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0xb72df010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0xb72e18a8" loc="55:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0xb72e18a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb72e1a80"/>
        <function-ref name="taskLoop" scoped="" ref="0xb72e1b60"/>
        <function-ref name="runNextTask" scoped="" ref="0xb72e1c40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0xb72cc218" loc="88:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0xb72cc218"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0xb72cc3f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0xb735b718" loc="84:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0xb735b718"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0xb735b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0xb72ce3d0" loc="85:../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0xb72ce3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0xb72ce5a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RootControl" ref="0xb71621a0" loc="36:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0xb71621a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0xb7162378"/>
        <function-ref name="setRoot" scoped="" ref="0xb7162458"/>
        <function-ref name="unsetRoot" scoped="" ref="0xb7162538"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionPacket" ref="0xb7164a78" loc="35:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionPacket" scoped="" ref="0xb7164a78"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb7164c50"/>
        <function-ref name="setOrigin" scoped="" ref="0xb7164d30"/>
        <function-ref name="setType" scoped="" ref="0xb7164e10"/>
        <function-ref name="getOrigin" scoped="" ref="0xb7164ef0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb716f010"/>
        <function-ref name="getType" scoped="" ref="0xb716f0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0xb71bbc50" loc="25:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0xb71bbc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0xb71bbe28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0xb71b87d0" loc="27:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0xb71b87d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb71b89a8"/>
        <function-ref name="stopDone" scoped="" ref="0xb71b8a88"/>
        <function-ref name="start" scoped="" ref="0xb71b8b68"/>
        <function-ref name="stop" scoped="" ref="0xb71b8c48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="uartSendTask" ref="0xb714d828" loc="49:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="uartSendTask" scoped="" ref="0xb714d828"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb714da00"/>
        <function-ref name="runTask" scoped="" ref="0xb714dae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Snoop" ref="0xb71b30a8" loc="32:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb71b30a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb71b3280"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0xb71b80f0" loc="26:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0xb71b80f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb71b82c8"/>
        <function-ref name="stopDone" scoped="" ref="0xb71b83a8"/>
        <function-ref name="start" scoped="" ref="0xb71b8488"/>
        <function-ref name="stop" scoped="" ref="0xb71b8568"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0xb7172ee8" loc="31:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb7172ee8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb71b50e0"/>
        <function-ref name="getPayload" scoped="" ref="0xb71b51c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb71b52a0"/>
        <function-ref name="cancel" scoped="" ref="0xb71b5380"/>
        <function-ref name="sendDone" scoped="" ref="0xb71b5460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UARTMessagePool" ref="0xb7157560" loc="39:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UARTMessagePool" scoped="" ref="0xb7157560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
            <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb715c630"/>
        <function-ref name="maxSize" scoped="" ref="0xb715c048"/>
        <function-ref name="empty" scoped="" ref="0xb7157b88"/>
        <function-ref name="put" scoped="" ref="0xb715c2a0"/>
        <function-ref name="size" scoped="" ref="0xb7157de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read" ref="0xb714cb30" loc="43:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb714cb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb714e1e0"/>
        <function-ref name="readDone" scoped="" ref="0xb714e438"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialSend" ref="0xb716a988" loc="34:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialSend" scoped="" ref="0xb716a988"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb716ab60"/>
        <function-ref name="getPayload" scoped="" ref="0xb716ac40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb716ad20"/>
        <function-ref name="cancel" scoped="" ref="0xb716ae00"/>
        <function-ref name="sendDone" scoped="" ref="0xb716aee0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RoutingControl" ref="0xb71b4e30" loc="28:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoutingControl" scoped="" ref="0xb71b4e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb71b7050"/>
        <function-ref name="stop" scoped="" ref="0xb71b7130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0xb71b3408" loc="33:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb71b3408"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb71b35e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb71456d8" loc="44:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb71456d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb71458b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb7145990"/>
        <function-ref name="led1On" scoped="" ref="0xb7145a70"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb7145b50"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb7145c30"/>
        <function-ref name="get" scoped="" ref="0xb7145d10"/>
        <function-ref name="led1Off" scoped="" ref="0xb7145df0"/>
        <function-ref name="led2Off" scoped="" ref="0xb714d1d0"/>
        <function-ref name="set" scoped="" ref="0xb7145ed0"/>
        <function-ref name="led0On" scoped="" ref="0xb714d010"/>
        <function-ref name="led2On" scoped="" ref="0xb714d0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UARTQueue" ref="0xb715eee8" loc="38:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UARTQueue" scoped="" ref="0xb715eee8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
              <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0xb7168eb8"/>
        <function-ref name="enqueue" scoped="" ref="0xb715d5b8"/>
        <function-ref name="element" scoped="" ref="0xb715d908"/>
        <function-ref name="full" scoped="" ref="0xb71687b0"/>
        <function-ref name="maxSize" scoped="" ref="0xb7168c60"/>
        <function-ref name="dequeue" scoped="" ref="0xb715d248"/>
        <function-ref name="empty" scoped="" ref="0xb7168558"/>
        <function-ref name="size" scoped="" ref="0xb7168a08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb7150458" loc="42:MultihopOscilloscopeC.nc">
      <component-ref qname="MultihopOscilloscopeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb7150458"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb714f010"/>
        <function-ref name="fired" scoped="" ref="0xb715b268"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb715b970"/>
        <function-ref name="isOneShot" scoped="" ref="0xb715b718"/>
        <function-ref name="getdt" scoped="" ref="0xb714f4c0"/>
        <function-ref name="gett0" scoped="" ref="0xb714f268"/>
        <function-ref name="isRunning" scoped="" ref="0xb715b4c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb7150b00"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb715bc90"/>
        <function-ref name="startOneShot" scoped="" ref="0xb7150d80"/>
        <function-ref name="stop" scoped="" ref="0xb715b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0xb711b1a0" loc="46:../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb711b1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb711b378"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb711b458"/>
        <function-ref name="led1On" scoped="" ref="0xb711b538"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb711b618"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb711b6f8"/>
        <function-ref name="get" scoped="" ref="0xb711b7d8"/>
        <function-ref name="led1Off" scoped="" ref="0xb711b8b8"/>
        <function-ref name="led2Off" scoped="" ref="0xb711bc38"/>
        <function-ref name="set" scoped="" ref="0xb711b998"/>
        <function-ref name="led0On" scoped="" ref="0xb711ba78"/>
        <function-ref name="led2On" scoped="" ref="0xb711bb58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0xb71175c0" loc="50:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0xb71175c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7117798"/>
        <function-ref name="isInput" scoped="" ref="0xb7117878"/>
        <function-ref name="toggle" scoped="" ref="0xb7117958"/>
        <function-ref name="isOutput" scoped="" ref="0xb7117a38"/>
        <function-ref name="get" scoped="" ref="0xb7117b18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7117bf8"/>
        <function-ref name="set" scoped="" ref="0xb7117cd8"/>
        <function-ref name="clr" scoped="" ref="0xb7117db8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb711a500" loc="46:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb711a500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb711a6d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0xb7116010" loc="51:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0xb7116010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb71161e8"/>
        <function-ref name="isInput" scoped="" ref="0xb71162c8"/>
        <function-ref name="toggle" scoped="" ref="0xb71163a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7116488"/>
        <function-ref name="get" scoped="" ref="0xb7116568"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7116648"/>
        <function-ref name="set" scoped="" ref="0xb7116728"/>
        <function-ref name="clr" scoped="" ref="0xb7116808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0xb711a848" loc="47:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb711a848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb711aa20"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb711ab00"/>
        <function-ref name="led1On" scoped="" ref="0xb711abe0"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb711acc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb711ada0"/>
        <function-ref name="get" scoped="" ref="0xb711ae80"/>
        <function-ref name="led1Off" scoped="" ref="0xb7117010"/>
        <function-ref name="led2Off" scoped="" ref="0xb7117390"/>
        <function-ref name="set" scoped="" ref="0xb71170f0"/>
        <function-ref name="led0On" scoped="" ref="0xb71171d0"/>
        <function-ref name="led2On" scoped="" ref="0xb71172b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0xb71169f8" loc="52:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0xb71169f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7116bd0"/>
        <function-ref name="isInput" scoped="" ref="0xb7116cb0"/>
        <function-ref name="toggle" scoped="" ref="0xb7116d90"/>
        <function-ref name="isOutput" scoped="" ref="0xb7116e70"/>
        <function-ref name="get" scoped="" ref="0xb7115010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb71150f0"/>
        <function-ref name="set" scoped="" ref="0xb71151d0"/>
        <function-ref name="clr" scoped="" ref="0xb71152b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0xb7119d20" loc="44:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0xb7119d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7119ef8"/>
        <function-ref name="isInput" scoped="" ref="0xb7105010"/>
        <function-ref name="toggle" scoped="" ref="0xb71050f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb71051d0"/>
        <function-ref name="get" scoped="" ref="0xb71052b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7105390"/>
        <function-ref name="set" scoped="" ref="0xb7105470"/>
        <function-ref name="clr" scoped="" ref="0xb7105550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0xb7105760" loc="45:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0xb7105760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb7105938"/>
        <function-ref name="isInput" scoped="" ref="0xb7105a18"/>
        <function-ref name="toggle" scoped="" ref="0xb7105af8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7105bd8"/>
        <function-ref name="get" scoped="" ref="0xb7105cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7105d98"/>
        <function-ref name="set" scoped="" ref="0xb7105e78"/>
        <function-ref name="clr" scoped="" ref="0xb7104010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0xb7104ba8" loc="47:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb7104ba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7104d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0xb7104220" loc="46:../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0xb7104220"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb71043f8"/>
        <function-ref name="isInput" scoped="" ref="0xb71044d8"/>
        <function-ref name="toggle" scoped="" ref="0xb71045b8"/>
        <function-ref name="isOutput" scoped="" ref="0xb7104698"/>
        <function-ref name="get" scoped="" ref="0xb7104778"/>
        <function-ref name="makeOutput" scoped="" ref="0xb7104858"/>
        <function-ref name="set" scoped="" ref="0xb7104938"/>
        <function-ref name="clr" scoped="" ref="0xb7104a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb7102b60" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb7102b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb70fb6a8"/>
        <function-ref name="fired" scoped="" ref="0xb7101938"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb70fb068"/>
        <function-ref name="isOneShot" scoped="" ref="0xb7101de8"/>
        <function-ref name="getdt" scoped="" ref="0xb70fbb58"/>
        <function-ref name="gett0" scoped="" ref="0xb70fb900"/>
        <function-ref name="isRunning" scoped="" ref="0xb7101b90"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb71011e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb70fb388"/>
        <function-ref name="startOneShot" scoped="" ref="0xb7101460"/>
        <function-ref name="stop" scoped="" ref="0xb71016e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0xb70fed20" loc="49:../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0xb70fed20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb70f98a8"/>
        <function-ref name="fired" scoped="" ref="0xb70faac8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb70f9268"/>
        <function-ref name="isOneShot" scoped="" ref="0xb70f9010"/>
        <function-ref name="getdt" scoped="" ref="0xb70f9d58"/>
        <function-ref name="gett0" scoped="" ref="0xb70f9b00"/>
        <function-ref name="isRunning" scoped="" ref="0xb70fad20"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb70fa370"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb70f9588"/>
        <function-ref name="startOneShot" scoped="" ref="0xb70fa5f0"/>
        <function-ref name="stop" scoped="" ref="0xb70fa870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0xb70f7dc8" loc="46:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0xb70f7dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb70f38e0"/>
        <function-ref name="fired" scoped="" ref="0xb70f4b60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb70f32a0"/>
        <function-ref name="isOneShot" scoped="" ref="0xb70f3048"/>
        <function-ref name="getdt" scoped="" ref="0xb70f3d90"/>
        <function-ref name="gett0" scoped="" ref="0xb70f3b38"/>
        <function-ref name="isRunning" scoped="" ref="0xb70f4db8"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb70f4408"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb70f35c0"/>
        <function-ref name="startOneShot" scoped="" ref="0xb70f4688"/>
        <function-ref name="stop" scoped="" ref="0xb70f4908"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0xb70f2da8" loc="47:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0xb70f2da8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb70f1400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb70f7618" loc="45:../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb70f7618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb70f77f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0xb70e25c8" loc="29:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0xb70e25c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb70e2d18"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb70e5288"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb70e5010"/>
        <function-ref name="overflow" scoped="" ref="0xb70e5500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb70f0458" loc="27:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb70f0458"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb70f0630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0xb70e8c78" loc="28:../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0xb70e8c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb70e7150"/>
        <function-ref name="fired" scoped="" ref="0xb70eb908"/>
        <function-ref name="startAt" scoped="" ref="0xb70ebdf8"/>
        <function-ref name="isRunning" scoped="" ref="0xb70ebb80"/>
        <function-ref name="getAlarm" scoped="" ref="0xb70e73c8"/>
        <function-ref name="start" scoped="" ref="0xb70eb3f0"/>
        <function-ref name="stop" scoped="" ref="0xb70eb690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0xb7055010" loc="61:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb7055010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb70544e0"/>
        <function-ref name="fired" scoped="" ref="0xb7055c78"/>
        <function-ref name="startAt" scoped="" ref="0xb70541a0"/>
        <function-ref name="isRunning" scoped="" ref="0xb7055ef0"/>
        <function-ref name="getAlarm" scoped="" ref="0xb7054758"/>
        <function-ref name="start" scoped="" ref="0xb7055760"/>
        <function-ref name="stop" scoped="" ref="0xb7055a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb70e0bb8" loc="60:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb70e0bb8"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0xb73765d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0xb73765d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb70e0d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb7054a88" loc="62:../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb7054a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb7053200"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb70536f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb7053478"/>
        <function-ref name="overflow" scoped="" ref="0xb7053968"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0xb617b9d0" loc="66:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb617b9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb617bba8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb617bc88"/>
        <function-ref name="getControlA" scoped="" ref="0xb617bd68"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb617be48"/>
        <function-ref name="setControlB" scoped="" ref="0xb617bf28"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb617a018"/>
        <function-ref name="getControlB" scoped="" ref="0xb617a0f8"/>
        <function-ref name="setControlA" scoped="" ref="0xb617a1d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0xb6181a98" loc="61:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb6181a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb617f010"/>
        <function-ref name="fired" scoped="" ref="0xb6180718"/>
        <function-ref name="startAt" scoped="" ref="0xb6180c08"/>
        <function-ref name="isRunning" scoped="" ref="0xb6180990"/>
        <function-ref name="getAlarm" scoped="" ref="0xb617f288"/>
        <function-ref name="start" scoped="" ref="0xb6180200"/>
        <function-ref name="stop" scoped="" ref="0xb61804a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6181660" loc="60:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6181660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6181838"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb617f5b8" loc="62:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb617f5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb617fd08"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb617e288"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb617e010"/>
        <function-ref name="overflow" scoped="" ref="0xb617e500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0xb6179dc0" loc="68:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0xb6179dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0xb6177010"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0xb61770f0"/>
        <function-ref name="controlABusy" scoped="" ref="0xb61771d0"/>
        <function-ref name="controlBBusy" scoped="" ref="0xb61772b0"/>
        <function-ref name="countBusy" scoped="" ref="0xb6177390"/>
        <function-ref name="compareABusy" scoped="" ref="0xb6177470"/>
        <function-ref name="getAssr" scoped="" ref="0xb6177550"/>
        <function-ref name="setAssr" scoped="" ref="0xb6177630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0xb617a3c8" loc="67:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0xb617a3c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb6179918"/>
        <function-ref name="fired" scoped="" ref="0xb617af28"/>
        <function-ref name="get" scoped="" ref="0xb617aa10"/>
        <function-ref name="reset" scoped="" ref="0xb61791b0"/>
        <function-ref name="isOn" scoped="" ref="0xb6179b90"/>
        <function-ref name="set" scoped="" ref="0xb617ac88"/>
        <function-ref name="start" scoped="" ref="0xb6179428"/>
        <function-ref name="stop" scoped="" ref="0xb61796a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb617e7f0" loc="65:../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb617e7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb617b288"/>
        <function-ref name="test" scoped="" ref="0xb617cd58"/>
        <function-ref name="get" scoped="" ref="0xb617ee38"/>
        <function-ref name="setScale" scoped="" ref="0xb617b500"/>
        <function-ref name="getScale" scoped="" ref="0xb617b7a0"/>
        <function-ref name="reset" scoped="" ref="0xb617c5f0"/>
        <function-ref name="overflow" scoped="" ref="0xb617c378"/>
        <function-ref name="isOn" scoped="" ref="0xb617b010"/>
        <function-ref name="set" scoped="" ref="0xb617c0d8"/>
        <function-ref name="start" scoped="" ref="0xb617c868"/>
        <function-ref name="stop" scoped="" ref="0xb617cae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0xb70931a0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb70931a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb7093378"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb7093458"/>
        <function-ref name="getControlA" scoped="" ref="0xb7093538"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb7093618"/>
        <function-ref name="setControlB" scoped="" ref="0xb70936f8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb70937d8"/>
        <function-ref name="getControlB" scoped="" ref="0xb70938b8"/>
        <function-ref name="setControlA" scoped="" ref="0xb7093998"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0xb7091858" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0xb7091858"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0xb7091a30"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0xb7091b10"/>
        <function-ref name="controlABusy" scoped="" ref="0xb7091bf0"/>
        <function-ref name="controlBBusy" scoped="" ref="0xb7091cd0"/>
        <function-ref name="countBusy" scoped="" ref="0xb7091db0"/>
        <function-ref name="compareABusy" scoped="" ref="0xb7091e90"/>
        <function-ref name="getAssr" scoped="" ref="0xb7090010"/>
        <function-ref name="setAssr" scoped="" ref="0xb70900f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0xb7093cc0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0xb7093cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb7091288"/>
        <function-ref name="fired" scoped="" ref="0xb7092830"/>
        <function-ref name="get" scoped="" ref="0xb7092318"/>
        <function-ref name="reset" scoped="" ref="0xb7092aa8"/>
        <function-ref name="isOn" scoped="" ref="0xb7091500"/>
        <function-ref name="set" scoped="" ref="0xb7092590"/>
        <function-ref name="start" scoped="" ref="0xb7092d20"/>
        <function-ref name="stop" scoped="" ref="0xb7091010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb7099e68" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb7099e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb70948d8"/>
        <function-ref name="test" scoped="" ref="0xb70943e8"/>
        <function-ref name="get" scoped="" ref="0xb70964d8"/>
        <function-ref name="setScale" scoped="" ref="0xb7094b50"/>
        <function-ref name="getScale" scoped="" ref="0xb7094df0"/>
        <function-ref name="reset" scoped="" ref="0xb7096c68"/>
        <function-ref name="overflow" scoped="" ref="0xb70969f0"/>
        <function-ref name="isOn" scoped="" ref="0xb7094660"/>
        <function-ref name="set" scoped="" ref="0xb7096750"/>
        <function-ref name="start" scoped="" ref="0xb7096ee0"/>
        <function-ref name="stop" scoped="" ref="0xb7094170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0xb708a1a0" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb708a1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb708a378"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb708a458"/>
        <function-ref name="getControlA" scoped="" ref="0xb708a538"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb708a618"/>
        <function-ref name="setControlB" scoped="" ref="0xb708a6f8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb708a7d8"/>
        <function-ref name="getControlB" scoped="" ref="0xb708a8b8"/>
        <function-ref name="setControlA" scoped="" ref="0xb708a998"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0xb70877b8" loc="85:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0xb70877b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0xb7087990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0xb7087c18" loc="86:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0xb7087c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0xb7087df0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0xb7087ed0"/>
        <function-ref name="controlABusy" scoped="" ref="0xb7086010"/>
        <function-ref name="controlBBusy" scoped="" ref="0xb70860f0"/>
        <function-ref name="countBusy" scoped="" ref="0xb70861d0"/>
        <function-ref name="compareABusy" scoped="" ref="0xb70862b0"/>
        <function-ref name="getAssr" scoped="" ref="0xb7086390"/>
        <function-ref name="setAssr" scoped="" ref="0xb7086470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0xb708acc0" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0xb708acc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb7087288"/>
        <function-ref name="fired" scoped="" ref="0xb7089830"/>
        <function-ref name="get" scoped="" ref="0xb7089318"/>
        <function-ref name="reset" scoped="" ref="0xb7089aa8"/>
        <function-ref name="isOn" scoped="" ref="0xb7087500"/>
        <function-ref name="set" scoped="" ref="0xb7089590"/>
        <function-ref name="start" scoped="" ref="0xb7089d20"/>
        <function-ref name="stop" scoped="" ref="0xb7087010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb7090dd0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb7090dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb708b878"/>
        <function-ref name="test" scoped="" ref="0xb708b388"/>
        <function-ref name="get" scoped="" ref="0xb708c468"/>
        <function-ref name="setScale" scoped="" ref="0xb708baf0"/>
        <function-ref name="getScale" scoped="" ref="0xb708bd90"/>
        <function-ref name="reset" scoped="" ref="0xb708cbf8"/>
        <function-ref name="overflow" scoped="" ref="0xb708c980"/>
        <function-ref name="isOn" scoped="" ref="0xb708b600"/>
        <function-ref name="set" scoped="" ref="0xb708c6e0"/>
        <function-ref name="start" scoped="" ref="0xb708ce70"/>
        <function-ref name="stop" scoped="" ref="0xb708b110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0xb7038bd0" loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0xb7038bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb7038da8"/>
        <function-ref name="runTask" scoped="" ref="0xb7038e88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0xb703a248" loc="49:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb703a248"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb7038708"/>
        <function-ref name="fired" scoped="" ref="0xb703aeb0"/>
        <function-ref name="startAt" scoped="" ref="0xb70383c8"/>
        <function-ref name="isRunning" scoped="" ref="0xb7038150"/>
        <function-ref name="getAlarm" scoped="" ref="0xb7038980"/>
        <function-ref name="start" scoped="" ref="0xb703a998"/>
        <function-ref name="stop" scoped="" ref="0xb703ac38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb70edf08" loc="48:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb70edf08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb703ba18"/>
        <function-ref name="fired" scoped="" ref="0xb703ccb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb703b3d8"/>
        <function-ref name="isOneShot" scoped="" ref="0xb703b180"/>
        <function-ref name="getdt" scoped="" ref="0xb703bec8"/>
        <function-ref name="gett0" scoped="" ref="0xb703bc70"/>
        <function-ref name="isRunning" scoped="" ref="0xb703cf08"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb703c558"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb703b6f8"/>
        <function-ref name="startOneShot" scoped="" ref="0xb703c7d8"/>
        <function-ref name="stop" scoped="" ref="0xb703ca58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0xb700b560" loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0xb700b560"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb700b738"/>
        <function-ref name="runTask" scoped="" ref="0xb700b818"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0xb700e338" loc="49:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0xb700e338"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb700ce38"/>
        <function-ref name="fired" scoped="" ref="0xb700c0f0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb700c7f8"/>
        <function-ref name="isOneShot" scoped="" ref="0xb700c5a0"/>
        <function-ref name="getdt" scoped="" ref="0xb700b310"/>
        <function-ref name="gett0" scoped="" ref="0xb700b0b8"/>
        <function-ref name="isRunning" scoped="" ref="0xb700c348"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb700e960"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb700cb18"/>
        <function-ref name="startOneShot" scoped="" ref="0xb700ebe0"/>
        <function-ref name="stop" scoped="" ref="0xb700ee60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb7036f00" loc="48:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb7036f00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb700fb40"/>
        <function-ref name="fired" scoped="" ref="0xb7035ce0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb700f4e0"/>
        <function-ref name="isOneShot" scoped="" ref="0xb700f278"/>
        <function-ref name="getdt" scoped="" ref="0xb700e048"/>
        <function-ref name="gett0" scoped="" ref="0xb700fda8"/>
        <function-ref name="isRunning" scoped="" ref="0xb700f010"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb7035558"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb700f810"/>
        <function-ref name="startOneShot" scoped="" ref="0xb70357e8"/>
        <function-ref name="stop" scoped="" ref="0xb7035a78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0xb7009940" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0xb7009940"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb7008010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0xb7008360" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb7008360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb7008ab0"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb7002010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb7008d28"/>
        <function-ref name="overflow" scoped="" ref="0xb7002288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6ffe0f0" loc="20:../../tos/sensorboards/mts300/AccelXC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.Sensor"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6ffe0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6ffe718"/>
        <function-ref name="readDone" scoped="" ref="0xb6ffe970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadX" ref="0xb6ffb920" loc="5:../../tos/sensorboards/mts300/AccelReadP.nc">
      <component-ref qname="AccelReadP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadX" scoped="" ref="0xb6ffb920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6ff8010"/>
        <function-ref name="readDone" scoped="" ref="0xb6ff8268"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActualY" ref="0xb6ff5a20" loc="11:../../tos/sensorboards/mts300/AccelReadP.nc">
      <component-ref qname="AccelReadP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActualY" scoped="" ref="0xb6ff5a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6ff4068"/>
        <function-ref name="readDone" scoped="" ref="0xb6ff42c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadY" ref="0xb6ff89b8" loc="6:../../tos/sensorboards/mts300/AccelReadP.nc">
      <component-ref qname="AccelReadP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadY" scoped="" ref="0xb6ff89b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6ff7010"/>
        <function-ref name="readDone" scoped="" ref="0xb6ff7268"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActualX" ref="0xb6ff7a18" loc="10:../../tos/sensorboards/mts300/AccelReadP.nc">
      <component-ref qname="AccelReadP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActualX" scoped="" ref="0xb6ff7a18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6ff5068"/>
        <function-ref name="readDone" scoped="" ref="0xb6ff52c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigY" ref="0xb6fed010" loc="21:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <component-ref qname="AccelConfigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigY" scoped="" ref="0xb6fed010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb6fed1e8"/>
        <function-ref name="getChannel" scoped="" ref="0xb6fed2c8"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb6fed3a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigX" ref="0xb6feb988" loc="20:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <component-ref qname="AccelConfigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigX" scoped="" ref="0xb6feb988"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb6febb60"/>
        <function-ref name="getChannel" scoped="" ref="0xb6febc40"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb6febd20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6feeec8" loc="19:../../tos/sensorboards/mts300/AccelConfigP.nc">
      <component-ref qname="AccelConfigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6feeec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6ff00c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6ff01a0"/>
        <function-ref name="request" scoped="" ref="0xb6ff0280"/>
        <function-ref name="granted" scoped="" ref="0xb6ff0360"/>
        <function-ref name="isOwner" scoped="" ref="0xb6ff0440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6feda70" loc="17:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6feda70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6fedc48"/>
        <function-ref name="stopDone" scoped="" ref="0xb6fedd28"/>
        <function-ref name="start" scoped="" ref="0xb6fede08"/>
        <function-ref name="stop" scoped="" ref="0xb6fedee8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigY" ref="0xb6fe9738" loc="19:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigY" scoped="" ref="0xb6fe9738"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb6fe9910"/>
        <function-ref name="getChannel" scoped="" ref="0xb6fe99f0"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb6fe9ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AccelAdcY" ref="0xb6fe26b0" loc="25:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AccelAdcY" scoped="" ref="0xb6fe26b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fe2888"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AccelAdcX" ref="0xb6fe22b0" loc="24:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AccelAdcX" scoped="" ref="0xb6fe22b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fe2488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigX" ref="0xb6fe9160" loc="18:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigX" scoped="" ref="0xb6fe9160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb6fe9338"/>
        <function-ref name="getChannel" scoped="" ref="0xb6fe9418"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb6fe94f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDone" ref="0xb6fdd6c8" loc="67:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDone" scoped="" ref="0xb6fdd6c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6fdd8a0"/>
        <function-ref name="runTask" scoped="" ref="0xb6fdd980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AccelPin" ref="0xb6fe5088" loc="23:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AccelPin" scoped="" ref="0xb6fe5088"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fe5260"/>
        <function-ref name="isInput" scoped="" ref="0xb6fe5340"/>
        <function-ref name="toggle" scoped="" ref="0xb6fe5420"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fe5500"/>
        <function-ref name="get" scoped="" ref="0xb6fe55e0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fe56c0"/>
        <function-ref name="set" scoped="" ref="0xb6fe57a0"/>
        <function-ref name="clr" scoped="" ref="0xb6fe5880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb6fe9d58" loc="22:../../tos/sensorboards/mts300/AccelP.nc">
      <component-ref qname="AccelP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb6fe9d58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6fe78a8"/>
        <function-ref name="fired" scoped="" ref="0xb6fe8b18"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb6fe7268"/>
        <function-ref name="isOneShot" scoped="" ref="0xb6fe7010"/>
        <function-ref name="getdt" scoped="" ref="0xb6fe7d58"/>
        <function-ref name="gett0" scoped="" ref="0xb6fe7b00"/>
        <function-ref name="isRunning" scoped="" ref="0xb6fe8d70"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb6fe83c0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb6fe7588"/>
        <function-ref name="startOneShot" scoped="" ref="0xb6fe8640"/>
        <function-ref name="stop" scoped="" ref="0xb6fe88c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int1_Interrupt" ref="0xb6fd0198" loc="36:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int1_Interrupt" scoped="" ref="0xb6fd0198"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fd0370"/>
        <function-ref name="disable" scoped="" ref="0xb6fd0450"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb6fd0530"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb6fd0610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc0" ref="0xb6fcb598" loc="45:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc0" scoped="" ref="0xb6fcb598"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fcb770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW3" ref="0xb6fd7810" loc="23:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW3" scoped="" ref="0xb6fd7810"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fd79e8"/>
        <function-ref name="isInput" scoped="" ref="0xb6fd7ac8"/>
        <function-ref name="toggle" scoped="" ref="0xb6fd7ba8"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fd7c88"/>
        <function-ref name="get" scoped="" ref="0xb6fd7d68"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fd7e48"/>
        <function-ref name="set" scoped="" ref="0xb6fd7f28"/>
        <function-ref name="clr" scoped="" ref="0xb6fd6018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW6" ref="0xb6fd5650" loc="26:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW6" scoped="" ref="0xb6fd5650"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fd5828"/>
        <function-ref name="isInput" scoped="" ref="0xb6fd5908"/>
        <function-ref name="toggle" scoped="" ref="0xb6fd59e8"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fd5ac8"/>
        <function-ref name="get" scoped="" ref="0xb6fd5ba8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fd5c88"/>
        <function-ref name="set" scoped="" ref="0xb6fd5d68"/>
        <function-ref name="clr" scoped="" ref="0xb6fd5e48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc3" ref="0xb6fca128" loc="48:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc3" scoped="" ref="0xb6fca128"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fca300"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc5" ref="0xb6fca8c8" loc="50:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc5" scoped="" ref="0xb6fca8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fcaba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int1" ref="0xb6fd34a0" loc="30:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int1" scoped="" ref="0xb6fd34a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fd3678"/>
        <function-ref name="isInput" scoped="" ref="0xb6fd3758"/>
        <function-ref name="toggle" scoped="" ref="0xb6fd3838"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fd3918"/>
        <function-ref name="get" scoped="" ref="0xb6fd39f8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fd3ad8"/>
        <function-ref name="set" scoped="" ref="0xb6fd3bb8"/>
        <function-ref name="clr" scoped="" ref="0xb6fd3c98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="USART1_TXD" ref="0xb6fccb08" loc="42:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="USART1_TXD" scoped="" ref="0xb6fccb08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fccce0"/>
        <function-ref name="isInput" scoped="" ref="0xb6fccdc0"/>
        <function-ref name="toggle" scoped="" ref="0xb6fccea0"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fcb010"/>
        <function-ref name="get" scoped="" ref="0xb6fcb0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fcb1d0"/>
        <function-ref name="set" scoped="" ref="0xb6fcb2b0"/>
        <function-ref name="clr" scoped="" ref="0xb6fcb390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW1" ref="0xb6fd83b0" loc="21:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW1" scoped="" ref="0xb6fd83b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fd8588"/>
        <function-ref name="isInput" scoped="" ref="0xb6fd8668"/>
        <function-ref name="toggle" scoped="" ref="0xb6fd8748"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fd8828"/>
        <function-ref name="get" scoped="" ref="0xb6fd8908"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fd89e8"/>
        <function-ref name="set" scoped="" ref="0xb6fd8ac8"/>
        <function-ref name="clr" scoped="" ref="0xb6fd8ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW4" ref="0xb6fd61f8" loc="24:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW4" scoped="" ref="0xb6fd61f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fd63d0"/>
        <function-ref name="isInput" scoped="" ref="0xb6fd64b0"/>
        <function-ref name="toggle" scoped="" ref="0xb6fd6590"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fd6670"/>
        <function-ref name="get" scoped="" ref="0xb6fd6750"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fd6830"/>
        <function-ref name="set" scoped="" ref="0xb6fd6910"/>
        <function-ref name="clr" scoped="" ref="0xb6fd69f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int3_Interrupt" ref="0xb6fcf010" loc="38:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int3_Interrupt" scoped="" ref="0xb6fcf010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fcf1e8"/>
        <function-ref name="disable" scoped="" ref="0xb6fcf2c8"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb6fcf3a8"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb6fcf488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc1" ref="0xb6fcb968" loc="46:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc1" scoped="" ref="0xb6fcb968"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fcbb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="USART1_RXD" ref="0xb6fcc0e8" loc="41:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="USART1_RXD" scoped="" ref="0xb6fcc0e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fcc2c0"/>
        <function-ref name="isInput" scoped="" ref="0xb6fcc3a0"/>
        <function-ref name="toggle" scoped="" ref="0xb6fcc480"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fcc560"/>
        <function-ref name="get" scoped="" ref="0xb6fcc640"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fcc720"/>
        <function-ref name="set" scoped="" ref="0xb6fcc800"/>
        <function-ref name="clr" scoped="" ref="0xb6fcc8e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW7" ref="0xb6fd4050" loc="27:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW7" scoped="" ref="0xb6fd4050"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fd4228"/>
        <function-ref name="isInput" scoped="" ref="0xb6fd4308"/>
        <function-ref name="toggle" scoped="" ref="0xb6fd43e8"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fd44c8"/>
        <function-ref name="get" scoped="" ref="0xb6fd45a8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fd4688"/>
        <function-ref name="set" scoped="" ref="0xb6fd4768"/>
        <function-ref name="clr" scoped="" ref="0xb6fd4848"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int0_Interrupt" ref="0xb6fce9d8" loc="35:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int0_Interrupt" scoped="" ref="0xb6fce9d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fcec30"/>
        <function-ref name="disable" scoped="" ref="0xb6fced10"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb6fcedf0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb6fceed0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc6" ref="0xb6fcad98" loc="51:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc6" scoped="" ref="0xb6fcad98"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fc9010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int2" ref="0xb6fd3e88" loc="31:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int2" scoped="" ref="0xb6fd3e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fd2070"/>
        <function-ref name="isInput" scoped="" ref="0xb6fd2150"/>
        <function-ref name="toggle" scoped="" ref="0xb6fd2230"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fd2310"/>
        <function-ref name="get" scoped="" ref="0xb6fd23f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fd24d0"/>
        <function-ref name="set" scoped="" ref="0xb6fd25b0"/>
        <function-ref name="clr" scoped="" ref="0xb6fd2690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW2" ref="0xb6fd8d88" loc="22:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW2" scoped="" ref="0xb6fd8d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fd7010"/>
        <function-ref name="isInput" scoped="" ref="0xb6fd70f0"/>
        <function-ref name="toggle" scoped="" ref="0xb6fd71d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fd72b0"/>
        <function-ref name="get" scoped="" ref="0xb6fd7390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fd7470"/>
        <function-ref name="set" scoped="" ref="0xb6fd7550"/>
        <function-ref name="clr" scoped="" ref="0xb6fd7630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW5" ref="0xb6fd6bd0" loc="25:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW5" scoped="" ref="0xb6fd6bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fd6da8"/>
        <function-ref name="isInput" scoped="" ref="0xb6fd6e88"/>
        <function-ref name="toggle" scoped="" ref="0xb6fd5010"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fd50f0"/>
        <function-ref name="get" scoped="" ref="0xb6fd51d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fd52b0"/>
        <function-ref name="set" scoped="" ref="0xb6fd5390"/>
        <function-ref name="clr" scoped="" ref="0xb6fd5470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc2" ref="0xb6fcbd38" loc="47:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc2" scoped="" ref="0xb6fcbd38"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fcbf10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc4" ref="0xb6fca4f8" loc="49:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc4" scoped="" ref="0xb6fca4f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fca6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int0" ref="0xb6fd4a38" loc="29:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int0" scoped="" ref="0xb6fd4a38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fd4c10"/>
        <function-ref name="isInput" scoped="" ref="0xb6fd4cf0"/>
        <function-ref name="toggle" scoped="" ref="0xb6fd4dd0"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fd4eb0"/>
        <function-ref name="get" scoped="" ref="0xb6fd3010"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fd30f0"/>
        <function-ref name="set" scoped="" ref="0xb6fd31d0"/>
        <function-ref name="clr" scoped="" ref="0xb6fd32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int2_Interrupt" ref="0xb6fd0888" loc="37:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int2_Interrupt" scoped="" ref="0xb6fd0888"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fd0a60"/>
        <function-ref name="disable" scoped="" ref="0xb6fd0b40"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb6fd0c20"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb6fd0d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="USART1_CLK" ref="0xb6fcf6b0" loc="40:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="USART1_CLK" scoped="" ref="0xb6fcf6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fcf888"/>
        <function-ref name="isInput" scoped="" ref="0xb6fcf968"/>
        <function-ref name="toggle" scoped="" ref="0xb6fcfa48"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fcfb28"/>
        <function-ref name="get" scoped="" ref="0xb6fcfc08"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fcfce8"/>
        <function-ref name="set" scoped="" ref="0xb6fcfdc8"/>
        <function-ref name="clr" scoped="" ref="0xb6fcfea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc7" ref="0xb6fc9208" loc="52:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc7" scoped="" ref="0xb6fc9208"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fc93e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PW0" ref="0xb6fea958" loc="20:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PW0" scoped="" ref="0xb6fea958"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6feab30"/>
        <function-ref name="isInput" scoped="" ref="0xb6feac10"/>
        <function-ref name="toggle" scoped="" ref="0xb6feacf0"/>
        <function-ref name="isOutput" scoped="" ref="0xb6feadd0"/>
        <function-ref name="get" scoped="" ref="0xb6feaeb0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fd8010"/>
        <function-ref name="set" scoped="" ref="0xb6fd80f0"/>
        <function-ref name="clr" scoped="" ref="0xb6fd81d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int3" ref="0xb6fd2880" loc="32:../../tos/platforms/mica/MicaBusC.nc">
      <component-ref qname="MicaBusC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int3" scoped="" ref="0xb6fd2880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6fd2a58"/>
        <function-ref name="isInput" scoped="" ref="0xb6fd2b38"/>
        <function-ref name="toggle" scoped="" ref="0xb6fd2c18"/>
        <function-ref name="isOutput" scoped="" ref="0xb6fd2cf8"/>
        <function-ref name="get" scoped="" ref="0xb6fd2dd8"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6fd2eb8"/>
        <function-ref name="set" scoped="" ref="0xb6fd1010"/>
        <function-ref name="clr" scoped="" ref="0xb6fd10f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc0" ref="0xb6fc9d28" loc="18:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc0" scoped="" ref="0xb6fc9d28"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fc9f00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc3" ref="0xb6fc68b8" loc="21:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc3" scoped="" ref="0xb6fc68b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fc6a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc5" ref="0xb6fc5090" loc="23:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc5" scoped="" ref="0xb6fc5090"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fc5268"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc1" ref="0xb6fc6118" loc="19:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc1" scoped="" ref="0xb6fc6118"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fc62f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc6" ref="0xb6fc5460" loc="24:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc6" scoped="" ref="0xb6fc5460"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fc5638"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc2" ref="0xb6fc64e8" loc="20:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc2" scoped="" ref="0xb6fc64e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fc66c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc4" ref="0xb6fc6c88" loc="22:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc4" scoped="" ref="0xb6fc6c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fc6e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Adc7" ref="0xb6fc5830" loc="25:../../tos/platforms/mica/MicaBusP.nc">
      <component-ref qname="MicaBusP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Adc7" scoped="" ref="0xb6fc5830"/></type-interface>
      <instance>
        <interfacedef-ref qname="MicaBusAdc"/>
      </instance>
      <interface-functions>
        <function-ref name="getChannel" scoped="" ref="0xb6fc5a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int6" ref="0xb6fb76b8" loc="51:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int6" scoped="" ref="0xb6fb76b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fb7890"/>
        <function-ref name="fired" scoped="" ref="0xb6fb7970"/>
        <function-ref name="disable" scoped="" ref="0xb6fb7a50"/>
        <function-ref name="edge" scoped="" ref="0xb6fb7b30"/>
        <function-ref name="enable" scoped="" ref="0xb6fb7c10"/>
        <function-ref name="getValue" scoped="" ref="0xb6fb7cf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int1" ref="0xb6fb9a88" loc="46:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int1" scoped="" ref="0xb6fb9a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fb9c60"/>
        <function-ref name="fired" scoped="" ref="0xb6fb9d40"/>
        <function-ref name="disable" scoped="" ref="0xb6fb9e20"/>
        <function-ref name="edge" scoped="" ref="0xb6fb9f00"/>
        <function-ref name="enable" scoped="" ref="0xb6fbc010"/>
        <function-ref name="getValue" scoped="" ref="0xb6fbc0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int4" ref="0xb6fbb4f8" loc="49:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int4" scoped="" ref="0xb6fbb4f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fbb6d0"/>
        <function-ref name="fired" scoped="" ref="0xb6fbb7b0"/>
        <function-ref name="disable" scoped="" ref="0xb6fbb890"/>
        <function-ref name="edge" scoped="" ref="0xb6fbb970"/>
        <function-ref name="enable" scoped="" ref="0xb6fbba50"/>
        <function-ref name="getValue" scoped="" ref="0xb6fbbb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int7" ref="0xb6fb6010" loc="52:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int7" scoped="" ref="0xb6fb6010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fb61e8"/>
        <function-ref name="fired" scoped="" ref="0xb6fb62c8"/>
        <function-ref name="disable" scoped="" ref="0xb6fb63a8"/>
        <function-ref name="edge" scoped="" ref="0xb6fb6488"/>
        <function-ref name="enable" scoped="" ref="0xb6fb6568"/>
        <function-ref name="getValue" scoped="" ref="0xb6fb6648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int2" ref="0xb6fbc338" loc="47:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int2" scoped="" ref="0xb6fbc338"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fbc510"/>
        <function-ref name="fired" scoped="" ref="0xb6fbc5f0"/>
        <function-ref name="disable" scoped="" ref="0xb6fbc6d0"/>
        <function-ref name="edge" scoped="" ref="0xb6fbc7b0"/>
        <function-ref name="enable" scoped="" ref="0xb6fbc890"/>
        <function-ref name="getValue" scoped="" ref="0xb6fbc970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int5" ref="0xb6fbbd78" loc="50:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int5" scoped="" ref="0xb6fbbd78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fb7010"/>
        <function-ref name="fired" scoped="" ref="0xb6fb70f0"/>
        <function-ref name="disable" scoped="" ref="0xb6fb71d0"/>
        <function-ref name="edge" scoped="" ref="0xb6fb72b0"/>
        <function-ref name="enable" scoped="" ref="0xb6fb7390"/>
        <function-ref name="getValue" scoped="" ref="0xb6fb7470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int0" ref="0xb6fb9208" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int0" scoped="" ref="0xb6fb9208"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fb93e0"/>
        <function-ref name="fired" scoped="" ref="0xb6fb94c0"/>
        <function-ref name="disable" scoped="" ref="0xb6fb95a0"/>
        <function-ref name="edge" scoped="" ref="0xb6fb9680"/>
        <function-ref name="enable" scoped="" ref="0xb6fb9760"/>
        <function-ref name="getValue" scoped="" ref="0xb6fb9840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int3" ref="0xb6fbcbb8" loc="48:../../tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int3" scoped="" ref="0xb6fbcbb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fbcd90"/>
        <function-ref name="fired" scoped="" ref="0xb6fbce70"/>
        <function-ref name="disable" scoped="" ref="0xb6fbb010"/>
        <function-ref name="edge" scoped="" ref="0xb6fbb0f0"/>
        <function-ref name="enable" scoped="" ref="0xb6fbb1d0"/>
        <function-ref name="getValue" scoped="" ref="0xb6fbb2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig6" ref="0xb6fb0728" loc="49:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig6" scoped="" ref="0xb6fb0728"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fb0900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig1" ref="0xb6fb2010" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig1" scoped="" ref="0xb6fb2010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fb21e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig4" ref="0xb6fb2d78" loc="47:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig4" scoped="" ref="0xb6fb2d78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fb0010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig7" ref="0xb6fb0ba0" loc="50:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig7" scoped="" ref="0xb6fb0ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fb0d78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig2" ref="0xb6fb2488" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig2" scoped="" ref="0xb6fb2488"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fb2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig5" ref="0xb6fb02b0" loc="48:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig5" scoped="" ref="0xb6fb02b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fb0488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig0" ref="0xb6fb3b00" loc="43:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig0" scoped="" ref="0xb6fb3b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fb3cd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig3" ref="0xb6fb2900" loc="46:../../tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig3" scoped="" ref="0xb6fb2900"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6fb2ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6fb4cf0" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6fb4cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6fb4ec8"/>
        <function-ref name="fired" scoped="" ref="0xb6f95010"/>
        <function-ref name="disable" scoped="" ref="0xb6f950f0"/>
        <function-ref name="edge" scoped="" ref="0xb6f951d0"/>
        <function-ref name="enable" scoped="" ref="0xb6f952b0"/>
        <function-ref name="getValue" scoped="" ref="0xb6f95390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6f95510" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6f95510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6f956e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6f94e68" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6f94e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6f93050"/>
        <function-ref name="fired" scoped="" ref="0xb6f93130"/>
        <function-ref name="disable" scoped="" ref="0xb6f93210"/>
        <function-ref name="edge" scoped="" ref="0xb6f932f0"/>
        <function-ref name="enable" scoped="" ref="0xb6f933d0"/>
        <function-ref name="getValue" scoped="" ref="0xb6f934b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6f93630" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6f93630"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6f93808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6f91010" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6f91010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6f911e8"/>
        <function-ref name="fired" scoped="" ref="0xb6f912c8"/>
        <function-ref name="disable" scoped="" ref="0xb6f913a8"/>
        <function-ref name="edge" scoped="" ref="0xb6f91488"/>
        <function-ref name="enable" scoped="" ref="0xb6f91568"/>
        <function-ref name="getValue" scoped="" ref="0xb6f91648"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6f917c8" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6f917c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6f919a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6f8f228" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6f8f228"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6f8f400"/>
        <function-ref name="fired" scoped="" ref="0xb6f8f4e0"/>
        <function-ref name="disable" scoped="" ref="0xb6f8f5c0"/>
        <function-ref name="edge" scoped="" ref="0xb6f8f6a0"/>
        <function-ref name="enable" scoped="" ref="0xb6f8f780"/>
        <function-ref name="getValue" scoped="" ref="0xb6f8f860"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6f8f9e0" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6f8f9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6f8fbb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6f8d3b0" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6f8d3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6f8d588"/>
        <function-ref name="fired" scoped="" ref="0xb6f8d668"/>
        <function-ref name="disable" scoped="" ref="0xb6f8d748"/>
        <function-ref name="edge" scoped="" ref="0xb6f8d828"/>
        <function-ref name="enable" scoped="" ref="0xb6f8d908"/>
        <function-ref name="getValue" scoped="" ref="0xb6f8d9e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6f8db68" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6f8db68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6f8dd40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6f8a538" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6f8a538"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6f8a710"/>
        <function-ref name="fired" scoped="" ref="0xb6f8a7f0"/>
        <function-ref name="disable" scoped="" ref="0xb6f8a8d0"/>
        <function-ref name="edge" scoped="" ref="0xb6f8a9b0"/>
        <function-ref name="enable" scoped="" ref="0xb6f8aa90"/>
        <function-ref name="getValue" scoped="" ref="0xb6f8ab70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6f8acf0" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6f8acf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6f8aec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6f886c0" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6f886c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6f88898"/>
        <function-ref name="fired" scoped="" ref="0xb6f88978"/>
        <function-ref name="disable" scoped="" ref="0xb6f88a58"/>
        <function-ref name="edge" scoped="" ref="0xb6f88b38"/>
        <function-ref name="enable" scoped="" ref="0xb6f88c18"/>
        <function-ref name="getValue" scoped="" ref="0xb6f88cf8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6f88e78" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6f88e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6f87070"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0xb6f867a8" loc="44:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0xb6f867a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6f86980"/>
        <function-ref name="fired" scoped="" ref="0xb6f86a60"/>
        <function-ref name="disable" scoped="" ref="0xb6f86b40"/>
        <function-ref name="edge" scoped="" ref="0xb6f86c20"/>
        <function-ref name="enable" scoped="" ref="0xb6f86d00"/>
        <function-ref name="getValue" scoped="" ref="0xb6f86de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0xb6f85010" loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0xb6f85010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6f851e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Interrupt" ref="0xb6f7fb58" loc="9:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6f7fb58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6f7fd30"/>
        <function-ref name="fired" scoped="" ref="0xb6f7fe10"/>
        <function-ref name="disable" scoped="" ref="0xb6f7fef0"/>
        <function-ref name="edge" scoped="" ref="0xb6f7e010"/>
        <function-ref name="enable" scoped="" ref="0xb6f7e0f0"/>
        <function-ref name="getValue" scoped="" ref="0xb6f7e1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0xb6f7f560" loc="8:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Interrupt" scoped="" ref="0xb6f7f560"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6f7f738"/>
        <function-ref name="disable" scoped="" ref="0xb6f7f818"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb6f7f8f8"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb6f7f9d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Interrupt" ref="0xb6f75c30" loc="9:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6f75c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6f75e08"/>
        <function-ref name="fired" scoped="" ref="0xb6f75ee8"/>
        <function-ref name="disable" scoped="" ref="0xb6f74010"/>
        <function-ref name="edge" scoped="" ref="0xb6f740f0"/>
        <function-ref name="enable" scoped="" ref="0xb6f741d0"/>
        <function-ref name="getValue" scoped="" ref="0xb6f742b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0xb6f75638" loc="8:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Interrupt" scoped="" ref="0xb6f75638"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6f75810"/>
        <function-ref name="disable" scoped="" ref="0xb6f758f0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb6f759d0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb6f75ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Interrupt" ref="0xb6f73d50" loc="9:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt2C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6f73d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6f73f28"/>
        <function-ref name="fired" scoped="" ref="0xb6f72018"/>
        <function-ref name="disable" scoped="" ref="0xb6f720f8"/>
        <function-ref name="edge" scoped="" ref="0xb6f721d8"/>
        <function-ref name="enable" scoped="" ref="0xb6f722b8"/>
        <function-ref name="getValue" scoped="" ref="0xb6f72398"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0xb6f73758" loc="8:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt2C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Interrupt" scoped="" ref="0xb6f73758"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6f73930"/>
        <function-ref name="disable" scoped="" ref="0xb6f73a10"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb6f73af0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb6f73bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Interrupt" ref="0xb6f71e00" loc="9:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Interrupt" scoped="" ref="0xb6f71e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6f70010"/>
        <function-ref name="fired" scoped="" ref="0xb6f700f0"/>
        <function-ref name="disable" scoped="" ref="0xb6f701d0"/>
        <function-ref name="edge" scoped="" ref="0xb6f702b0"/>
        <function-ref name="enable" scoped="" ref="0xb6f70390"/>
        <function-ref name="getValue" scoped="" ref="0xb6f70470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0xb6f71808" loc="8:../../tos/chips/atm128/pins/Atm128GpioInterruptC.nc">
      <component-ref qname="MicaBusC.Atm128GpioInterrupt3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Interrupt" scoped="" ref="0xb6f71808"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6f719e0"/>
        <function-ref name="disable" scoped="" ref="0xb6f71ac0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0xb6f71ba0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0xb6f71c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb6f687e8" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="AccelConfigP.WarmupTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb6f687e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6f65330"/>
        <function-ref name="fired" scoped="" ref="0xb6f67590"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb6f67c98"/>
        <function-ref name="isOneShot" scoped="" ref="0xb6f67a40"/>
        <function-ref name="getdt" scoped="" ref="0xb6f657e0"/>
        <function-ref name="gett0" scoped="" ref="0xb6f65588"/>
        <function-ref name="isRunning" scoped="" ref="0xb6f677e8"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb6f68e10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb6f65010"/>
        <function-ref name="startOneShot" scoped="" ref="0xb6f670b8"/>
        <function-ref name="stop" scoped="" ref="0xb6f67338"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb6f1cc28" loc="92:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="AccelConfigP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb6f1cc28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb6f1ce10"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6f1cef0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb6f1bbb8" loc="96:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="AccelConfigP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb6f1bbb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb6f1bda0"/>
        <function-ref name="configure" scoped="" ref="0xb6f1be80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0xb6f1b070" loc="93:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="AccelConfigP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6f1b070"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6f1b248"/>
        <function-ref name="requested" scoped="" ref="0xb6f1b328"/>
        <function-ref name="granted" scoped="" ref="0xb6f1b408"/>
        <function-ref name="isOwner" scoped="" ref="0xb6f1b4e8"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6f1b5c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6f1c4e8" loc="91:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="AccelConfigP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6f1c4e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6f1c6d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6f1c7b0"/>
        <function-ref name="request" scoped="" ref="0xb6f1c890"/>
        <function-ref name="granted" scoped="" ref="0xb6f1c970"/>
        <function-ref name="isOwner" scoped="" ref="0xb6f1ca50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb6f1b708" loc="94:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="AccelConfigP.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6f1b708"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6f1b8e0"/>
        <function-ref name="userId" scoped="" ref="0xb6f1b9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb61057c0" loc="44:../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="AccelConfigP.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb61057c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6105998"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0xb6105af8" loc="45:../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="AccelConfigP.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0xb6105af8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb6105cd0"/>
        <function-ref name="isEmpty" scoped="" ref="0xb6105db0"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb6105e90"/>
        <function-ref name="dequeue" scoped="" ref="0xb6104010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb6102488" loc="55:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb6102488"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb6102670"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6102750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb61013f8" loc="60:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb61013f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb61015e0"/>
        <function-ref name="configure" scoped="" ref="0xb61016c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0xb6101820" loc="61:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb6101820"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb61019f8"/>
        <function-ref name="isEmpty" scoped="" ref="0xb6101ad8"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb6101bb8"/>
        <function-ref name="dequeue" scoped="" ref="0xb6101c98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0xb6102890" loc="56:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6102890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6102a68"/>
        <function-ref name="requested" scoped="" ref="0xb6102b48"/>
        <function-ref name="granted" scoped="" ref="0xb6102c28"/>
        <function-ref name="isOwner" scoped="" ref="0xb6102d08"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6102de8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb6101dd8" loc="62:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb6101dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb6100010"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb61000f0"/>
        <function-ref name="led1On" scoped="" ref="0xb61001d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb61002b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb6100390"/>
        <function-ref name="get" scoped="" ref="0xb6100470"/>
        <function-ref name="led1Off" scoped="" ref="0xb6100550"/>
        <function-ref name="led0On" scoped="" ref="0xb61008d0"/>
        <function-ref name="set" scoped="" ref="0xb6100710"/>
        <function-ref name="led2On" scoped="" ref="0xb6100630"/>
        <function-ref name="led2Off" scoped="" ref="0xb61007f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6104ce8" loc="54:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6104ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6104ed0"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6102010"/>
        <function-ref name="request" scoped="" ref="0xb61020f0"/>
        <function-ref name="granted" scoped="" ref="0xb61021d0"/>
        <function-ref name="isOwner" scoped="" ref="0xb61022b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb6102f28" loc="57:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6102f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6101110"/>
        <function-ref name="userId" scoped="" ref="0xb61011f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0xb6100a50" loc="75:../../tos/system/ArbiterP.nc">
      <component-ref qname="AccelConfigP.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0xb6100a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6100c28"/>
        <function-ref name="runTask" scoped="" ref="0xb6100d08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControl" ref="0xb6f19c68" loc="69:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="AccelConfigP.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6f19c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6f19e40"/>
        <function-ref name="stopDone" scoped="" ref="0xb6f19f20"/>
        <function-ref name="start" scoped="" ref="0xb6f18018"/>
        <function-ref name="stop" scoped="" ref="0xb6f180f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0xb6f18238" loc="71:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="AccelConfigP.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0xb6f18238"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0xb6f18410"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0xb6f18550" loc="72:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="AccelConfigP.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6f18550"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6f18728"/>
        <function-ref name="requested" scoped="" ref="0xb6f18808"/>
        <function-ref name="granted" scoped="" ref="0xb6f188e8"/>
        <function-ref name="isOwner" scoped="" ref="0xb6f189c8"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6f18aa8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0xb6f18be8" loc="73:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="AccelConfigP.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6f18be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6f18dc0"/>
        <function-ref name="userId" scoped="" ref="0xb6f18ea0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControl" ref="0xb60e3970" loc="61:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb60e3970"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb60e3b48"/>
        <function-ref name="stopDone" scoped="" ref="0xb60e3c28"/>
        <function-ref name="start" scoped="" ref="0xb60e3d08"/>
        <function-ref name="stop" scoped="" ref="0xb60e3de8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0xb60e3f28" loc="63:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0xb60e3f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0xb60e2110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopTask" ref="0xb60e2d20" loc="78:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopTask" scoped="" ref="0xb60e2d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb60e2ef8"/>
        <function-ref name="runTask" scoped="" ref="0xb60e1010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0xb60e2250" loc="64:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb60e2250"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb60e2428"/>
        <function-ref name="requested" scoped="" ref="0xb60e2508"/>
        <function-ref name="granted" scoped="" ref="0xb60e25e8"/>
        <function-ref name="isOwner" scoped="" ref="0xb60e26c8"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb60e27a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startTask" ref="0xb60e1190" loc="73:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startTask" scoped="" ref="0xb60e1190"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb60e1368"/>
        <function-ref name="runTask" scoped="" ref="0xb60e1448"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StdControl" ref="0xb60e3578" loc="60:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb60e3578"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb60e3750"/>
        <function-ref name="stop" scoped="" ref="0xb60e3830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0xb60e28e8" loc="65:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="AccelConfigP.PowerManager.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb60e28e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb60e2ac0"/>
        <function-ref name="userId" scoped="" ref="0xb60e2ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6efb2f8" loc="24:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="AccelReadP.MultiplexX"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6efb2f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6efb930"/>
        <function-ref name="readDone" scoped="" ref="0xb6efbb98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0xb6efa010" loc="26:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="AccelReadP.MultiplexX"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0xb6efa010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6efa648"/>
        <function-ref name="readDone" scoped="" ref="0xb6efa8b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0xb6efac30" loc="27:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="AccelReadP.MultiplexX"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6efac30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6efae18"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6efaef8"/>
        <function-ref name="request" scoped="" ref="0xb6eeb010"/>
        <function-ref name="granted" scoped="" ref="0xb6eeb0f0"/>
        <function-ref name="isOwner" scoped="" ref="0xb6eeb1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6eea1b8" loc="24:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="AccelReadP.MultiplexY"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6eea1b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6eea7f0"/>
        <function-ref name="readDone" scoped="" ref="0xb6eeaa58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0xb6eeaeb8" loc="26:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="AccelReadP.MultiplexY"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0xb6eeaeb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6ee9558"/>
        <function-ref name="readDone" scoped="" ref="0xb6ee97c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0xb6ee9b40" loc="27:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="AccelReadP.MultiplexY"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6ee9b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6ee9d28"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6ee9e08"/>
        <function-ref name="request" scoped="" ref="0xb6ee9ee8"/>
        <function-ref name="granted" scoped="" ref="0xb6ee7010"/>
        <function-ref name="isOwner" scoped="" ref="0xb6ee70f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb6140eb0" loc="25:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.Sensor.AdcX"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb6140eb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb613e0c0"/>
        <function-ref name="configure" scoped="" ref="0xb613e1a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6141e38" loc="22:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.Sensor.AdcX"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6141e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6140478"/>
        <function-ref name="readDone" scoped="" ref="0xb61406d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0xb61409d8" loc="24:../../tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.Sensor.AdcX"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb61409d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb6140bb0"/>
        <function-ref name="getChannel" scoped="" ref="0xb6140c90"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb6140d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6ee3bc8" loc="19:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6ee3bc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6ee0218"/>
        <function-ref name="readDone" scoped="" ref="0xb6ee0470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0xb6ede010" loc="20:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0xb6ede010"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6ede658"/>
        <function-ref name="readDone" scoped="" ref="0xb6ede8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0xb6edd010" loc="23:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb6edd010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb6edd1e8"/>
        <function-ref name="getChannel" scoped="" ref="0xb6edd2c8"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb6edd3a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0xb6edd848" loc="24:../../tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6edd848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6edda20"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6eddb00"/>
        <function-ref name="request" scoped="" ref="0xb6eddbe0"/>
        <function-ref name="granted" scoped="" ref="0xb6eddcc0"/>
        <function-ref name="isOwner" scoped="" ref="0xb6eddda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb6ed6100" loc="58:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb6ed6100"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb6ed62d8"/>
        <function-ref name="configure" scoped="" ref="0xb6ed63b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0xb6ed0870" loc="56:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0xb6ed0870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0xb6ed0a48"/>
        <function-ref name="dataReady" scoped="" ref="0xb6ed0b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0xb6ed3300" loc="55:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6ed3300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0xb6ed34d8"/>
        <function-ref name="cancel" scoped="" ref="0xb6ed35b8"/>
        <function-ref name="dataReady" scoped="" ref="0xb6ed3698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6edb830" loc="54:../../tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6edb830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6edba08"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6edbae8"/>
        <function-ref name="request" scoped="" ref="0xb6edbbc8"/>
        <function-ref name="granted" scoped="" ref="0xb6edbca8"/>
        <function-ref name="isOwner" scoped="" ref="0xb6edbd88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6ed6d68" loc="54:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6ed6d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6ecd010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0xb6ecac30" loc="57:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0xb6ecac30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0xb6ecae08"/>
        <function-ref name="dataReady" scoped="" ref="0xb6ecaee8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0xb6eca6a8" loc="56:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6eca6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0xb6eca880"/>
        <function-ref name="cancel" scoped="" ref="0xb6eca960"/>
        <function-ref name="dataReady" scoped="" ref="0xb6ecaa40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0xb6ec2498" loc="60:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6ec2498"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0xb6ec2670"/>
        <function-ref name="getAdmux" scoped="" ref="0xb6ec2750"/>
        <function-ref name="setPrescaler" scoped="" ref="0xb6ec2830"/>
        <function-ref name="isEnabled" scoped="" ref="0xb6ec2910"/>
        <function-ref name="enableAdc" scoped="" ref="0xb6ec29f0"/>
        <function-ref name="setAdmux" scoped="" ref="0xb6ec2ad0"/>
        <function-ref name="enableInterruption" scoped="" ref="0xb6ec2bb0"/>
        <function-ref name="isComplete" scoped="" ref="0xb6ec2c90"/>
        <function-ref name="cancel" scoped="" ref="0xb6ec2d70"/>
        <function-ref name="disableAdc" scoped="" ref="0xb6ec2e50"/>
        <function-ref name="resetInterrupt" scoped="" ref="0xb6ecb010"/>
        <function-ref name="disableInterruption" scoped="" ref="0xb6ecb0f0"/>
        <function-ref name="startConversion" scoped="" ref="0xb6ecb1d0"/>
        <function-ref name="isStarted" scoped="" ref="0xb6ecb330"/>
        <function-ref name="setAdcsra" scoped="" ref="0xb6ecb410"/>
        <function-ref name="setContinuous" scoped="" ref="0xb6ecb4f0"/>
        <function-ref name="getAdcsra" scoped="" ref="0xb6ecb5d0"/>
        <function-ref name="getValue" scoped="" ref="0xb6ecb6b0"/>
        <function-ref name="dataReady" scoped="" ref="0xb6ecb790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0xb6eca218" loc="55:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0xb6eca218"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6eca3f0"/>
        <function-ref name="stop" scoped="" ref="0xb6eca4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0xb6ecb968" loc="61:../../tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0xb6ecb968"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0xb6ecbb40"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0xb6ecbc20"/>
        <function-ref name="calibrateMicro" scoped="" ref="0xb6ecbd00"/>
        <function-ref name="actualMicro" scoped="" ref="0xb6ecbde0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0xb6ecbec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0xb6ecf638" loc="45:../../tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6ecf638"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0xb6ecf810"/>
        <function-ref name="getAdmux" scoped="" ref="0xb6ecf8f0"/>
        <function-ref name="setPrescaler" scoped="" ref="0xb6ecf9d0"/>
        <function-ref name="isEnabled" scoped="" ref="0xb6ecfab0"/>
        <function-ref name="enableAdc" scoped="" ref="0xb6ecfb90"/>
        <function-ref name="setAdmux" scoped="" ref="0xb6ecfc70"/>
        <function-ref name="enableInterruption" scoped="" ref="0xb6ecfd50"/>
        <function-ref name="isComplete" scoped="" ref="0xb6ecfe30"/>
        <function-ref name="cancel" scoped="" ref="0xb6ecff10"/>
        <function-ref name="disableAdc" scoped="" ref="0xb6ea4010"/>
        <function-ref name="resetInterrupt" scoped="" ref="0xb6ea40f0"/>
        <function-ref name="disableInterruption" scoped="" ref="0xb6ea41d0"/>
        <function-ref name="startConversion" scoped="" ref="0xb6ea42b0"/>
        <function-ref name="isStarted" scoped="" ref="0xb6ea4410"/>
        <function-ref name="setAdcsra" scoped="" ref="0xb6ea44f0"/>
        <function-ref name="setContinuous" scoped="" ref="0xb6ea45d0"/>
        <function-ref name="getAdcsra" scoped="" ref="0xb6ea46b0"/>
        <function-ref name="getValue" scoped="" ref="0xb6ea4790"/>
        <function-ref name="dataReady" scoped="" ref="0xb6ea4870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0xb6ea3990" loc="48:../../tos/chips/atm1281/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0xb6ea3990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0xb6ea3b68"/>
        <function-ref name="getAdmux" scoped="" ref="0xb6ea3c48"/>
        <function-ref name="setPrescaler" scoped="" ref="0xb6ea3d28"/>
        <function-ref name="isEnabled" scoped="" ref="0xb6ea3e08"/>
        <function-ref name="enableAdc" scoped="" ref="0xb6ea3ee8"/>
        <function-ref name="setAdmux" scoped="" ref="0xb6ea0010"/>
        <function-ref name="enableInterruption" scoped="" ref="0xb6ea00f0"/>
        <function-ref name="isComplete" scoped="" ref="0xb6ea01d0"/>
        <function-ref name="cancel" scoped="" ref="0xb6ea02b0"/>
        <function-ref name="disableAdc" scoped="" ref="0xb6ea0390"/>
        <function-ref name="resetInterrupt" scoped="" ref="0xb6ea0470"/>
        <function-ref name="disableInterruption" scoped="" ref="0xb6ea0550"/>
        <function-ref name="startConversion" scoped="" ref="0xb6ea0630"/>
        <function-ref name="isStarted" scoped="" ref="0xb6ea0790"/>
        <function-ref name="setAdcsra" scoped="" ref="0xb6ea0870"/>
        <function-ref name="setContinuous" scoped="" ref="0xb6ea0950"/>
        <function-ref name="getAdcsra" scoped="" ref="0xb6ea0a30"/>
        <function-ref name="getValue" scoped="" ref="0xb6ea0b10"/>
        <function-ref name="dataReady" scoped="" ref="0xb6ea0bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0xb6ea0dd8" loc="49:../../tos/chips/atm1281/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0xb6ea0dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0xb6e9f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb6ea12c8" loc="92:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb6ea12c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb6ea14b0"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6ea1590"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb6e822e8" loc="96:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb6e822e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb6e824d0"/>
        <function-ref name="configure" scoped="" ref="0xb6e825b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0xb6ea16d0" loc="93:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6ea16d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6ea18a8"/>
        <function-ref name="requested" scoped="" ref="0xb6ea1988"/>
        <function-ref name="granted" scoped="" ref="0xb6ea1a68"/>
        <function-ref name="isOwner" scoped="" ref="0xb6ea1b48"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6ea1c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6ea5b50" loc="91:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6ea5b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6ea5d38"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6ea5e18"/>
        <function-ref name="request" scoped="" ref="0xb6ea5ef8"/>
        <function-ref name="granted" scoped="" ref="0xb6ea1010"/>
        <function-ref name="isOwner" scoped="" ref="0xb6ea10f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb6ea1d68" loc="94:../../tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6ea1d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6e82010"/>
        <function-ref name="userId" scoped="" ref="0xb6e820f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb60c8640" loc="44:../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb60c8640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb60c8818"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0xb60c8978" loc="45:../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0xb60c8978"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb60c8b50"/>
        <function-ref name="isEmpty" scoped="" ref="0xb60c8c30"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb60c8d10"/>
        <function-ref name="dequeue" scoped="" ref="0xb60c8df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb60c63a8" loc="55:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb60c63a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb60c6590"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb60c6670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb60c5338" loc="60:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb60c5338"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb60c5520"/>
        <function-ref name="configure" scoped="" ref="0xb60c5600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0xb60c5760" loc="61:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb60c5760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb60c5938"/>
        <function-ref name="isEmpty" scoped="" ref="0xb60c5a18"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb60c5af8"/>
        <function-ref name="dequeue" scoped="" ref="0xb60c5bd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0xb60c67b0" loc="56:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb60c67b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb60c6988"/>
        <function-ref name="requested" scoped="" ref="0xb60c6a68"/>
        <function-ref name="granted" scoped="" ref="0xb60c6b48"/>
        <function-ref name="isOwner" scoped="" ref="0xb60c6c28"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb60c6d08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb60c5d18" loc="62:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb60c5d18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb60c5ef0"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb60c4010"/>
        <function-ref name="led1On" scoped="" ref="0xb60c40f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb60c41d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb60c42b0"/>
        <function-ref name="get" scoped="" ref="0xb60c4390"/>
        <function-ref name="led1Off" scoped="" ref="0xb60c4470"/>
        <function-ref name="led0On" scoped="" ref="0xb60c47f0"/>
        <function-ref name="set" scoped="" ref="0xb60c4630"/>
        <function-ref name="led2On" scoped="" ref="0xb60c4550"/>
        <function-ref name="led2Off" scoped="" ref="0xb60c4710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb60c7bc0" loc="54:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb60c7bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb60c7da8"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb60c7e88"/>
        <function-ref name="request" scoped="" ref="0xb60c6010"/>
        <function-ref name="granted" scoped="" ref="0xb60c60f0"/>
        <function-ref name="isOwner" scoped="" ref="0xb60c61d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb60c6e48" loc="57:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb60c6e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb60c5050"/>
        <function-ref name="userId" scoped="" ref="0xb60c5130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0xb60c4970" loc="75:../../tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0xb60c4970"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb60c4b48"/>
        <function-ref name="runTask" scoped="" ref="0xb60c4c28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0xb6e7e300" loc="72:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0xb6e7e300"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0xb6e7e4d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0xb6e7e618" loc="73:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb6e7e618"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6e7e7f0"/>
        <function-ref name="requested" scoped="" ref="0xb6e7e8d0"/>
        <function-ref name="granted" scoped="" ref="0xb6e7e9b0"/>
        <function-ref name="isOwner" scoped="" ref="0xb6e7ea90"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6e7eb70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0xb6e80ef0" loc="70:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0xb6e80ef0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6e7e0e0"/>
        <function-ref name="stop" scoped="" ref="0xb6e7e1c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0xb6e7ecb0" loc="74:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6e7ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6e7ee88"/>
        <function-ref name="userId" scoped="" ref="0xb6e72010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0xb60a97a8" loc="62:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0xb60a97a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0xb60a9980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0xb60a9ac0" loc="63:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0xb60a9ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb60a9c98"/>
        <function-ref name="requested" scoped="" ref="0xb60a9d78"/>
        <function-ref name="granted" scoped="" ref="0xb60a9e58"/>
        <function-ref name="isOwner" scoped="" ref="0xb60a7010"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb60a70f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0xb60a93b0" loc="60:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0xb60a93b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb60a9588"/>
        <function-ref name="stop" scoped="" ref="0xb60a9668"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0xb60a7230" loc="64:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb60a7230"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb60a7408"/>
        <function-ref name="userId" scoped="" ref="0xb60a74e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0xb6e67410" loc="54:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0xb6e67410"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0xb6e67b60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6e6e738" loc="48:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6e6e738"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6e6ed60"/>
        <function-ref name="readDone" scoped="" ref="0xb6e6d010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0xb6e6d720" loc="49:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0xb6e6d720"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6e6dd68"/>
        <function-ref name="readDone" scoped="" ref="0xb6e6c010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0xb6e6cc38" loc="53:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0xb6e6cc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0xb6e6ce10"/>
        <function-ref name="getChannel" scoped="" ref="0xb6e6cef0"/>
        <function-ref name="getPrescaler" scoped="" ref="0xb6e6a010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0xb6e6c3c0" loc="52:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0xb6e6c3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0xb6e6c598"/>
        <function-ref name="cancel" scoped="" ref="0xb6e6c678"/>
        <function-ref name="dataReady" scoped="" ref="0xb6e6c758"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0xb6e5f010" loc="104:../../tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0xb6e5f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6e5f1e8"/>
        <function-ref name="runTask" scoped="" ref="0xb6e5f2c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0xb6e530d0" loc="36:../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0xb6e530d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0xb6e53820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0xb6e6fb10" loc="24:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0xb6e6fb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6e541e0"/>
        <function-ref name="readDone" scoped="" ref="0xb6e54448"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0xb6e548a8" loc="26:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0xb6e548a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0xb6e54ee0"/>
        <function-ref name="readDone" scoped="" ref="0xb6e50180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0xb6e50500" loc="27:../../tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6e50500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6e506e8"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6e507c8"/>
        <function-ref name="request" scoped="" ref="0xb6e508a8"/>
        <function-ref name="granted" scoped="" ref="0xb6e50988"/>
        <function-ref name="isOwner" scoped="" ref="0xb6e50a68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RootControl" ref="0xb6e26b90" loc="59:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0xb6e26b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0xb6e26d68"/>
        <function-ref name="setRoot" scoped="" ref="0xb6e26e48"/>
        <function-ref name="unsetRoot" scoped="" ref="0xb6e26f28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionPacket" ref="0xb6e3f498" loc="54:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionPacket" scoped="" ref="0xb6e3f498"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6e3f670"/>
        <function-ref name="setOrigin" scoped="" ref="0xb6e3f750"/>
        <function-ref name="setType" scoped="" ref="0xb6e3f830"/>
        <function-ref name="getOrigin" scoped="" ref="0xb6e3f910"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6e3f9f0"/>
        <function-ref name="getType" scoped="" ref="0xb6e3fad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionDebug" ref="0xb6e1e550" loc="65:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0xb6e1e550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0xb6e1e728"/>
        <function-ref name="logEventMsg" scoped="" ref="0xb6e1e808"/>
        <function-ref name="logEventSimple" scoped="" ref="0xb6e1e8e8"/>
        <function-ref name="logEventRoute" scoped="" ref="0xb6e1e9c8"/>
        <function-ref name="logEventDbg" scoped="" ref="0xb6e1eaa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Intercept" ref="0xb6e3ec10" loc="51:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Intercept" scoped="" ref="0xb6e3ec10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0xb6e3ede8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6e39ce8" loc="53:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6e39ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e39ec0"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6e3f010"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e3f0f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e3f1d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6e3f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6e43ef8" loc="50:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6e43ef8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e410e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6e44d58" loc="48:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6e44d58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6e43010"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e430f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e431d0"/>
        <function-ref name="cancel" scoped="" ref="0xb6e432b0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6e43390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpInfo" ref="0xb6e29e68" loc="57:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpInfo" scoped="" ref="0xb6e29e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getNeighborLinkQuality" scoped="" ref="0xb6e38050"/>
        <function-ref name="recomputeRoutes" scoped="" ref="0xb6e38130"/>
        <function-ref name="numNeighbors" scoped="" ref="0xb6e38210"/>
        <function-ref name="triggerRouteUpdate" scoped="" ref="0xb6e382f0"/>
        <function-ref name="getEtx" scoped="" ref="0xb6e383d0"/>
        <function-ref name="triggerImmediateRouteUpdate" scoped="" ref="0xb6e384b0"/>
        <function-ref name="setNeighborCongested" scoped="" ref="0xb6e38590"/>
        <function-ref name="getNeighborAddr" scoped="" ref="0xb6e38670"/>
        <function-ref name="getParent" scoped="" ref="0xb6e38750"/>
        <function-ref name="getNeighborRouteQuality" scoped="" ref="0xb6e38830"/>
        <function-ref name="isNeighborCongested" scoped="" ref="0xb6e38910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6e43848" loc="49:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6e43848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e43a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpCongestion" ref="0xb6e26728" loc="58:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpCongestion" scoped="" ref="0xb6e26728"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpCongestion"/>
      </instance>
      <interface-functions>
        <function-ref name="isCongested" scoped="" ref="0xb6e26900"/>
        <function-ref name="setClientCongested" scoped="" ref="0xb6e269e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnicastNameFreeRouting" ref="0xb6e24570" loc="60:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb6e24570"/></type-interface>
      <instance>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
      </instance>
      <interface-functions>
        <function-ref name="hasRoute" scoped="" ref="0xb6e24748"/>
        <function-ref name="routeFound" scoped="" ref="0xb6e24828"/>
        <function-ref name="nextHop" scoped="" ref="0xb6e24908"/>
        <function-ref name="noRoute" scoped="" ref="0xb6e249e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpPacket" ref="0xb6e2f920" loc="55:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpPacket" scoped="" ref="0xb6e2f920"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6e2faf8"/>
        <function-ref name="option" scoped="" ref="0xb6e2fbd8"/>
        <function-ref name="setEtx" scoped="" ref="0xb6e2fcb8"/>
        <function-ref name="setOrigin" scoped="" ref="0xb6e2fd98"/>
        <function-ref name="clearOption" scoped="" ref="0xb6e2fe78"/>
        <function-ref name="getEtx" scoped="" ref="0xb6e3d010"/>
        <function-ref name="getOrigin" scoped="" ref="0xb6e3d0f0"/>
        <function-ref name="setType" scoped="" ref="0xb6e3d1d0"/>
        <function-ref name="setOption" scoped="" ref="0xb6e3d2b0"/>
        <function-ref name="matchPacket" scoped="" ref="0xb6e3d390"/>
        <function-ref name="getThl" scoped="" ref="0xb6e3d470"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6e3d550"/>
        <function-ref name="matchInstance" scoped="" ref="0xb6e3d630"/>
        <function-ref name="getType" scoped="" ref="0xb6e3d790"/>
        <function-ref name="setThl" scoped="" ref="0xb6e3d870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb6e44628" loc="47:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb6e44628"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6e44800"/>
        <function-ref name="stop" scoped="" ref="0xb6e448e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionId" ref="0xb6e23780" loc="64:../../tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionId" scoped="" ref="0xb6e23780"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionId"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fetch" scoped="" ref="0xb6e239d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RootControl" ref="0xb6e162a0" loc="92:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0xb6e162a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0xb6e16478"/>
        <function-ref name="setRoot" scoped="" ref="0xb6e16558"/>
        <function-ref name="unsetRoot" scoped="" ref="0xb6e16638"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionPacket" ref="0xb6e1abf0" loc="86:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionPacket" scoped="" ref="0xb6e1abf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6e1adc8"/>
        <function-ref name="setOrigin" scoped="" ref="0xb6e1aea8"/>
        <function-ref name="setType" scoped="" ref="0xb6e19010"/>
        <function-ref name="getOrigin" scoped="" ref="0xb6e190f0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6e191d0"/>
        <function-ref name="getType" scoped="" ref="0xb6e192b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkEstimator" ref="0xb6e12460" loc="90:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkEstimator" scoped="" ref="0xb6e12460"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkEstimator"/>
      </instance>
      <interface-functions>
        <function-ref name="txAck" scoped="" ref="0xb6e12638"/>
        <function-ref name="pinNeighbor" scoped="" ref="0xb6e12718"/>
        <function-ref name="txNoAck" scoped="" ref="0xb6e127f8"/>
        <function-ref name="insertNeighbor" scoped="" ref="0xb6e128d8"/>
        <function-ref name="evicted" scoped="" ref="0xb6e129b8"/>
        <function-ref name="clearDLQ" scoped="" ref="0xb6e12a98"/>
        <function-ref name="unpinNeighbor" scoped="" ref="0xb6e12b78"/>
        <function-ref name="getLinkQuality" scoped="" ref="0xb6e12c58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionDebug" ref="0xb6e15630" loc="98:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0xb6e15630"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0xb6e15808"/>
        <function-ref name="logEventMsg" scoped="" ref="0xb6e158e8"/>
        <function-ref name="logEventSimple" scoped="" ref="0xb6e159c8"/>
        <function-ref name="logEventRoute" scoped="" ref="0xb6e15aa8"/>
        <function-ref name="logEventDbg" scoped="" ref="0xb6e15b88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Intercept" ref="0xb6e1a158" loc="83:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Intercept" scoped="" ref="0xb6e1a158"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0xb6e1a330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6e1a4b0" loc="85:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6e1a4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e1a688"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6e1a768"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e1a848"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e1a928"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6e1aa08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6e1ca88" loc="82:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6e1ca88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e1cc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6e1d970" loc="80:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6e1d970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6e1db48"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e1dc28"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e1dd08"/>
        <function-ref name="cancel" scoped="" ref="0xb6e1dde8"/>
        <function-ref name="sendDone" scoped="" ref="0xb6e1dec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpInfo" ref="0xb6e184b8" loc="89:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpInfo" scoped="" ref="0xb6e184b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getNeighborLinkQuality" scoped="" ref="0xb6e18690"/>
        <function-ref name="recomputeRoutes" scoped="" ref="0xb6e18770"/>
        <function-ref name="numNeighbors" scoped="" ref="0xb6e18850"/>
        <function-ref name="triggerRouteUpdate" scoped="" ref="0xb6e18930"/>
        <function-ref name="getEtx" scoped="" ref="0xb6e18a10"/>
        <function-ref name="triggerImmediateRouteUpdate" scoped="" ref="0xb6e18af0"/>
        <function-ref name="setNeighborCongested" scoped="" ref="0xb6e18bd0"/>
        <function-ref name="getNeighborAddr" scoped="" ref="0xb6e18cb0"/>
        <function-ref name="getParent" scoped="" ref="0xb6e18d90"/>
        <function-ref name="getNeighborRouteQuality" scoped="" ref="0xb6e18e70"/>
        <function-ref name="isNeighborCongested" scoped="" ref="0xb6e17010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6e1c3d8" loc="81:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6e1c3d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e1c5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpCongestion" ref="0xb6e12e20" loc="91:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpCongestion" scoped="" ref="0xb6e12e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpCongestion"/>
      </instance>
      <interface-functions>
        <function-ref name="isCongested" scoped="" ref="0xb6e16010"/>
        <function-ref name="setClientCongested" scoped="" ref="0xb6e160f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnicastNameFreeRouting" ref="0xb6e16858" loc="93:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb6e16858"/></type-interface>
      <instance>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
      </instance>
      <interface-functions>
        <function-ref name="hasRoute" scoped="" ref="0xb6e16ab0"/>
        <function-ref name="routeFound" scoped="" ref="0xb6e16b90"/>
        <function-ref name="nextHop" scoped="" ref="0xb6e16c70"/>
        <function-ref name="noRoute" scoped="" ref="0xb6e16d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpPacket" ref="0xb6e19450" loc="87:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpPacket" scoped="" ref="0xb6e19450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6e19628"/>
        <function-ref name="option" scoped="" ref="0xb6e19708"/>
        <function-ref name="setEtx" scoped="" ref="0xb6e197e8"/>
        <function-ref name="setOrigin" scoped="" ref="0xb6e198c8"/>
        <function-ref name="clearOption" scoped="" ref="0xb6e199a8"/>
        <function-ref name="getEtx" scoped="" ref="0xb6e19a88"/>
        <function-ref name="getOrigin" scoped="" ref="0xb6e19b68"/>
        <function-ref name="setType" scoped="" ref="0xb6e19c48"/>
        <function-ref name="setOption" scoped="" ref="0xb6e19d28"/>
        <function-ref name="matchPacket" scoped="" ref="0xb6e19e08"/>
        <function-ref name="getThl" scoped="" ref="0xb6e19ee8"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6e18010"/>
        <function-ref name="matchInstance" scoped="" ref="0xb6e180f0"/>
        <function-ref name="getType" scoped="" ref="0xb6e18250"/>
        <function-ref name="setThl" scoped="" ref="0xb6e18330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb6e1d240" loc="79:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb6e1d240"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6e1d418"/>
        <function-ref name="stop" scoped="" ref="0xb6e1d4f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionId" ref="0xb6e15280" loc="97:../../tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionId" scoped="" ref="0xb6e15280"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionId"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fetch" scoped="" ref="0xb6e15458"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6e0f3b8" loc="41:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6e0f3b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6e0f590"/>
        <function-ref name="stopDone" scoped="" ref="0xb6e0f670"/>
        <function-ref name="start" scoped="" ref="0xb6e0f750"/>
        <function-ref name="stop" scoped="" ref="0xb6e0f830"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0xb6e07538" loc="46:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0xb6e07538"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6e07710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6e07890" loc="48:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6e07890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6e07a68"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6e07b48"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e07c28"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e07d08"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6e07de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb6e0fc90" loc="43:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb6e0fc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6e0fe68"/>
        <function-ref name="getPayload" scoped="" ref="0xb6e0c010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6e0c0f0"/>
        <function-ref name="cancel" scoped="" ref="0xb6e0c1d0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6e0c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6e0cdb0" loc="45:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6e0cdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e0b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0xb6df66e0" loc="52:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0xb6df66e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0xb6df68b8"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0xb6df6998"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0xb6df6a78"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0xb6df6b58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6e0c718" loc="44:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6e0c718"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6e0c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0xb6dfaa90" loc="51:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6dfaa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6dfac68"/>
        <function-ref name="noAck" scoped="" ref="0xb6dfad48"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6dfae28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0xb6dfe040" loc="53:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0xb6dfe040"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0xb6dfe218"/>
        <function-ref name="setRetries" scoped="" ref="0xb6dfe2f8"/>
        <function-ref name="getRetries" scoped="" ref="0xb6dfe3d8"/>
        <function-ref name="setRetryDelay" scoped="" ref="0xb6dfe4b8"/>
        <function-ref name="wasDelivered" scoped="" ref="0xb6dfe598"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb6dfc7b0" loc="49:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb6dfc7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6dfc988"/>
        <function-ref name="source" scoped="" ref="0xb6dfca68"/>
        <function-ref name="address" scoped="" ref="0xb6dfcb48"/>
        <function-ref name="destination" scoped="" ref="0xb6dfcc28"/>
        <function-ref name="setSource" scoped="" ref="0xb6dfcd08"/>
        <function-ref name="setDestination" scoped="" ref="0xb6dfcde8"/>
        <function-ref name="type" scoped="" ref="0xb6dfcec8"/>
        <function-ref name="setType" scoped="" ref="0xb6e08010"/>
        <function-ref name="isForMe" scoped="" ref="0xb6e080f0"/>
        <function-ref name="setGroup" scoped="" ref="0xb6e081d0"/>
        <function-ref name="localGroup" scoped="" ref="0xb6e082b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0xb6dee940" loc="54:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0xb6dee940"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0xb6deeb18"/>
        <function-ref name="setChannel" scoped="" ref="0xb6deebf8"/>
        <function-ref name="getChannel" scoped="" ref="0xb6deecd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMicro" ref="0xb6df02a8" loc="56:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMicro" scoped="" ref="0xb6df02a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6df0da8"/>
        <function-ref name="clear" scoped="" ref="0xb6ded170"/>
        <function-ref name="isValid" scoped="" ref="0xb6df09f8"/>
        <function-ref name="set" scoped="" ref="0xb6ded520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0xb6dedc58" loc="57:../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6dedc58"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6de9828"/>
        <function-ref name="clear" scoped="" ref="0xb6de9bd8"/>
        <function-ref name="isValid" scoped="" ref="0xb6de9478"/>
        <function-ref name="set" scoped="" ref="0xb6de7010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6de7a78" loc="45:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6de7a78"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6de7c50"/>
        <function-ref name="stopDone" scoped="" ref="0xb6de7d30"/>
        <function-ref name="start" scoped="" ref="0xb6de7e10"/>
        <function-ref name="stop" scoped="" ref="0xb6de7ef0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0xb6dd8158" loc="66:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0xb6dd8158"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6dd8d20"/>
        <function-ref name="get" scoped="" ref="0xb6dd8a60"/>
        <function-ref name="isSet" scoped="" ref="0xb6dd87a0"/>
        <function-ref name="set" scoped="" ref="0xb6dd6010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0xb6dd3ca0" loc="71:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6dd3ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6dd17c0"/>
        <function-ref name="clear" scoped="" ref="0xb6dd1b70"/>
        <function-ref name="isValid" scoped="" ref="0xb6dd1410"/>
        <function-ref name="set" scoped="" ref="0xb6dd1f20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0xb6de3a68" loc="50:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0xb6de3a68"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6de3c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6de2bb0" loc="56:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6de2bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6de2d88"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6de2e68"/>
        <function-ref name="getPayload" scoped="" ref="0xb6de0010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6de00f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6de01d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb6de4380" loc="47:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb6de4380"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6de4558"/>
        <function-ref name="getPayload" scoped="" ref="0xb6de4638"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6de4718"/>
        <function-ref name="cancel" scoped="" ref="0xb6de47f8"/>
        <function-ref name="sendDone" scoped="" ref="0xb6de48d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6de33f0" loc="49:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6de33f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6de35c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0xb6ddddc8" loc="65:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6ddddc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6dd99a8"/>
        <function-ref name="get" scoped="" ref="0xb6dd96e8"/>
        <function-ref name="isSet" scoped="" ref="0xb6dd9428"/>
        <function-ref name="set" scoped="" ref="0xb6dd9c68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0xb6ddf5c8" loc="60:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0xb6ddf5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0xb6ddf7a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0xb6ddf880"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0xb6ddf960"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0xb6ddfa40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6de4d40" loc="48:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6de4d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6de4f18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0xb6dd52e8" loc="70:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6dd52e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6dd5de8"/>
        <function-ref name="clear" scoped="" ref="0xb6dd31b8"/>
        <function-ref name="isValid" scoped="" ref="0xb6dd5a38"/>
        <function-ref name="set" scoped="" ref="0xb6dd3568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0xb6dd2720" loc="69:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6dd2720"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6dd2d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0xb6ddaa10" loc="64:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6ddaa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6ddd5e8"/>
        <function-ref name="get" scoped="" ref="0xb6ddd328"/>
        <function-ref name="isSet" scoped="" ref="0xb6ddd068"/>
        <function-ref name="set" scoped="" ref="0xb6ddd8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0xb6ddf040" loc="59:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6ddf040"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6ddf218"/>
        <function-ref name="noAck" scoped="" ref="0xb6ddf2f8"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6ddf3d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveDefault" ref="0xb6de2178" loc="53:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveDefault" scoped="" ref="0xb6de2178"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6de2350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0xb6ddfbe8" loc="61:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0xb6ddfbe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0xb6ddfdc0"/>
        <function-ref name="setRetries" scoped="" ref="0xb6ddfea0"/>
        <function-ref name="getRetries" scoped="" ref="0xb6dde010"/>
        <function-ref name="setRetryDelay" scoped="" ref="0xb6dde0f0"/>
        <function-ref name="wasDelivered" scoped="" ref="0xb6dde1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb6de0368" loc="57:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb6de0368"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6de0540"/>
        <function-ref name="source" scoped="" ref="0xb6de0620"/>
        <function-ref name="address" scoped="" ref="0xb6de0700"/>
        <function-ref name="destination" scoped="" ref="0xb6de07e0"/>
        <function-ref name="setSource" scoped="" ref="0xb6de08c0"/>
        <function-ref name="setDestination" scoped="" ref="0xb6de09a0"/>
        <function-ref name="type" scoped="" ref="0xb6de0a80"/>
        <function-ref name="setType" scoped="" ref="0xb6de0b60"/>
        <function-ref name="isForMe" scoped="" ref="0xb6de0c40"/>
        <function-ref name="setGroup" scoped="" ref="0xb6de0d20"/>
        <function-ref name="localGroup" scoped="" ref="0xb6de0e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0xb6dde390" loc="62:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0xb6dde390"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0xb6dde5e8"/>
        <function-ref name="setChannel" scoped="" ref="0xb6dde6c8"/>
        <function-ref name="getChannel" scoped="" ref="0xb6dde7a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0xb6dd2228" loc="67:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6dd2228"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0xb6dd2400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SnoopDefault" ref="0xb6de2858" loc="54:../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SnoopDefault" scoped="" ref="0xb6de2858"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6de2a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6dd08e0" loc="41:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6dd08e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6dd0ab8"/>
        <function-ref name="stopDone" scoped="" ref="0xb6dd0b98"/>
        <function-ref name="start" scoped="" ref="0xb6dd0c78"/>
        <function-ref name="stop" scoped="" ref="0xb6dd0d58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0xb6db8b60" loc="90:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0xb6db8b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6db7780"/>
        <function-ref name="get" scoped="" ref="0xb6db74c0"/>
        <function-ref name="isSet" scoped="" ref="0xb6db7200"/>
        <function-ref name="set" scoped="" ref="0xb6db7a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Notifier" ref="0xb6dc2c78" loc="70:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Notifier" scoped="" ref="0xb6dc2c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6dc2e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendResource" ref="0xb6dc73b0" loc="72:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendResource" scoped="" ref="0xb6dc73b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6dc7608"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6dc76e8"/>
        <function-ref name="request" scoped="" ref="0xb6dc77c8"/>
        <function-ref name="granted" scoped="" ref="0xb6dc78a8"/>
        <function-ref name="isOwner" scoped="" ref="0xb6dc7988"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0xb6dcb8e0" loc="57:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0xb6dcb8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6dcbab8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb6dcd1f8" loc="54:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb6dcd1f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6dcd3d0"/>
        <function-ref name="getPayload" scoped="" ref="0xb6dcd4b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6dcd590"/>
        <function-ref name="cancel" scoped="" ref="0xb6dcd670"/>
        <function-ref name="sendDone" scoped="" ref="0xb6dcd750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6dcb268" loc="56:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6dcb268"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6dcb440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0xb6dbc5b8" loc="74:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0xb6dbc5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0xb6dbc790"/>
        <function-ref name="address" scoped="" ref="0xb6dbc870"/>
        <function-ref name="destination" scoped="" ref="0xb6dbc950"/>
        <function-ref name="setSource" scoped="" ref="0xb6dbca30"/>
        <function-ref name="setDestination" scoped="" ref="0xb6dbcb10"/>
        <function-ref name="pan" scoped="" ref="0xb6dbcbf0"/>
        <function-ref name="setPan" scoped="" ref="0xb6dbccd0"/>
        <function-ref name="isForMe" scoped="" ref="0xb6dbcdb0"/>
        <function-ref name="localPan" scoped="" ref="0xb6dbce90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForIeee154Message" ref="0xb6dc6148" loc="75:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForIeee154Message" scoped="" ref="0xb6dc6148"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6dc6320"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6dc6400"/>
        <function-ref name="getPayload" scoped="" ref="0xb6dc64e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6dc65c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6dc66a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0xb6db97f0" loc="89:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6db97f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6db83d8"/>
        <function-ref name="get" scoped="" ref="0xb6db8118"/>
        <function-ref name="isSet" scoped="" ref="0xb6db9e38"/>
        <function-ref name="set" scoped="" ref="0xb6db8698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0xb6dc6e48" loc="79:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0xb6dc6e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0xb6dc1050"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0xb6dc1130"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0xb6dc1210"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0xb6dc12f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForActiveMessage" ref="0xb6dc97d0" loc="64:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForActiveMessage" scoped="" ref="0xb6dc97d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6dc99a8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6dc9a88"/>
        <function-ref name="getPayload" scoped="" ref="0xb6dc9b68"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6dc9c48"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6dc9d28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6dcdbb8" loc="55:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6dcdbb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6dcdd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0xb6db5ec8" loc="94:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6db5ec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6db4b30"/>
        <function-ref name="clear" scoped="" ref="0xb6db4ee0"/>
        <function-ref name="isValid" scoped="" ref="0xb6db4780"/>
        <function-ref name="set" scoped="" ref="0xb6db22d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0xb6db5330" loc="93:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6db5330"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6db5978"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0xb6dbb368" loc="88:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6dbb368"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6db9010"/>
        <function-ref name="get" scoped="" ref="0xb6dbbc70"/>
        <function-ref name="isSet" scoped="" ref="0xb6dbb9b0"/>
        <function-ref name="set" scoped="" ref="0xb6db92d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0xb6dc68c0" loc="78:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6dc68c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6dc6a98"/>
        <function-ref name="noAck" scoped="" ref="0xb6dc6b78"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6dc6c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0xb6dc2098" loc="68:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0xb6dc2098"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6dc2270"/>
        <function-ref name="getPayload" scoped="" ref="0xb6dc2350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6dc2430"/>
        <function-ref name="cancel" scoped="" ref="0xb6dc2510"/>
        <function-ref name="sendDone" scoped="" ref="0xb6dc25f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveDefault" ref="0xb6dca010" loc="60:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveDefault" scoped="" ref="0xb6dca010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6dca1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0xb6dc1498" loc="80:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0xb6dc1498"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0xb6dc1670"/>
        <function-ref name="setRetries" scoped="" ref="0xb6dc1750"/>
        <function-ref name="getRetries" scoped="" ref="0xb6dc1830"/>
        <function-ref name="setRetryDelay" scoped="" ref="0xb6dc1910"/>
        <function-ref name="wasDelivered" scoped="" ref="0xb6dc19f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0xb6dc1bb0" loc="86:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0xb6dc1bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0xb6dc1d88"/>
        <function-ref name="setChannel" scoped="" ref="0xb6dc1e68"/>
        <function-ref name="getChannel" scoped="" ref="0xb6dbb010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb6dcaa60" loc="63:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb6dcaa60"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6dcac38"/>
        <function-ref name="source" scoped="" ref="0xb6dcad18"/>
        <function-ref name="address" scoped="" ref="0xb6dcadf8"/>
        <function-ref name="destination" scoped="" ref="0xb6dcaed8"/>
        <function-ref name="setSource" scoped="" ref="0xb6dc9010"/>
        <function-ref name="setDestination" scoped="" ref="0xb6dc90f0"/>
        <function-ref name="type" scoped="" ref="0xb6dc91d0"/>
        <function-ref name="setType" scoped="" ref="0xb6dc92b0"/>
        <function-ref name="isForMe" scoped="" ref="0xb6dc9390"/>
        <function-ref name="setGroup" scoped="" ref="0xb6dc9470"/>
        <function-ref name="localGroup" scoped="" ref="0xb6dc9550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0xb6db2a08" loc="95:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6db2a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6db15b0"/>
        <function-ref name="clear" scoped="" ref="0xb6db1960"/>
        <function-ref name="isValid" scoped="" ref="0xb6db1200"/>
        <function-ref name="set" scoped="" ref="0xb6db1d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0xb6dc2828" loc="69:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0xb6dc2828"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6dc2a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0xb6db7df0" loc="91:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6db7df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0xb6db5010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SnoopDefault" ref="0xb6dca6f0" loc="61:../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SnoopDefault" scoped="" ref="0xb6dca6f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6dca8c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Tasklet" ref="0xb6daf1a8" loc="44:../../tos/lib/rfxlink/util/TaskletC.nc">
      <component-ref qname="RF230RadioC.TaskletC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb6daf1a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb6daf380"/>
        <function-ref name="suspend" scoped="" ref="0xb6daf460"/>
        <function-ref name="resume" scoped="" ref="0xb6daf540"/>
        <function-ref name="run" scoped="" ref="0xb6daf620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DummyConfig" ref="0xb6d97a10" loc="51:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DummyConfig" scoped="" ref="0xb6d97a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0xb6d97be8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TrafficMonitorConfig" ref="0xb6d96560" loc="47:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TrafficMonitorConfig" scoped="" ref="0xb6d96560"/></type-interface>
      <instance>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getBytes" scoped="" ref="0xb6d96738"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageConfig" ref="0xb6d8ca60" loc="50:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageConfig" scoped="" ref="0xb6d8ca60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6d8cc38"/>
        <function-ref name="checkFrame" scoped="" ref="0xb6d8cd18"/>
        <function-ref name="source" scoped="" ref="0xb6d8cdf8"/>
        <function-ref name="destination" scoped="" ref="0xb6d8ced8"/>
        <function-ref name="setSource" scoped="" ref="0xb6d97010"/>
        <function-ref name="setDestination" scoped="" ref="0xb6d970f0"/>
        <function-ref name="setGroup" scoped="" ref="0xb6d971d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlottedCollisionConfig" ref="0xb6da2040" loc="49:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlottedCollisionConfig" scoped="" ref="0xb6da2040"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getInitialDelay" scoped="" ref="0xb6da2218"/>
        <function-ref name="getScheduleExponent" scoped="" ref="0xb6da22f8"/>
        <function-ref name="getCollisionWindowLength" scoped="" ref="0xb6da23d8"/>
        <function-ref name="getTransmitTime" scoped="" ref="0xb6da24b8"/>
        <function-ref name="getCollisionWindowStart" scoped="" ref="0xb6da2598"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0xb6d77830" loc="61:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6d77830"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6d77a08"/>
        <function-ref name="wait" scoped="" ref="0xb6d77ae8"/>
        <function-ref name="cancel" scoped="" ref="0xb6d77bc8"/>
        <function-ref name="isFree" scoped="" ref="0xb6d77ca8"/>
        <function-ref name="getNow" scoped="" ref="0xb6d77d88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RF230Packet" ref="0xb6d739d0" loc="62:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230Packet" scoped="" ref="0xb6d739d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6d73ba8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6d73c88"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6d73d68"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6d73e48"/>
        <function-ref name="headerLength" scoped="" ref="0xb6d73f28"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6d79018"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0xb6d793a8" loc="64:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6d793a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6d79f28"/>
        <function-ref name="clear" scoped="" ref="0xb6d762e8"/>
        <function-ref name="isValid" scoped="" ref="0xb6d79b78"/>
        <function-ref name="set" scoped="" ref="0xb6d76698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RF230DriverConfig" ref="0xb6da0120" loc="43:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230DriverConfig" scoped="" ref="0xb6da0120"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6da02f8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6da03d8"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6da04b8"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0xb6da0598"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0xb6da0678"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaConfig" ref="0xb6da3838" loc="46:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaConfig" scoped="" ref="0xb6da3838"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="requiresSoftwareCCA" scoped="" ref="0xb6da3a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareAckConfig" ref="0xb6d9b250" loc="44:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareAckConfig" scoped="" ref="0xb6d9b250"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0xb6d9b428"/>
        <function-ref name="createAckPacket" scoped="" ref="0xb6d9b508"/>
        <function-ref name="requiresAckWait" scoped="" ref="0xb6d9b5e8"/>
        <function-ref name="isAckPacket" scoped="" ref="0xb6d9b6c8"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0xb6d9b7a8"/>
        <function-ref name="getAckTimeout" scoped="" ref="0xb6d9b888"/>
        <function-ref name="setAckRequired" scoped="" ref="0xb6d9b968"/>
        <function-ref name="requiresAckReply" scoped="" ref="0xb6d9ba48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0xb6d7b3a8" loc="60:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6d7b3a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0xb6d7b580"/>
        <function-ref name="getDSN" scoped="" ref="0xb6d7b660"/>
        <function-ref name="setFCF" scoped="" ref="0xb6d7b740"/>
        <function-ref name="isAckFrame" scoped="" ref="0xb6d7b820"/>
        <function-ref name="setSrcAddr" scoped="" ref="0xb6d7b900"/>
        <function-ref name="createDataFrame" scoped="" ref="0xb6d7b9e0"/>
        <function-ref name="setDSN" scoped="" ref="0xb6d7bac0"/>
        <function-ref name="createAckReply" scoped="" ref="0xb6d7bba0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0xb6d7bc80"/>
        <function-ref name="isDataFrame" scoped="" ref="0xb6d7bd60"/>
        <function-ref name="getAckRequired" scoped="" ref="0xb6d7be40"/>
        <function-ref name="verifyAckReply" scoped="" ref="0xb6d7bf20"/>
        <function-ref name="localAddr" scoped="" ref="0xb6d90018"/>
        <function-ref name="requiresAckWait" scoped="" ref="0xb6d90178"/>
        <function-ref name="localPan" scoped="" ref="0xb6d90258"/>
        <function-ref name="setDestAddr" scoped="" ref="0xb6d90338"/>
        <function-ref name="createAckFrame" scoped="" ref="0xb6d90418"/>
        <function-ref name="setFramePending" scoped="" ref="0xb6d904f8"/>
        <function-ref name="setDestPan" scoped="" ref="0xb6d905d8"/>
        <function-ref name="isForMe" scoped="" ref="0xb6d906b8"/>
        <function-ref name="setAckRequired" scoped="" ref="0xb6d90798"/>
        <function-ref name="getFCF" scoped="" ref="0xb6d90878"/>
        <function-ref name="requiresAckReply" scoped="" ref="0xb6d90958"/>
        <function-ref name="getDestAddr" scoped="" ref="0xb6d90a38"/>
        <function-ref name="getFramePending" scoped="" ref="0xb6d90b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UniqueConfig" ref="0xb6d988f8" loc="45:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0xb6d988f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6d98ad0"/>
        <function-ref name="reportChannelError" scoped="" ref="0xb6d98bb0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6d98c90"/>
        <function-ref name="getSender" scoped="" ref="0xb6d98d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RandomCollisionConfig" ref="0xb6d936d8" loc="48:../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RandomCollisionConfig" scoped="" ref="0xb6d936d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0xb6d938b0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0xb6d93990"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0xb6d93a70"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0xb6d93b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0xb6d3fb78" loc="41:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6d3fb78"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6d3fd60"/>
        <function-ref name="wait" scoped="" ref="0xb6d3fe40"/>
        <function-ref name="cancel" scoped="" ref="0xb6d3ff20"/>
        <function-ref name="isFree" scoped="" ref="0xb6d3e018"/>
        <function-ref name="getNow" scoped="" ref="0xb6d3e0f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0xb6d3ea00" loc="47:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb6d3ea00"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0xb73767d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0xb73767d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0xb718f048"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6d26010"/>
        <function-ref name="fired" scoped="" ref="0xb6d27718"/>
        <function-ref name="startAt" scoped="" ref="0xb6d27c08"/>
        <function-ref name="isRunning" scoped="" ref="0xb6d27990"/>
        <function-ref name="getAlarm" scoped="" ref="0xb6d26288"/>
        <function-ref name="start" scoped="" ref="0xb6d27200"/>
        <function-ref name="stop" scoped="" ref="0xb6d274a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0xb6d3e268" loc="46:../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb6d3e268"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb6d3e440"/>
        <function-ref name="suspend" scoped="" ref="0xb6d3e520"/>
        <function-ref name="resume" scoped="" ref="0xb6d3e600"/>
        <function-ref name="run" scoped="" ref="0xb6d3e6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0xb6081f08" loc="54:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6081f08"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb607f108"/>
        <function-ref name="wait" scoped="" ref="0xb607f1e8"/>
        <function-ref name="cancel" scoped="" ref="0xb607f2c8"/>
        <function-ref name="isFree" scoped="" ref="0xb607f3a8"/>
        <function-ref name="getNow" scoped="" ref="0xb607f488"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0xb607f718" loc="59:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb607f718"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0xb718f048"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb607ebd8"/>
        <function-ref name="fired" scoped="" ref="0xb607e3a8"/>
        <function-ref name="startAt" scoped="" ref="0xb607e898"/>
        <function-ref name="isRunning" scoped="" ref="0xb607e620"/>
        <function-ref name="getAlarm" scoped="" ref="0xb607ee50"/>
        <function-ref name="start" scoped="" ref="0xb607fe68"/>
        <function-ref name="stop" scoped="" ref="0xb607e130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0xb607c070" loc="60:../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb607c070"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb607c248"/>
        <function-ref name="suspend" scoped="" ref="0xb607c328"/>
        <function-ref name="resume" scoped="" ref="0xb607c408"/>
        <function-ref name="run" scoped="" ref="0xb607c4e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6cbd7a8" loc="54:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6cbd7a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6cbd980"/>
        <function-ref name="cancel" scoped="" ref="0xb6cbda60"/>
        <function-ref name="sendDone" scoped="" ref="0xb6cbdb40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6cbdca0" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6cbdca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6cbde78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0xb6cbf468" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0xb6cbf468"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6cbf650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6cc1d98" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6cc1d98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6cc0010"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6cc00f0"/>
        <function-ref name="getPayload" scoped="" ref="0xb6cc01d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6cc02b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6cc0390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb6cc0568" loc="41:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb6cc0568"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6cc0750"/>
        <function-ref name="getPayload" scoped="" ref="0xb6cc0830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6cc0910"/>
        <function-ref name="cancel" scoped="" ref="0xb6cc09f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6cc0ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6cbf0a8" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6cbf0a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6cbf290"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6cbd010" loc="53:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6cbd010"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6cbd1e8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6cbd2c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6cbd3a8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6cbd488"/>
        <function-ref name="headerLength" scoped="" ref="0xb6cbd568"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6cbd648"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6cbc010" loc="56:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6cbc010"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6cbc1e8"/>
        <function-ref name="checkFrame" scoped="" ref="0xb6cbc2c8"/>
        <function-ref name="source" scoped="" ref="0xb6cbc3a8"/>
        <function-ref name="destination" scoped="" ref="0xb6cbc488"/>
        <function-ref name="setSource" scoped="" ref="0xb6cbc568"/>
        <function-ref name="setDestination" scoped="" ref="0xb6cbc648"/>
        <function-ref name="setGroup" scoped="" ref="0xb6cbc728"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6cc0ca8" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6cc0ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6cc0e90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveDefault" ref="0xb6cbf848" loc="47:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveDefault" scoped="" ref="0xb6cbf848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6cbfa30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb6cc11c0" loc="39:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb6cc11c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6cc1398"/>
        <function-ref name="source" scoped="" ref="0xb6cc1478"/>
        <function-ref name="address" scoped="" ref="0xb6cc1558"/>
        <function-ref name="destination" scoped="" ref="0xb6cc1638"/>
        <function-ref name="setSource" scoped="" ref="0xb6cc1718"/>
        <function-ref name="setDestination" scoped="" ref="0xb6cc17f8"/>
        <function-ref name="type" scoped="" ref="0xb6cc18d8"/>
        <function-ref name="setType" scoped="" ref="0xb6cc19b8"/>
        <function-ref name="isForMe" scoped="" ref="0xb6cc1a98"/>
        <function-ref name="setGroup" scoped="" ref="0xb6cc1b78"/>
        <function-ref name="localGroup" scoped="" ref="0xb6cc1c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SnoopDefault" ref="0xb6cbfc28" loc="48:../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SnoopDefault" scoped="" ref="0xb6cbfc28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6cbfe10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6060ac8" loc="59:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6060ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6060ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb60605d0" loc="58:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb60605d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb60607a8"/>
        <function-ref name="cancel" scoped="" ref="0xb6060888"/>
        <function-ref name="sendDone" scoped="" ref="0xb6060968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0xb6061298" loc="48:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0xb6061298"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6061480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6063c18" loc="44:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6063c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6063df0"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6063ed0"/>
        <function-ref name="getPayload" scoped="" ref="0xb6062010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb60620f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb60621d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb60623a8" loc="45:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb60623a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6062590"/>
        <function-ref name="getPayload" scoped="" ref="0xb6062670"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6062750"/>
        <function-ref name="cancel" scoped="" ref="0xb6062830"/>
        <function-ref name="sendDone" scoped="" ref="0xb6062910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb6062ec8" loc="47:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb6062ec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb60610c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb60748b0" loc="42:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb60748b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6074a88"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6074b68"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6074c48"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6074d28"/>
        <function-ref name="headerLength" scoped="" ref="0xb6074e08"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6074ee8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6060e00" loc="60:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6060e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb605f070"/>
        <function-ref name="checkFrame" scoped="" ref="0xb605f150"/>
        <function-ref name="source" scoped="" ref="0xb605f230"/>
        <function-ref name="destination" scoped="" ref="0xb605f310"/>
        <function-ref name="setSource" scoped="" ref="0xb605f3f0"/>
        <function-ref name="setDestination" scoped="" ref="0xb605f4d0"/>
        <function-ref name="setGroup" scoped="" ref="0xb605f5b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0xb605f6f0" loc="61:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb605f6f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0xb605f8c8"/>
        <function-ref name="changed" scoped="" ref="0xb605f9a8"/>
        <function-ref name="amGroup" scoped="" ref="0xb605fa88"/>
        <function-ref name="setAddress" scoped="" ref="0xb605fb68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6061dd0" loc="57:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6061dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6060010"/>
        <function-ref name="payloadLength" scoped="" ref="0xb60600f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb60601d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb60602b0"/>
        <function-ref name="headerLength" scoped="" ref="0xb6060390"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6060470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6062ae8" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6062ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6062cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveDefault" ref="0xb6061678" loc="51:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveDefault" scoped="" ref="0xb6061678"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6061860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb6063040" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb6063040"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6063218"/>
        <function-ref name="source" scoped="" ref="0xb60632f8"/>
        <function-ref name="address" scoped="" ref="0xb60633d8"/>
        <function-ref name="destination" scoped="" ref="0xb60634b8"/>
        <function-ref name="setSource" scoped="" ref="0xb6063598"/>
        <function-ref name="setDestination" scoped="" ref="0xb6063678"/>
        <function-ref name="type" scoped="" ref="0xb6063758"/>
        <function-ref name="setType" scoped="" ref="0xb6063838"/>
        <function-ref name="isForMe" scoped="" ref="0xb6063918"/>
        <function-ref name="setGroup" scoped="" ref="0xb60639f8"/>
        <function-ref name="localGroup" scoped="" ref="0xb6063ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SnoopDefault" ref="0xb6061a58" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SnoopDefault" scoped="" ref="0xb6061a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6061c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0xb6cd1e38" loc="54:../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb6cd1e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0xb6cce050"/>
        <function-ref name="changed" scoped="" ref="0xb6cce130"/>
        <function-ref name="amGroup" scoped="" ref="0xb6cce210"/>
        <function-ref name="setAddress" scoped="" ref="0xb6cce2f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6cb81a0" loc="44:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6cb81a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6cb8378"/>
        <function-ref name="cancel" scoped="" ref="0xb6cb8458"/>
        <function-ref name="sendDone" scoped="" ref="0xb6cb8538"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0xb6cb8678" loc="45:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6cb8678"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6cb8850"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6cb8930"/>
        <function-ref name="request" scoped="" ref="0xb6cb8a10"/>
        <function-ref name="granted" scoped="" ref="0xb6cb8af0"/>
        <function-ref name="isOwner" scoped="" ref="0xb6cb8bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0xb6cafc60" loc="39:../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0xb6cafc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6cafe38"/>
        <function-ref name="cancel" scoped="" ref="0xb6caff18"/>
        <function-ref name="sendDone" scoped="" ref="0xb6cb8010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb6cab648" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb6cab648"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb6cab830"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb6cab910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb6cabf00" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb6cabf00"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb6c7c108"/>
        <function-ref name="configure" scoped="" ref="0xb6c7c1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb6cacef0" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb6cacef0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6cab0f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6cab1d0"/>
        <function-ref name="request" scoped="" ref="0xb6cab2b0"/>
        <function-ref name="granted" scoped="" ref="0xb6cab390"/>
        <function-ref name="isOwner" scoped="" ref="0xb6cab470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb6caba50" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb6caba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb6cabc28"/>
        <function-ref name="userId" scoped="" ref="0xb6cabd08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6033dc0" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6033dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6030010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0xb6030170" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0xb6030170"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb6030348"/>
        <function-ref name="isEmpty" scoped="" ref="0xb6030428"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb6030508"/>
        <function-ref name="dequeue" scoped="" ref="0xb60305e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb602f8c0" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb602f8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb602faa8"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb602fb88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb602e218" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb602e218"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb602e400"/>
        <function-ref name="configure" scoped="" ref="0xb602e4e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0xb602e640" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb602e640"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb602e818"/>
        <function-ref name="isEmpty" scoped="" ref="0xb602e8f8"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb602e9d8"/>
        <function-ref name="dequeue" scoped="" ref="0xb602eab8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb602f180" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb602f180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb602f368"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb602f448"/>
        <function-ref name="request" scoped="" ref="0xb602f528"/>
        <function-ref name="granted" scoped="" ref="0xb602f608"/>
        <function-ref name="isOwner" scoped="" ref="0xb602f6e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb602fcc8" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb602fcc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb602fea0"/>
        <function-ref name="userId" scoped="" ref="0xb602e010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0xb602ec38" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0xb602ec38"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb602ee10"/>
        <function-ref name="runTask" scoped="" ref="0xb602eef0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6c5c250" loc="49:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6c5c250"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6c5c428"/>
        <function-ref name="cancel" scoped="" ref="0xb6c5c508"/>
        <function-ref name="sendDone" scoped="" ref="0xb6c5c5e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6c5c748" loc="50:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6c5c748"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6c5c920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0xb6c7ace8" loc="42:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0xb6c7ace8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0xb6c7aec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6c7bc68" loc="39:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6c7bc68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6c7be40"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6c7bf20"/>
        <function-ref name="getPayload" scoped="" ref="0xb6c7a018"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6c7a0f8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6c7a1d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPacket" ref="0xb6c5da30" loc="48:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6c5da30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6c5dc08"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6c5dce8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6c5ddc8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6c5dea8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6c5c010"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6c5c0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0xb6c5e070" loc="47:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6c5e070"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0xb6c5e248"/>
        <function-ref name="getDSN" scoped="" ref="0xb6c5e328"/>
        <function-ref name="setFCF" scoped="" ref="0xb6c5e408"/>
        <function-ref name="isAckFrame" scoped="" ref="0xb6c5e4e8"/>
        <function-ref name="setSrcAddr" scoped="" ref="0xb6c5e5c8"/>
        <function-ref name="createDataFrame" scoped="" ref="0xb6c5e6a8"/>
        <function-ref name="setDSN" scoped="" ref="0xb6c5e788"/>
        <function-ref name="createAckReply" scoped="" ref="0xb6c5e868"/>
        <function-ref name="getSrcAddr" scoped="" ref="0xb6c5e948"/>
        <function-ref name="isDataFrame" scoped="" ref="0xb6c5ea28"/>
        <function-ref name="getAckRequired" scoped="" ref="0xb6c5eb08"/>
        <function-ref name="verifyAckReply" scoped="" ref="0xb6c5ebe8"/>
        <function-ref name="localAddr" scoped="" ref="0xb6c5ecc8"/>
        <function-ref name="requiresAckWait" scoped="" ref="0xb6c5ee28"/>
        <function-ref name="localPan" scoped="" ref="0xb6c5ef08"/>
        <function-ref name="setDestAddr" scoped="" ref="0xb6c5d010"/>
        <function-ref name="createAckFrame" scoped="" ref="0xb6c5d0f0"/>
        <function-ref name="setFramePending" scoped="" ref="0xb6c5d1d0"/>
        <function-ref name="setDestPan" scoped="" ref="0xb6c5d2b0"/>
        <function-ref name="isForMe" scoped="" ref="0xb6c5d390"/>
        <function-ref name="setAckRequired" scoped="" ref="0xb6c5d470"/>
        <function-ref name="getFCF" scoped="" ref="0xb6c5d550"/>
        <function-ref name="requiresAckReply" scoped="" ref="0xb6c5d630"/>
        <function-ref name="getDestAddr" scoped="" ref="0xb6c5d710"/>
        <function-ref name="getFramePending" scoped="" ref="0xb6c5d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0xb6c7a318" loc="40:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0xb6c7a318"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6c7a4f0"/>
        <function-ref name="getPayload" scoped="" ref="0xb6c7a5d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6c7a6b0"/>
        <function-ref name="cancel" scoped="" ref="0xb6c7a790"/>
        <function-ref name="sendDone" scoped="" ref="0xb6c7a870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0xb6c7a9d0" loc="41:../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0xb6c7a9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6c7aba8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6c39050" loc="69:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6c39050"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6c39228"/>
        <function-ref name="cancel" scoped="" ref="0xb6c39308"/>
        <function-ref name="sendDone" scoped="" ref="0xb6c393e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6c39548" loc="70:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6c39548"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6c39720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0xb6c57880" loc="57:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0xb6c57880"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6c57a58"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6c57b38"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6c57c18"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6c57cf8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6c57dd8"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6c57eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosReceive" ref="0xb6c3a528" loc="62:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosReceive" scoped="" ref="0xb6c3a528"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6c3a700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6c39880" loc="71:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6c39880"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6c39a58"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6c39b38"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6c39c18"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6c39cf8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6c39dd8"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6c39eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosSend" ref="0xb6c3a030" loc="61:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosSend" scoped="" ref="0xb6c3a030"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6c3a208"/>
        <function-ref name="cancel" scoped="" ref="0xb6c3a2e8"/>
        <function-ref name="sendDone" scoped="" ref="0xb6c3a3c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0xb6c57050" loc="55:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0xb6c57050"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6c57228"/>
        <function-ref name="cancel" scoped="" ref="0xb6c57308"/>
        <function-ref name="sendDone" scoped="" ref="0xb6c573e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0xb6c57548" loc="56:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0xb6c57548"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6c57720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosPacket" ref="0xb6c3a860" loc="63:../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosPacket" scoped="" ref="0xb6c3a860"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6c3aa38"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6c3ab18"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6c3abf8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6c3acd8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6c3adb8"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6c3ae98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6bdec70" loc="48:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6bdec70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6bdee48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0xb6be0f10" loc="40:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0xb6be0f10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0xb6bdf108"/>
        <function-ref name="address" scoped="" ref="0xb6bdf1e8"/>
        <function-ref name="destination" scoped="" ref="0xb6bdf2c8"/>
        <function-ref name="setSource" scoped="" ref="0xb6bdf3a8"/>
        <function-ref name="setDestination" scoped="" ref="0xb6bdf488"/>
        <function-ref name="pan" scoped="" ref="0xb6bdf568"/>
        <function-ref name="setPan" scoped="" ref="0xb6bdf648"/>
        <function-ref name="isForMe" scoped="" ref="0xb6bdf728"/>
        <function-ref name="localPan" scoped="" ref="0xb6bdf808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6bdf948" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6bdf948"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6bdfb20"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6bdfc00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6bdfce0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6bdfdc0"/>
        <function-ref name="headerLength" scoped="" ref="0xb6bdfea0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6bde010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0xb6be1530" loc="39:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb6be1530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0xb6be1708"/>
        <function-ref name="getDSN" scoped="" ref="0xb6be17e8"/>
        <function-ref name="setFCF" scoped="" ref="0xb6be18c8"/>
        <function-ref name="isAckFrame" scoped="" ref="0xb6be19a8"/>
        <function-ref name="setSrcAddr" scoped="" ref="0xb6be1a88"/>
        <function-ref name="createDataFrame" scoped="" ref="0xb6be1b68"/>
        <function-ref name="setDSN" scoped="" ref="0xb6be1c48"/>
        <function-ref name="createAckReply" scoped="" ref="0xb6be1d28"/>
        <function-ref name="getSrcAddr" scoped="" ref="0xb6be1e08"/>
        <function-ref name="isDataFrame" scoped="" ref="0xb6be1ee8"/>
        <function-ref name="getAckRequired" scoped="" ref="0xb6be0010"/>
        <function-ref name="verifyAckReply" scoped="" ref="0xb6be00f0"/>
        <function-ref name="localAddr" scoped="" ref="0xb6be01d0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0xb6be0330"/>
        <function-ref name="localPan" scoped="" ref="0xb6be0410"/>
        <function-ref name="setDestAddr" scoped="" ref="0xb6be04f0"/>
        <function-ref name="createAckFrame" scoped="" ref="0xb6be05d0"/>
        <function-ref name="setFramePending" scoped="" ref="0xb6be06b0"/>
        <function-ref name="setDestPan" scoped="" ref="0xb6be0790"/>
        <function-ref name="isForMe" scoped="" ref="0xb6be0870"/>
        <function-ref name="setAckRequired" scoped="" ref="0xb6be0950"/>
        <function-ref name="getFCF" scoped="" ref="0xb6be0a30"/>
        <function-ref name="requiresAckReply" scoped="" ref="0xb6be0b10"/>
        <function-ref name="getDestAddr" scoped="" ref="0xb6be0bf0"/>
        <function-ref name="getFramePending" scoped="" ref="0xb6be0cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6bde4d8" loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6bde4d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6bde6b0"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6bde790"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6bde870"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6bde950"/>
        <function-ref name="headerLength" scoped="" ref="0xb6bdea30"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6bdeb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6bde170" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6bde170"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6bde348"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb5ff27a8" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb5ff27a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb5ff2980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0xb5ff44f0" loc="42:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0xb5ff44f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0xb5ff46c8"/>
        <function-ref name="address" scoped="" ref="0xb5ff47a8"/>
        <function-ref name="destination" scoped="" ref="0xb5ff4888"/>
        <function-ref name="setSource" scoped="" ref="0xb5ff4968"/>
        <function-ref name="setDestination" scoped="" ref="0xb5ff4a48"/>
        <function-ref name="pan" scoped="" ref="0xb5ff4b28"/>
        <function-ref name="setPan" scoped="" ref="0xb5ff4c08"/>
        <function-ref name="isForMe" scoped="" ref="0xb5ff4ce8"/>
        <function-ref name="localPan" scoped="" ref="0xb5ff4dc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb5ff4f08" loc="43:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb5ff4f08"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5ff30f0"/>
        <function-ref name="payloadLength" scoped="" ref="0xb5ff31d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5ff32b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb5ff3390"/>
        <function-ref name="headerLength" scoped="" ref="0xb5ff3470"/>
        <function-ref name="metadataLength" scoped="" ref="0xb5ff3550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0xb5ffb9f0" loc="41:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0xb5ffb9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0xb5ffbbc8"/>
        <function-ref name="getDSN" scoped="" ref="0xb5ffbca8"/>
        <function-ref name="setFCF" scoped="" ref="0xb5ffbd88"/>
        <function-ref name="isAckFrame" scoped="" ref="0xb5ffbe68"/>
        <function-ref name="setSrcAddr" scoped="" ref="0xb5ff5010"/>
        <function-ref name="createDataFrame" scoped="" ref="0xb5ff50f0"/>
        <function-ref name="setDSN" scoped="" ref="0xb5ff51d0"/>
        <function-ref name="createAckReply" scoped="" ref="0xb5ff52b0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0xb5ff5390"/>
        <function-ref name="isDataFrame" scoped="" ref="0xb5ff5470"/>
        <function-ref name="getAckRequired" scoped="" ref="0xb5ff5550"/>
        <function-ref name="verifyAckReply" scoped="" ref="0xb5ff5630"/>
        <function-ref name="localAddr" scoped="" ref="0xb5ff5710"/>
        <function-ref name="requiresAckWait" scoped="" ref="0xb5ff5870"/>
        <function-ref name="localPan" scoped="" ref="0xb5ff5950"/>
        <function-ref name="setDestAddr" scoped="" ref="0xb5ff5a30"/>
        <function-ref name="createAckFrame" scoped="" ref="0xb5ff5b10"/>
        <function-ref name="setFramePending" scoped="" ref="0xb5ff5bf0"/>
        <function-ref name="setDestPan" scoped="" ref="0xb5ff5cd0"/>
        <function-ref name="isForMe" scoped="" ref="0xb5ff5db0"/>
        <function-ref name="setAckRequired" scoped="" ref="0xb5ff5e90"/>
        <function-ref name="getFCF" scoped="" ref="0xb5ff4010"/>
        <function-ref name="requiresAckReply" scoped="" ref="0xb5ff40f0"/>
        <function-ref name="getDestAddr" scoped="" ref="0xb5ff41d0"/>
        <function-ref name="getFramePending" scoped="" ref="0xb5ff42b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0xb5ff39f8" loc="49:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0xb5ff39f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0xb5ff3bd0"/>
        <function-ref name="changed" scoped="" ref="0xb5ff3cb0"/>
        <function-ref name="amGroup" scoped="" ref="0xb5ff3d90"/>
        <function-ref name="setAddress" scoped="" ref="0xb5ff3e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb5ff36b0" loc="44:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb5ff36b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb5ff3888"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb5ff2010" loc="50:../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb5ff2010"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5ff21e8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb5ff22c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5ff23a8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb5ff2488"/>
        <function-ref name="headerLength" scoped="" ref="0xb5ff2568"/>
        <function-ref name="metadataLength" scoped="" ref="0xb5ff2648"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6bda678" loc="45:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6bda678"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6bda850"/>
        <function-ref name="cancel" scoped="" ref="0xb6bda930"/>
        <function-ref name="sendDone" scoped="" ref="0xb6bdaa10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6bdab70" loc="46:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6bdab70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6bdad48"/>
        <function-ref name="header" scoped="" ref="0xb6bdae28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6bdbd18" loc="40:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6bdbd18"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6bdbef0"/>
        <function-ref name="cancel" scoped="" ref="0xb6bda010"/>
        <function-ref name="sendDone" scoped="" ref="0xb6bda0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6b9f010" loc="48:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6b9f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb6b9f1e8"/>
        <function-ref name="reportChannelError" scoped="" ref="0xb6b9f2c8"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb6b9f3a8"/>
        <function-ref name="getSender" scoped="" ref="0xb6b9f488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6bda230" loc="41:../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6bda230"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6bda408"/>
        <function-ref name="header" scoped="" ref="0xb6bda4e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb5fc6770" loc="50:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb5fc6770"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5fc6948"/>
        <function-ref name="cancel" scoped="" ref="0xb5fc6a28"/>
        <function-ref name="sendDone" scoped="" ref="0xb5fc6b08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb5fc6c68" loc="51:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb5fc6c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb5fc6e40"/>
        <function-ref name="header" scoped="" ref="0xb5fc6f20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0xb5fc5cc8" loc="55:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb5fc5cc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5fc5ea0"/>
        <function-ref name="clearAll" scoped="" ref="0xb5fc3010"/>
        <function-ref name="get" scoped="" ref="0xb5fc30f0"/>
        <function-ref name="set" scoped="" ref="0xb5fc31d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb5fc9b18" loc="42:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb5fc9b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5fc9cf0"/>
        <function-ref name="cancel" scoped="" ref="0xb5fc9dd0"/>
        <function-ref name="sendDone" scoped="" ref="0xb5fc9eb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0xb5fc5630" loc="54:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0xb5fc5630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0xb5fc5808"/>
        <function-ref name="insertNode" scoped="" ref="0xb5fc58e8"/>
        <function-ref name="getNode" scoped="" ref="0xb5fc59c8"/>
        <function-ref name="evicted" scoped="" ref="0xb5fc5aa8"/>
        <function-ref name="getIndex" scoped="" ref="0xb5fc5b88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb5fc6010" loc="43:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb5fc6010"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb5fc61e8"/>
        <function-ref name="header" scoped="" ref="0xb5fc62c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5fc6408" loc="45:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5fc6408"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5fc65e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UniqueConfig" ref="0xb5fc5078" loc="53:../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0xb5fc5078"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb5fc5250"/>
        <function-ref name="reportChannelError" scoped="" ref="0xb5fc5330"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb5fc5410"/>
        <function-ref name="getSender" scoped="" ref="0xb5fc54f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0xb6bbb010" loc="37:../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0xb6bbb010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0xb6bbb1e8"/>
        <function-ref name="insertNode" scoped="" ref="0xb6bbb2c8"/>
        <function-ref name="getNode" scoped="" ref="0xb6bbb3a8"/>
        <function-ref name="evicted" scoped="" ref="0xb6bbb488"/>
        <function-ref name="getIndex" scoped="" ref="0xb6bbb568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0xb6bb8a38" loc="43:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb6bb8a38"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6bb8c10"/>
        <function-ref name="clearAll" scoped="" ref="0xb6bb8cf0"/>
        <function-ref name="get" scoped="" ref="0xb6bb8dd0"/>
        <function-ref name="set" scoped="" ref="0xb6bb8eb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0xb6bb8010" loc="42:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0xb6bb8010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0xb6bb81e8"/>
        <function-ref name="insertNode" scoped="" ref="0xb6bb82c8"/>
        <function-ref name="getNode" scoped="" ref="0xb6bb83a8"/>
        <function-ref name="evicted" scoped="" ref="0xb6bb8488"/>
        <function-ref name="getIndex" scoped="" ref="0xb6bb8568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6bbbbd0" loc="41:../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6bbbbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6bbbda8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0xb5fc21b0" loc="37:../../tos/lib/rfxlink/util/NeighborhoodFlagC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.NeighborhoodFlagC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0xb5fc21b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5fc2388"/>
        <function-ref name="clearAll" scoped="" ref="0xb5fc2468"/>
        <function-ref name="get" scoped="" ref="0xb5fc2548"/>
        <function-ref name="set" scoped="" ref="0xb5fc2628"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6b9ce70" loc="85:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6b9ce70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b96070"/>
        <function-ref name="cancel" scoped="" ref="0xb6b96150"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b96230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6b96390" loc="86:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6b96390"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b96568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedPacketAcks" ref="0xb6b95a68" loc="93:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0xb6b95a68"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6b95c40"/>
        <function-ref name="noAck" scoped="" ref="0xb6b95d20"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6b95e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6b9d760" loc="77:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6b9d760"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b9d938"/>
        <function-ref name="cancel" scoped="" ref="0xb6b9da18"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b9daf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6b9c6a8" loc="80:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6b9c6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6b9c880"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6b9c960"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6b9ca40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6b9cb20"/>
        <function-ref name="headerLength" scoped="" ref="0xb6b9cc00"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6b9cce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6b966c8" loc="87:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6b966c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6b968a0"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6b96980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6b96a60"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6b96b40"/>
        <function-ref name="headerLength" scoped="" ref="0xb6b96c20"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6b96d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UnconnectedPacketLink" ref="0xb6b95390" loc="92:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketLink" scoped="" ref="0xb6b95390"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0xb6b95568"/>
        <function-ref name="setRetries" scoped="" ref="0xb6b95648"/>
        <function-ref name="getRetries" scoped="" ref="0xb6b95728"/>
        <function-ref name="setRetryDelay" scoped="" ref="0xb6b95808"/>
        <function-ref name="wasDelivered" scoped="" ref="0xb6b958e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6b9dc58" loc="78:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6b9dc58"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b9de30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0xb6b96e40" loc="88:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6b96e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6b95050"/>
        <function-ref name="noAck" scoped="" ref="0xb6b95130"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6b95210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0xb6b9c010" loc="79:../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0xb6b9c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0xb6b9c1e8"/>
        <function-ref name="setRetries" scoped="" ref="0xb6b9c2c8"/>
        <function-ref name="getRetries" scoped="" ref="0xb6b9c3a8"/>
        <function-ref name="setRetryDelay" scoped="" ref="0xb6b9c488"/>
        <function-ref name="wasDelivered" scoped="" ref="0xb6b9c568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6b91728" loc="39:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6b91728"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6b91900"/>
        <function-ref name="stopDone" scoped="" ref="0xb6b919e0"/>
        <function-ref name="start" scoped="" ref="0xb6b91ac0"/>
        <function-ref name="stop" scoped="" ref="0xb6b91ba0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6b84938" loc="49:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6b84938"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b84b10"/>
        <function-ref name="cancel" scoped="" ref="0xb6b84bf0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b84cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6b84e30" loc="50:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6b84e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b83050"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6b91d00" loc="40:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6b91d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b91ed8"/>
        <function-ref name="cancel" scoped="" ref="0xb6b90010"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b900f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6b90568" loc="42:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6b90568"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6b90740"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6b90820"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6b90900"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6b909e0"/>
        <function-ref name="headerLength" scoped="" ref="0xb6b90ac0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6b90ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0xb6b90ce0" loc="44:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0xb6b90ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0xb6b90eb8"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0xb6b84010"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0xb6b840f0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0xb6b841d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0xb6b84360" loc="48:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0xb6b84360"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6b84538"/>
        <function-ref name="stopDone" scoped="" ref="0xb6b84618"/>
        <function-ref name="start" scoped="" ref="0xb6b846f8"/>
        <function-ref name="stop" scoped="" ref="0xb6b847d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6b90250" loc="41:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6b90250"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b90428"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6b831b0" loc="51:../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6b831b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6b83388"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6b83468"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6b83548"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6b83628"/>
        <function-ref name="headerLength" scoped="" ref="0xb6b83708"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6b837e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0xb5fb2b68" loc="37:../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0xb5fb2b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0xb5fb2d40"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0xb5fb2e20"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0xb5fb2f00"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0xb5fae010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6b7fd20" loc="39:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6b7fd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6b7fef8"/>
        <function-ref name="stopDone" scoped="" ref="0xb6b7e010"/>
        <function-ref name="start" scoped="" ref="0xb6b7e0f0"/>
        <function-ref name="stop" scoped="" ref="0xb6b7e1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0xb6b42628" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0xb6b42628"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6b42800"/>
        <function-ref name="turnOn" scoped="" ref="0xb6b428e0"/>
        <function-ref name="setChannel" scoped="" ref="0xb6b429c0"/>
        <function-ref name="done" scoped="" ref="0xb6b42aa0"/>
        <function-ref name="standby" scoped="" ref="0xb6b42b80"/>
        <function-ref name="getChannel" scoped="" ref="0xb6b42c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6b7e330" loc="40:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6b7e330"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b7e508"/>
        <function-ref name="cancel" scoped="" ref="0xb6b7e5e8"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b7e6c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0xb6b41310" loc="49:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6b41310"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b414e8"/>
        <function-ref name="header" scoped="" ref="0xb6b415c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6b7e828" loc="41:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6b7e828"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b7ea00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0xb6b42da0" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6b42da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b41010"/>
        <function-ref name="ready" scoped="" ref="0xb6b410f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b411d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0xb6b7eb40" loc="42:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0xb6b7eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0xb6b7ed18"/>
        <function-ref name="setChannel" scoped="" ref="0xb6b7edf8"/>
        <function-ref name="getChannel" scoped="" ref="0xb6b7eed8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0xb6b42070" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb6b42070"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb6b42248"/>
        <function-ref name="suspend" scoped="" ref="0xb6b42328"/>
        <function-ref name="resume" scoped="" ref="0xb6b42408"/>
        <function-ref name="run" scoped="" ref="0xb6b424e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb5fadee0" loc="43:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb5fadee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb5faa0e0"/>
        <function-ref name="stopDone" scoped="" ref="0xb5faa1c0"/>
        <function-ref name="start" scoped="" ref="0xb5faa2a0"/>
        <function-ref name="stop" scoped="" ref="0xb5faa380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0xb5faa4e0" loc="44:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0xb5faa4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5faa6b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0xb5fa9548" loc="52:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0xb5fa9548"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb5fa9720"/>
        <function-ref name="turnOn" scoped="" ref="0xb5fa9800"/>
        <function-ref name="setChannel" scoped="" ref="0xb5fa98e0"/>
        <function-ref name="done" scoped="" ref="0xb5fa99c0"/>
        <function-ref name="standby" scoped="" ref="0xb5fa9aa0"/>
        <function-ref name="getChannel" scoped="" ref="0xb5fa9b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb5faa818" loc="46:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb5faa818"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5faa9f0"/>
        <function-ref name="cancel" scoped="" ref="0xb5faaad0"/>
        <function-ref name="sendDone" scoped="" ref="0xb5faabb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0xb5fa6080" loc="189:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0xb5fa6080"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb5fa6258"/>
        <function-ref name="runTask" scoped="" ref="0xb5fa6338"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0xb5fa87e8" loc="55:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb5fa87e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb5fa89c0"/>
        <function-ref name="header" scoped="" ref="0xb5fa8aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stateDoneTask" ref="0xb5fa64b8" loc="144:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stateDoneTask" scoped="" ref="0xb5fa64b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb5fa6690"/>
        <function-ref name="runTask" scoped="" ref="0xb5fa6770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb5faad10" loc="47:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb5faad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb5faaee8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="deliverTask" ref="0xb5fa8c20" loc="322:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="deliverTask" scoped="" ref="0xb5fa8c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb5fa8df8"/>
        <function-ref name="runTask" scoped="" ref="0xb5fa8ed8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0xb5fa8310" loc="54:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb5fa8310"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5fa84e8"/>
        <function-ref name="ready" scoped="" ref="0xb5fa85c8"/>
        <function-ref name="sendDone" scoped="" ref="0xb5fa86a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0xb5fa9040" loc="48:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0xb5fa9040"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0xb5fa9218"/>
        <function-ref name="setChannel" scoped="" ref="0xb5fa92f8"/>
        <function-ref name="getChannel" scoped="" ref="0xb5fa93d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0xb5fa9cc0" loc="53:../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb5fa9cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb5fa9e98"/>
        <function-ref name="suspend" scoped="" ref="0xb5fa8010"/>
        <function-ref name="resume" scoped="" ref="0xb5fa80f0"/>
        <function-ref name="run" scoped="" ref="0xb5fa81d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6b3d930" loc="44:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6b3d930"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b3db08"/>
        <function-ref name="ready" scoped="" ref="0xb6b3dbe8"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b3dcc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6b3de28" loc="45:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6b3de28"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b1c050"/>
        <function-ref name="header" scoped="" ref="0xb6b1c130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0xb6b1c270" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6b1c270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6b1c448"/>
        <function-ref name="wait" scoped="" ref="0xb6b1c528"/>
        <function-ref name="cancel" scoped="" ref="0xb6b1c608"/>
        <function-ref name="isFree" scoped="" ref="0xb6b1c6e8"/>
        <function-ref name="getNow" scoped="" ref="0xb6b1c7c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6b1c928" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6b1c928"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0xb6b1cb00"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0xb6b1cbe0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0xb6b1ccc0"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0xb6b1cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6b3d4e8" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6b3d4e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b3d6c0"/>
        <function-ref name="header" scoped="" ref="0xb6b3d7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb6b3d010" loc="39:../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6b3d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b3d1e8"/>
        <function-ref name="ready" scoped="" ref="0xb6b3d2c8"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b3d3a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb5f884b8" loc="47:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb5f884b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5f88690"/>
        <function-ref name="ready" scoped="" ref="0xb5f88770"/>
        <function-ref name="sendDone" scoped="" ref="0xb5f88850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb5f889b0" loc="48:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb5f889b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb5f88b88"/>
        <function-ref name="header" scoped="" ref="0xb5f88c68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0xb5f88da8" loc="49:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb5f88da8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb5f87010"/>
        <function-ref name="wait" scoped="" ref="0xb5f870f0"/>
        <function-ref name="cancel" scoped="" ref="0xb5f871d0"/>
        <function-ref name="isFree" scoped="" ref="0xb5f872b0"/>
        <function-ref name="getNow" scoped="" ref="0xb5f87390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0xb5f874d0" loc="50:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0xb5f874d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0xb5f876a8"/>
        <function-ref name="rand32" scoped="" ref="0xb5f87788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb5f878e8" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb5f878e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0xb5f87ac0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0xb5f87ba0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0xb5f87c80"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0xb5f87d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb5f88070" loc="43:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb5f88070"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb5f88248"/>
        <function-ref name="header" scoped="" ref="0xb5f88328"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb5f8bb78" loc="42:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb5f8bb78"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5f8bd50"/>
        <function-ref name="ready" scoped="" ref="0xb5f8be30"/>
        <function-ref name="sendDone" scoped="" ref="0xb5f8bf10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="calcNextRandom" ref="0xb5f87ee0" loc="78:../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="calcNextRandom" scoped="" ref="0xb5f87ee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb5f860e0"/>
        <function-ref name="runTask" scoped="" ref="0xb5f861c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0xb6b1b478" loc="46:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0xb6b1b478"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0xb6b1b650"/>
        <function-ref name="rand32" scoped="" ref="0xb6b1b730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0xb6b19b58" loc="45:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0xb6b19b58"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6b1b1e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6b1e900" loc="44:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6b1e900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6b1ead8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0xb6b16ec8" loc="48:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0xb6b16ec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0xb6b150c0"/>
        <function-ref name="rand32" scoped="" ref="0xb6b151a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0xb6b16608" loc="47:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0xb6b16608"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6b16c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6b160e8" loc="46:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6b160e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6b162c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6b0bb50" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6b0bb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b0bd28"/>
        <function-ref name="ready" scoped="" ref="0xb6b0be08"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b0bee8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6af2060" loc="50:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6af2060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6af2238"/>
        <function-ref name="header" scoped="" ref="0xb6af2318"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0xb6af2458" loc="51:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6af2458"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6af2630"/>
        <function-ref name="wait" scoped="" ref="0xb6af2710"/>
        <function-ref name="cancel" scoped="" ref="0xb6af27f0"/>
        <function-ref name="isFree" scoped="" ref="0xb6af28d0"/>
        <function-ref name="getNow" scoped="" ref="0xb6af29b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AckReceivedFlag" ref="0xb6af14f0" loc="54:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AckReceivedFlag" scoped="" ref="0xb6af14f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6af16c8"/>
        <function-ref name="get" scoped="" ref="0xb6af17a8"/>
        <function-ref name="setValue" scoped="" ref="0xb6af1888"/>
        <function-ref name="set" scoped="" ref="0xb6af1968"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6af2b10" loc="53:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6af2b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0xb6af2ce8"/>
        <function-ref name="createAckPacket" scoped="" ref="0xb6af2dc8"/>
        <function-ref name="requiresAckWait" scoped="" ref="0xb6af2ea8"/>
        <function-ref name="isAckPacket" scoped="" ref="0xb6af1010"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0xb6af10f0"/>
        <function-ref name="getAckTimeout" scoped="" ref="0xb6af11d0"/>
        <function-ref name="setAckRequired" scoped="" ref="0xb6af12b0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0xb6af1390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6b0b230" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6b0b230"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6b0b408"/>
        <function-ref name="header" scoped="" ref="0xb6b0b4e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb6b0ccf8" loc="42:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6b0ccf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6b0ced0"/>
        <function-ref name="ready" scoped="" ref="0xb6b0b010"/>
        <function-ref name="sendDone" scoped="" ref="0xb6b0b0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0xb6b0b628" loc="44:../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb6b0b628"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6b0b800"/>
        <function-ref name="noAck" scoped="" ref="0xb6b0b8e0"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6b0b9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6aec8a0" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6aec8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6aeca78"/>
        <function-ref name="stopDone" scoped="" ref="0xb6aecb58"/>
        <function-ref name="start" scoped="" ref="0xb6aecc38"/>
        <function-ref name="stop" scoped="" ref="0xb6aecd18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0xb6ae1708" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0xb6ae1708"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0xb6ae18e0"/>
        <function-ref name="request" scoped="" ref="0xb6ae19c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6adfcc8" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6adfcc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6adfea0"/>
        <function-ref name="ready" scoped="" ref="0xb6ade010"/>
        <function-ref name="sendDone" scoped="" ref="0xb6ade0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6ade250" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6ade250"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6ade428"/>
        <function-ref name="header" scoped="" ref="0xb6ade508"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0xb6ae2668" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0xb6ae2668"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6ae2840"/>
        <function-ref name="turnOn" scoped="" ref="0xb6ae2920"/>
        <function-ref name="setChannel" scoped="" ref="0xb6ae2a00"/>
        <function-ref name="done" scoped="" ref="0xb6ae2ae0"/>
        <function-ref name="standby" scoped="" ref="0xb6ae2bc0"/>
        <function-ref name="getChannel" scoped="" ref="0xb6ae2ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6ae1b00" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6ae1b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6ae1cd8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6ae1db8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6ae1e98"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6ae0010"/>
        <function-ref name="headerLength" scoped="" ref="0xb6ae00f0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6ae01d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0xb6adf4b0" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0xb6adf4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6adf708"/>
        <function-ref name="turnOn" scoped="" ref="0xb6adf7e8"/>
        <function-ref name="setChannel" scoped="" ref="0xb6adf8c8"/>
        <function-ref name="done" scoped="" ref="0xb6adf9a8"/>
        <function-ref name="standby" scoped="" ref="0xb6adfa88"/>
        <function-ref name="getChannel" scoped="" ref="0xb6adfb68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0xb6ae0330" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0xb6ae0330"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0xb6ae0508"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6ae1310" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6ae1310"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6ae14e8"/>
        <function-ref name="header" scoped="" ref="0xb6ae15c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0xb6adf178" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0xb6adf178"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6adf350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0xb6ae0698" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0xb6ae0698"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6ae0870"/>
        <function-ref name="stopDone" scoped="" ref="0xb6ae0950"/>
        <function-ref name="start" scoped="" ref="0xb6ae0a30"/>
        <function-ref name="stop" scoped="" ref="0xb6ae0b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6adea80" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6adea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6adec58"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6aded38"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6adee18"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6adeef8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6adc010"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6adc0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0xb6ae2350" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0xb6ae2350"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6ae2528"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6adc250" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6adc250"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0xb6adc428"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0xb6ae0c70" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0xb6ae0c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6ae0e48"/>
        <function-ref name="cancel" scoped="" ref="0xb6ae0f28"/>
        <function-ref name="sendDone" scoped="" ref="0xb6adf018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb6ae2de0" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6ae2de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6ae1010"/>
        <function-ref name="ready" scoped="" ref="0xb6ae10f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6ae11d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0xb6ade668" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0xb6ade668"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0xb6ade840"/>
        <function-ref name="request" scoped="" ref="0xb6ade920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0xb6aece58" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0xb6aece58"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6ae2050"/>
        <function-ref name="cancel" scoped="" ref="0xb6ae2130"/>
        <function-ref name="sendDone" scoped="" ref="0xb6ae2210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0xb6aa3098" loc="50:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0xb6aa3098"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6aa3270"/>
        <function-ref name="get" scoped="" ref="0xb6aa3350"/>
        <function-ref name="setValue" scoped="" ref="0xb6aa3430"/>
        <function-ref name="set" scoped="" ref="0xb6aa3510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6aa67f0" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6aa67f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6aa69c8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6aa6aa8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6aa6b88"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6aa6c68"/>
        <function-ref name="headerLength" scoped="" ref="0xb6aa6d48"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6aa6e28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6aa48f0" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6aa48f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6aa4ac8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6aa4ba8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6aa4c88"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6aa4d68"/>
        <function-ref name="headerLength" scoped="" ref="0xb6aa4e48"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6aa4f28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0xb6aa7180" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb6aa7180"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6aa7c80"/>
        <function-ref name="clear" scoped="" ref="0xb6aa6048"/>
        <function-ref name="isValid" scoped="" ref="0xb6aa78d0"/>
        <function-ref name="set" scoped="" ref="0xb6aa63f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0xb6aa4078" loc="48:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6aa4078"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6aa46c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0xb6ad8998" loc="41:../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb6ad8998"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6aaa4d0"/>
        <function-ref name="clear" scoped="" ref="0xb6aaa880"/>
        <function-ref name="isValid" scoped="" ref="0xb6aaa120"/>
        <function-ref name="set" scoped="" ref="0xb6aaac30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0xb5f5a520" loc="49:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0xb5f5a520"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5f5a6f8"/>
        <function-ref name="get" scoped="" ref="0xb5f5a7d8"/>
        <function-ref name="setValue" scoped="" ref="0xb5f5a8b8"/>
        <function-ref name="set" scoped="" ref="0xb5f5a998"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb5f5cd10" loc="44:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb5f5cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5f5cee8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb5f5a010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5f5a0f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb5f5a1d0"/>
        <function-ref name="headerLength" scoped="" ref="0xb5f5a2b0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb5f5a390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb5f59d38" loc="54:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb5f59d38"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5f59f10"/>
        <function-ref name="payloadLength" scoped="" ref="0xb5f58010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5f580f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb5f581d0"/>
        <function-ref name="headerLength" scoped="" ref="0xb5f582b0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb5f58390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0xb5f5d688" loc="43:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0xb5f5d688"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb5f5c1b8"/>
        <function-ref name="clear" scoped="" ref="0xb5f5c568"/>
        <function-ref name="isValid" scoped="" ref="0xb5f5ddd8"/>
        <function-ref name="set" scoped="" ref="0xb5f5c918"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0xb5f5ab88" loc="51:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0xb5f5ab88"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb5f59200"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0xb5f594c0" loc="52:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0xb5f594c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb5f59b08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0xb5f62e88" loc="42:../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0xb5f62e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb5f5e9b0"/>
        <function-ref name="clear" scoped="" ref="0xb5f5ed60"/>
        <function-ref name="isValid" scoped="" ref="0xb5f5e600"/>
        <function-ref name="set" scoped="" ref="0xb5f5d150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0xb6aac5c8" loc="20:../../tos/system/LocalTimeMilliC.nc">
      <component-ref qname="LocalTimeMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0xb6aac5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6aacc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6aa04a0" loc="43:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6aa04a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6aa0678"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6aa0758"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6aa0838"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6aa0918"/>
        <function-ref name="headerLength" scoped="" ref="0xb6aa09f8"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6aa0ad8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6aa0c68" loc="48:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6aa0c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6aa0e40"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6aa0f20"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6a9f018"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6a9f0f8"/>
        <function-ref name="headerLength" scoped="" ref="0xb6a9f1d8"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6a9f2b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0xb6a8deb8" loc="42:../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0xb6a8deb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6aa00c0"/>
        <function-ref name="get" scoped="" ref="0xb6aa01a0"/>
        <function-ref name="setValue" scoped="" ref="0xb6aa0280"/>
        <function-ref name="set" scoped="" ref="0xb6aa0360"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6a8c450" loc="39:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6a8c450"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6a8c628"/>
        <function-ref name="stopDone" scoped="" ref="0xb6a8c708"/>
        <function-ref name="start" scoped="" ref="0xb6a8c7e8"/>
        <function-ref name="stop" scoped="" ref="0xb6a8c8c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0xb6a8a290" loc="46:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0xb6a8a290"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0xb6a8a468"/>
        <function-ref name="request" scoped="" ref="0xb6a8a548"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb6a88828" loc="59:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb6a88828"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6a88a00"/>
        <function-ref name="ready" scoped="" ref="0xb6a88ae0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6a88bc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6a88d20" loc="60:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6a88d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6a88ef8"/>
        <function-ref name="header" scoped="" ref="0xb6a86010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0xb6a8b220" loc="43:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0xb6a8b220"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6a8b3f8"/>
        <function-ref name="turnOn" scoped="" ref="0xb6a8b4d8"/>
        <function-ref name="setChannel" scoped="" ref="0xb6a8b5b8"/>
        <function-ref name="done" scoped="" ref="0xb6a8b698"/>
        <function-ref name="standby" scoped="" ref="0xb6a8b778"/>
        <function-ref name="getChannel" scoped="" ref="0xb6a8b858"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6a8a688" loc="47:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6a8a688"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a8a860"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6a8a940"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6a8aa20"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6a8ab00"/>
        <function-ref name="headerLength" scoped="" ref="0xb6a8abe0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6a8acc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0xb6a88010" loc="58:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0xb6a88010"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6a88268"/>
        <function-ref name="turnOn" scoped="" ref="0xb6a88348"/>
        <function-ref name="setChannel" scoped="" ref="0xb6a88428"/>
        <function-ref name="done" scoped="" ref="0xb6a88508"/>
        <function-ref name="standby" scoped="" ref="0xb6a885e8"/>
        <function-ref name="getChannel" scoped="" ref="0xb6a886c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0xb6a8ae20" loc="49:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0xb6a8ae20"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0xb6a89010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6a8be70" loc="45:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6a8be70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6a8a070"/>
        <function-ref name="header" scoped="" ref="0xb6a8a150"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0xb6a89c70" loc="56:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0xb6a89c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6a89e48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0xb6a891a0" loc="54:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0xb6a891a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6a89378"/>
        <function-ref name="stopDone" scoped="" ref="0xb6a89458"/>
        <function-ref name="start" scoped="" ref="0xb6a89538"/>
        <function-ref name="stop" scoped="" ref="0xb6a89618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6a86588" loc="62:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6a86588"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a86760"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6a86840"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6a86920"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6a86a00"/>
        <function-ref name="headerLength" scoped="" ref="0xb6a86ae0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6a86bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0xb6a8cee0" loc="41:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0xb6a8cee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6a8b0e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6a86d20" loc="64:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6a86d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0xb6a86ef8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0xb6a89778" loc="55:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0xb6a89778"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6a89950"/>
        <function-ref name="cancel" scoped="" ref="0xb6a89a30"/>
        <function-ref name="sendDone" scoped="" ref="0xb6a89b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb6a8b998" loc="44:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6a8b998"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6a8bb70"/>
        <function-ref name="ready" scoped="" ref="0xb6a8bc50"/>
        <function-ref name="sendDone" scoped="" ref="0xb6a8bd30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0xb6a86170" loc="61:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0xb6a86170"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0xb6a86348"/>
        <function-ref name="request" scoped="" ref="0xb6a86428"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0xb6a8ca08" loc="40:../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0xb6a8ca08"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6a8cbe0"/>
        <function-ref name="cancel" scoped="" ref="0xb6a8ccc0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6a8cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0xb6a80820" loc="45:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0xb6a80820"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0xb6a809f8"/>
        <function-ref name="request" scoped="" ref="0xb6a80ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0xb6a7ea58" loc="49:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0xb6a7ea58"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a7d638"/>
        <function-ref name="get" scoped="" ref="0xb6a7d378"/>
        <function-ref name="isSet" scoped="" ref="0xb6a7d0b8"/>
        <function-ref name="set" scoped="" ref="0xb6a7d8f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0xb6a72778" loc="64:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0xb6a72778"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a72950"/>
        <function-ref name="get" scoped="" ref="0xb6a72a30"/>
        <function-ref name="setValue" scoped="" ref="0xb6a72b10"/>
        <function-ref name="set" scoped="" ref="0xb6a72bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0xb6a74898" loc="61:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6a74898"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6a733c0"/>
        <function-ref name="clear" scoped="" ref="0xb6a73770"/>
        <function-ref name="isValid" scoped="" ref="0xb6a73010"/>
        <function-ref name="set" scoped="" ref="0xb6a73b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0xb6a83658" loc="42:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0xb6a83658"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6a83830"/>
        <function-ref name="turnOn" scoped="" ref="0xb6a83910"/>
        <function-ref name="setChannel" scoped="" ref="0xb6a839f0"/>
        <function-ref name="done" scoped="" ref="0xb6a83ad0"/>
        <function-ref name="standby" scoped="" ref="0xb6a83bb0"/>
        <function-ref name="getChannel" scoped="" ref="0xb6a83c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0xb6a71498" loc="66:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6a71498"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6a71670"/>
        <function-ref name="wait" scoped="" ref="0xb6a71750"/>
        <function-ref name="cancel" scoped="" ref="0xb6a71830"/>
        <function-ref name="isFree" scoped="" ref="0xb6a71910"/>
        <function-ref name="getNow" scoped="" ref="0xb6a719f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0xb6a7f6f8" loc="48:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6a7f6f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a7e2d0"/>
        <function-ref name="get" scoped="" ref="0xb6a7e010"/>
        <function-ref name="isSet" scoped="" ref="0xb6a7fd40"/>
        <function-ref name="set" scoped="" ref="0xb6a7e590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6a80c88" loc="46:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6a80c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a80e60"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6a7f010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6a7f0f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6a7f1d0"/>
        <function-ref name="headerLength" scoped="" ref="0xb6a7f2b0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6a7f390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6a76ec0" loc="60:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6a76ec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6a74188"/>
        <function-ref name="headerLength" scoped="" ref="0xb6a74268"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6a74348"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0xb6a74428"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0xb6a74508"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6a803d0" loc="44:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6a803d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6a805a8"/>
        <function-ref name="header" scoped="" ref="0xb6a80688"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0xb6a77428" loc="55:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb6a77428"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0xb718f048"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6a768d8"/>
        <function-ref name="fired" scoped="" ref="0xb6a760a8"/>
        <function-ref name="startAt" scoped="" ref="0xb6a76598"/>
        <function-ref name="isRunning" scoped="" ref="0xb6a76320"/>
        <function-ref name="getAlarm" scoped="" ref="0xb6a76b50"/>
        <function-ref name="start" scoped="" ref="0xb6a77b78"/>
        <function-ref name="stop" scoped="" ref="0xb6a77e18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0xb6a7de28" loc="50:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0xb6a7de28"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a7ba08"/>
        <function-ref name="get" scoped="" ref="0xb6a7b748"/>
        <function-ref name="isSet" scoped="" ref="0xb6a7b488"/>
        <function-ref name="set" scoped="" ref="0xb6a7bcc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0xb6a78950" loc="54:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0xb6a78950"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6a77010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb6a83e30" loc="43:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6a83e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6a80050"/>
        <function-ref name="ready" scoped="" ref="0xb6a80130"/>
        <function-ref name="sendDone" scoped="" ref="0xb6a80210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0xb6a79208" loc="51:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6a79208"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a79dd0"/>
        <function-ref name="get" scoped="" ref="0xb6a79b10"/>
        <function-ref name="isSet" scoped="" ref="0xb6a79850"/>
        <function-ref name="set" scoped="" ref="0xb6a780a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0xb6a72e38" loc="65:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0xb6a72e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a71050"/>
        <function-ref name="get" scoped="" ref="0xb6a71130"/>
        <function-ref name="setValue" scoped="" ref="0xb6a71210"/>
        <function-ref name="set" scoped="" ref="0xb6a712f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0xb6a720e0" loc="63:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0xb6a720e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a722b8"/>
        <function-ref name="get" scoped="" ref="0xb6a72398"/>
        <function-ref name="setValue" scoped="" ref="0xb6a72478"/>
        <function-ref name="set" scoped="" ref="0xb6a72558"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0xb6a78458" loc="52:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6a78458"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0xb6a78630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0xb6a71b78" loc="67:../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb6a71b78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb6a71d50"/>
        <function-ref name="suspend" scoped="" ref="0xb6a71e30"/>
        <function-ref name="resume" scoped="" ref="0xb6a71f10"/>
        <function-ref name="run" scoped="" ref="0xb6a6f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0xb6a6aa08" loc="52:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0xb6a6aa08"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0xb6a6abe0"/>
        <function-ref name="request" scoped="" ref="0xb6a6acc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0xb6a5b528" loc="74:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0xb6a5b528"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0xb6a5bc78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0xb6a68b98" loc="56:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0xb6a68b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a66780"/>
        <function-ref name="get" scoped="" ref="0xb6a664c0"/>
        <function-ref name="isSet" scoped="" ref="0xb6a66200"/>
        <function-ref name="set" scoped="" ref="0xb6a66a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0xb6a57830" loc="80:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0xb6a57830"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a57a08"/>
        <function-ref name="get" scoped="" ref="0xb6a57ae8"/>
        <function-ref name="setValue" scoped="" ref="0xb6a57bc8"/>
        <function-ref name="set" scoped="" ref="0xb6a57ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0xb6a6b4d8" loc="47:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0xb6a6b4d8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0xb73767d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0xb73767d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6a6b6b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0xb6a56710" loc="83:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0xb6a56710"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0xb6a553c0"/>
        <function-ref name="clear" scoped="" ref="0xb6a55770"/>
        <function-ref name="isValid" scoped="" ref="0xb6a55010"/>
        <function-ref name="set" scoped="" ref="0xb6a55b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0xb6a60bf8" loc="70:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0xb6a60bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6a60dd0"/>
        <function-ref name="isInput" scoped="" ref="0xb6a60eb0"/>
        <function-ref name="toggle" scoped="" ref="0xb6a5f010"/>
        <function-ref name="isOutput" scoped="" ref="0xb6a5f0f0"/>
        <function-ref name="get" scoped="" ref="0xb6a5f1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6a5f2b0"/>
        <function-ref name="set" scoped="" ref="0xb6a5f390"/>
        <function-ref name="clr" scoped="" ref="0xb6a5f470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0xb6a54630" loc="86:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0xb6a54630"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb6a54808"/>
        <function-ref name="wait" scoped="" ref="0xb6a548e8"/>
        <function-ref name="cancel" scoped="" ref="0xb6a549c8"/>
        <function-ref name="isFree" scoped="" ref="0xb6a54aa8"/>
        <function-ref name="getNow" scoped="" ref="0xb6a54b88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0xb6a6b858" loc="49:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0xb6a6b858"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0xb6a6ba30"/>
        <function-ref name="turnOn" scoped="" ref="0xb6a6bb10"/>
        <function-ref name="setChannel" scoped="" ref="0xb6a6bbf0"/>
        <function-ref name="done" scoped="" ref="0xb6a6bcd0"/>
        <function-ref name="standby" scoped="" ref="0xb6a6bdb0"/>
        <function-ref name="getChannel" scoped="" ref="0xb6a6be90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0xb6a5a010" loc="75:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0xb6a5a010"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6a5a658"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0xb6a69838" loc="55:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0xb6a69838"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a68410"/>
        <function-ref name="get" scoped="" ref="0xb6a68150"/>
        <function-ref name="isSet" scoped="" ref="0xb6a69e80"/>
        <function-ref name="set" scoped="" ref="0xb6a686d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0xb6a6ae70" loc="53:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0xb6a6ae70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a69070"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6a69150"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6a69230"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb6a69310"/>
        <function-ref name="headerLength" scoped="" ref="0xb6a693f0"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6a694d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SLP_TR" ref="0xb6a60210" loc="69:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0xb6a60210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6a603e8"/>
        <function-ref name="isInput" scoped="" ref="0xb6a604c8"/>
        <function-ref name="toggle" scoped="" ref="0xb6a605a8"/>
        <function-ref name="isOutput" scoped="" ref="0xb6a60688"/>
        <function-ref name="get" scoped="" ref="0xb6a60768"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6a60848"/>
        <function-ref name="set" scoped="" ref="0xb6a60928"/>
        <function-ref name="clr" scoped="" ref="0xb6a60a08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0xb6a5a978" loc="77:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0xb6a5a978"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6a5ab50"/>
        <function-ref name="headerLength" scoped="" ref="0xb6a5ac30"/>
        <function-ref name="metadataLength" scoped="" ref="0xb6a5ad10"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0xb6a5adf0"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0xb6a5aed0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0xb6a6a5b8" loc="51:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0xb6a6a5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6a6a790"/>
        <function-ref name="header" scoped="" ref="0xb6a6a870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="releaseSpi" ref="0xb6a00910" loc="856:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="releaseSpi" scoped="" ref="0xb6a00910"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6a00ae8"/>
        <function-ref name="runTask" scoped="" ref="0xb6a00bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0xb6a65010" loc="57:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0xb6a65010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a65bd8"/>
        <function-ref name="get" scoped="" ref="0xb6a65918"/>
        <function-ref name="isSet" scoped="" ref="0xb6a65658"/>
        <function-ref name="set" scoped="" ref="0xb6a65e98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0xb6a6ce40" loc="46:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0xb6a6ce40"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0xb73767d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0xb73767d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6a6b050"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0xb6a615b8" loc="65:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0xb6a615b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb6a61790"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb6a61870"/>
        <function-ref name="request" scoped="" ref="0xb6a61950"/>
        <function-ref name="granted" scoped="" ref="0xb6a61a30"/>
        <function-ref name="isOwner" scoped="" ref="0xb6a61b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SELN" ref="0xb6a62a98" loc="64:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0xb6a62a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6a62cf0"/>
        <function-ref name="isInput" scoped="" ref="0xb6a62dd0"/>
        <function-ref name="toggle" scoped="" ref="0xb6a62eb0"/>
        <function-ref name="isOutput" scoped="" ref="0xb6a61010"/>
        <function-ref name="get" scoped="" ref="0xb6a610f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6a611d0"/>
        <function-ref name="set" scoped="" ref="0xb6a612b0"/>
        <function-ref name="clr" scoped="" ref="0xb6a61390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0xb6a633d8" loc="58:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0xb6a633d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a62010"/>
        <function-ref name="get" scoped="" ref="0xb6a63ce0"/>
        <function-ref name="isSet" scoped="" ref="0xb6a63a20"/>
        <function-ref name="set" scoped="" ref="0xb6a622d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0xb6a6a060" loc="50:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0xb6a6a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6a6a238"/>
        <function-ref name="ready" scoped="" ref="0xb6a6a318"/>
        <function-ref name="sendDone" scoped="" ref="0xb6a6a3f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IRQ" ref="0xb6a59d50" loc="72:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0xb6a59d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0xb6a59f28"/>
        <function-ref name="disable" scoped="" ref="0xb6a5b018"/>
        <function-ref name="captured" scoped="" ref="0xb6a5b0f8"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0xb6a5b1d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FastSpiByte" ref="0xb6a5cb40" loc="67:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0xb6a5cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0xb6a5cd18"/>
        <function-ref name="splitReadWrite" scoped="" ref="0xb6a5cdf8"/>
        <function-ref name="splitRead" scoped="" ref="0xb6a5ced8"/>
        <function-ref name="write" scoped="" ref="0xb6a60010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0xb6a57ef0" loc="81:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0xb6a57ef0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a560e0"/>
        <function-ref name="get" scoped="" ref="0xb6a561c0"/>
        <function-ref name="setValue" scoped="" ref="0xb6a562a0"/>
        <function-ref name="set" scoped="" ref="0xb6a56380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0xb6a57198" loc="79:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0xb6a57198"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6a57370"/>
        <function-ref name="get" scoped="" ref="0xb6a57450"/>
        <function-ref name="setValue" scoped="" ref="0xb6a57530"/>
        <function-ref name="set" scoped="" ref="0xb6a57610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0xb6a62680" loc="59:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb6a62680"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0xb6a62858"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0xb6a54010" loc="85:../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0xb6a54010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0xb6a541e8"/>
        <function-ref name="suspend" scoped="" ref="0xb6a542c8"/>
        <function-ref name="resume" scoped="" ref="0xb6a543a8"/>
        <function-ref name="run" scoped="" ref="0xb6a54488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0xb69d9db8" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0xb69d9db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb69d8010"/>
        <function-ref name="isInput" scoped="" ref="0xb69d80f0"/>
        <function-ref name="toggle" scoped="" ref="0xb69d81d0"/>
        <function-ref name="isOutput" scoped="" ref="0xb69d82b0"/>
        <function-ref name="get" scoped="" ref="0xb69d8390"/>
        <function-ref name="makeOutput" scoped="" ref="0xb69d8470"/>
        <function-ref name="set" scoped="" ref="0xb69d8550"/>
        <function-ref name="clr" scoped="" ref="0xb69d8630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SLP_TR" ref="0xb69d93d0" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0xb69d93d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb69d95a8"/>
        <function-ref name="isInput" scoped="" ref="0xb69d9688"/>
        <function-ref name="toggle" scoped="" ref="0xb69d9768"/>
        <function-ref name="isOutput" scoped="" ref="0xb69d9848"/>
        <function-ref name="get" scoped="" ref="0xb69d9928"/>
        <function-ref name="makeOutput" scoped="" ref="0xb69d9a08"/>
        <function-ref name="set" scoped="" ref="0xb69d9ae8"/>
        <function-ref name="clr" scoped="" ref="0xb69d9bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0xb69d7030" loc="49:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb69d7030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb69d54e0"/>
        <function-ref name="fired" scoped="" ref="0xb69d7c98"/>
        <function-ref name="startAt" scoped="" ref="0xb69d51a0"/>
        <function-ref name="isRunning" scoped="" ref="0xb69d7f10"/>
        <function-ref name="getAlarm" scoped="" ref="0xb69d5758"/>
        <function-ref name="start" scoped="" ref="0xb69d7780"/>
        <function-ref name="stop" scoped="" ref="0xb69d7a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiResource" ref="0xb69da5b8" loc="42:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0xb69da5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb69da790"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb69da870"/>
        <function-ref name="request" scoped="" ref="0xb69da950"/>
        <function-ref name="granted" scoped="" ref="0xb69daa30"/>
        <function-ref name="isOwner" scoped="" ref="0xb69dab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SELN" ref="0xb69ddaf8" loc="41:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0xb69ddaf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb69ddcd0"/>
        <function-ref name="isInput" scoped="" ref="0xb69dddb0"/>
        <function-ref name="toggle" scoped="" ref="0xb69dde90"/>
        <function-ref name="isOutput" scoped="" ref="0xb69da010"/>
        <function-ref name="get" scoped="" ref="0xb69da0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb69da1d0"/>
        <function-ref name="set" scoped="" ref="0xb69da2b0"/>
        <function-ref name="clr" scoped="" ref="0xb69da390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0xb69d8820" loc="48:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0xb69d8820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0xb69d89f8"/>
        <function-ref name="disable" scoped="" ref="0xb69d8ad8"/>
        <function-ref name="captured" scoped="" ref="0xb69d8bb8"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0xb69d8c98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0xb69dacc0" loc="43:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0xb69dacc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0xb69dae98"/>
        <function-ref name="splitReadWrite" scoped="" ref="0xb69d9010"/>
        <function-ref name="splitRead" scoped="" ref="0xb69d90f0"/>
        <function-ref name="write" scoped="" ref="0xb69d91d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0xb69d5b48" loc="50:../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0xb69d5b48"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TRadio" ref="0xb7190d68"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb69d4200"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortCLKM" ref="0xb69cfc18" loc="46:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortCLKM" scoped="" ref="0xb69cfc18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb69cfdf0"/>
        <function-ref name="isInput" scoped="" ref="0xb69cfed0"/>
        <function-ref name="toggle" scoped="" ref="0xb69c9010"/>
        <function-ref name="isOutput" scoped="" ref="0xb69c90f0"/>
        <function-ref name="get" scoped="" ref="0xb69c91d0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb69c92b0"/>
        <function-ref name="set" scoped="" ref="0xb69c9390"/>
        <function-ref name="clr" scoped="" ref="0xb69c9470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Capture" ref="0xb69cbe68" loc="45:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0xb69cbe68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0xb69cf908"/>
        <function-ref name="test" scoped="" ref="0xb69cf418"/>
        <function-ref name="get" scoped="" ref="0xb69d04d8"/>
        <function-ref name="captured" scoped="" ref="0xb69d09f0"/>
        <function-ref name="reset" scoped="" ref="0xb69d0c90"/>
        <function-ref name="isOn" scoped="" ref="0xb69cf690"/>
        <function-ref name="set" scoped="" ref="0xb69d0750"/>
        <function-ref name="start" scoped="" ref="0xb69d0f08"/>
        <function-ref name="stop" scoped="" ref="0xb69cf1a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortIRQ" ref="0xb69c9678" loc="47:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortIRQ" scoped="" ref="0xb69c9678"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb69c9850"/>
        <function-ref name="isInput" scoped="" ref="0xb69c9930"/>
        <function-ref name="toggle" scoped="" ref="0xb69c9a10"/>
        <function-ref name="isOutput" scoped="" ref="0xb69c9af0"/>
        <function-ref name="get" scoped="" ref="0xb69c9bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb69c9cb0"/>
        <function-ref name="set" scoped="" ref="0xb69c9d90"/>
        <function-ref name="clr" scoped="" ref="0xb69c9e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0xb69d1858" loc="40:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0xb69d1858"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb69d1a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0xb69d11d0" loc="39:../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0xb69d11d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0xb69d13a8"/>
        <function-ref name="disable" scoped="" ref="0xb69d1488"/>
        <function-ref name="captured" scoped="" ref="0xb69d1568"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0xb69d1648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0xb69bcdc8" loc="84:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0xb69bcdc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb69c0010"/>
        <function-ref name="sendDone" scoped="" ref="0xb69c00f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0xb69be248" loc="82:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0xb69be248"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0xb69be420"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb69d25a8" loc="81:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb69d25a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb69d2780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0xb69be5f0" loc="83:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0xb69be5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0xb69be7c8"/>
        <function-ref name="splitReadWrite" scoped="" ref="0xb69be8a8"/>
        <function-ref name="splitRead" scoped="" ref="0xb69be988"/>
        <function-ref name="write" scoped="" ref="0xb69bea68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb69c0588" loc="85:../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb69c0588"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb69c0760"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb69c0840"/>
        <function-ref name="request" scoped="" ref="0xb69c0920"/>
        <function-ref name="granted" scoped="" ref="0xb69c0a00"/>
        <function-ref name="isOwner" scoped="" ref="0xb69c0ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0xb69b7bd8" loc="95:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb69b7bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb69b7db0"/>
        <function-ref name="configure" scoped="" ref="0xb69b7e90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="zeroTask" ref="0xb698f1e0" loc="294:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="zeroTask" scoped="" ref="0xb698f1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb698f3b8"/>
        <function-ref name="runTask" scoped="" ref="0xb698f498"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0xb69b7450" loc="94:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0xb69b7450"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb69b7628"/>
        <function-ref name="sendDone" scoped="" ref="0xb69b7708"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0xb69b89f0" loc="92:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0xb69b89f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0xb69b8bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb69b8690" loc="91:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb69b8690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb69b8868"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Spi" ref="0xb69a6bc8" loc="98:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Spi" scoped="" ref="0xb69a6bc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0xb69a6da0"/>
        <function-ref name="sleep" scoped="" ref="0xb69b32b0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0xb69b4010"/>
        <function-ref name="dataReady" scoped="" ref="0xb69b3390"/>
        <function-ref name="initMaster" scoped="" ref="0xb69b41d0"/>
        <function-ref name="setMasterBit" scoped="" ref="0xb69b42b0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0xb69b4390"/>
        <function-ref name="read" scoped="" ref="0xb69b4470"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0xb69b4550"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0xb69b4630"/>
        <function-ref name="setClock" scoped="" ref="0xb69b4710"/>
        <function-ref name="isInterruptPending" scoped="" ref="0xb69b47f0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0xb69b48d0"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0xb69b4a30"/>
        <function-ref name="setDataOrder" scoped="" ref="0xb69b4b10"/>
        <function-ref name="write" scoped="" ref="0xb69b4bf0"/>
        <function-ref name="enableSpi" scoped="" ref="0xb69b4cd0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0xb69b4db0"/>
        <function-ref name="getClockPhase" scoped="" ref="0xb69b4e90"/>
        <function-ref name="getClock" scoped="" ref="0xb69b3010"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0xb69b30f0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0xb69a6e80"/>
        <function-ref name="setClockPhase" scoped="" ref="0xb69b40f0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0xb69b31d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0xb69b8d78" loc="93:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0xb69b8d78"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0xb69b7010"/>
        <function-ref name="splitReadWrite" scoped="" ref="0xb69b70f0"/>
        <function-ref name="splitRead" scoped="" ref="0xb69b71d0"/>
        <function-ref name="write" scoped="" ref="0xb69b72b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0xb69b3558" loc="99:../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0xb69b3558"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0xb69b3730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiBus" ref="0xb69b9d10" loc="76:../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <component-ref qname="HplAtm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiBus" scoped="" ref="0xb69b9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0xb69b9ee8"/>
        <function-ref name="sleep" scoped="" ref="0xb697c390"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0xb697d0f0"/>
        <function-ref name="dataReady" scoped="" ref="0xb697c470"/>
        <function-ref name="initMaster" scoped="" ref="0xb697d2b0"/>
        <function-ref name="setMasterBit" scoped="" ref="0xb697d390"/>
        <function-ref name="enableInterrupt" scoped="" ref="0xb697d470"/>
        <function-ref name="read" scoped="" ref="0xb697d550"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0xb697d630"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0xb697d710"/>
        <function-ref name="setClock" scoped="" ref="0xb697d7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0xb697d8d0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0xb697d9b0"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0xb697db10"/>
        <function-ref name="setDataOrder" scoped="" ref="0xb697dbf0"/>
        <function-ref name="write" scoped="" ref="0xb697dcd0"/>
        <function-ref name="enableSpi" scoped="" ref="0xb697ddb0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0xb697de90"/>
        <function-ref name="getClockPhase" scoped="" ref="0xb697c010"/>
        <function-ref name="getClock" scoped="" ref="0xb697c0f0"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0xb697c1d0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0xb697d010"/>
        <function-ref name="setClockPhase" scoped="" ref="0xb697d1d0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0xb697c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MISO" ref="0xb6975cc8" loc="81:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MISO" scoped="" ref="0xb6975cc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6975ea0"/>
        <function-ref name="isInput" scoped="" ref="0xb6974010"/>
        <function-ref name="toggle" scoped="" ref="0xb69740f0"/>
        <function-ref name="isOutput" scoped="" ref="0xb69741d0"/>
        <function-ref name="get" scoped="" ref="0xb69742b0"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6974390"/>
        <function-ref name="set" scoped="" ref="0xb6974470"/>
        <function-ref name="clr" scoped="" ref="0xb6974550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0xb69778c0" loc="79:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0xb69778c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb6977a98"/>
        <function-ref name="isInput" scoped="" ref="0xb6977b78"/>
        <function-ref name="toggle" scoped="" ref="0xb6977c58"/>
        <function-ref name="isOutput" scoped="" ref="0xb6977d38"/>
        <function-ref name="get" scoped="" ref="0xb6977e18"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6977ef8"/>
        <function-ref name="set" scoped="" ref="0xb6975010"/>
        <function-ref name="clr" scoped="" ref="0xb69750f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SS" ref="0xb6978ea8" loc="78:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SS" scoped="" ref="0xb6978ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb69770c0"/>
        <function-ref name="isInput" scoped="" ref="0xb69771a0"/>
        <function-ref name="toggle" scoped="" ref="0xb6977280"/>
        <function-ref name="isOutput" scoped="" ref="0xb6977360"/>
        <function-ref name="get" scoped="" ref="0xb6977440"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6977520"/>
        <function-ref name="set" scoped="" ref="0xb6977600"/>
        <function-ref name="clr" scoped="" ref="0xb69776e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0xb69789e8" loc="75:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0xb69789e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6978bc0"/>
        <function-ref name="stop" scoped="" ref="0xb6978ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Mcu" ref="0xb6974758" loc="82:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Mcu" scoped="" ref="0xb6974758"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0xb6974930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SPI" ref="0xb6979100" loc="74:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SPI" scoped="" ref="0xb6979100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0xb69792d8"/>
        <function-ref name="sleep" scoped="" ref="0xb6978710"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0xb6979498"/>
        <function-ref name="dataReady" scoped="" ref="0xb69787f0"/>
        <function-ref name="initMaster" scoped="" ref="0xb6979658"/>
        <function-ref name="setMasterBit" scoped="" ref="0xb6979738"/>
        <function-ref name="enableInterrupt" scoped="" ref="0xb6979818"/>
        <function-ref name="read" scoped="" ref="0xb69798f8"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0xb69799d8"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0xb6979ab8"/>
        <function-ref name="setClock" scoped="" ref="0xb6979b98"/>
        <function-ref name="isInterruptPending" scoped="" ref="0xb6979c78"/>
        <function-ref name="setClockPolarity" scoped="" ref="0xb6979d58"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0xb6979eb8"/>
        <function-ref name="setDataOrder" scoped="" ref="0xb6978010"/>
        <function-ref name="write" scoped="" ref="0xb69780f0"/>
        <function-ref name="enableSpi" scoped="" ref="0xb69781d0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0xb69782b0"/>
        <function-ref name="getClockPhase" scoped="" ref="0xb6978390"/>
        <function-ref name="getClock" scoped="" ref="0xb6978470"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0xb6978550"/>
        <function-ref name="getClockPolarity" scoped="" ref="0xb69793b8"/>
        <function-ref name="setClockPhase" scoped="" ref="0xb6979578"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0xb6978630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MOSI" ref="0xb69752e0" loc="80:../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MOSI" scoped="" ref="0xb69752e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0xb69754b8"/>
        <function-ref name="isInput" scoped="" ref="0xb6975598"/>
        <function-ref name="toggle" scoped="" ref="0xb6975678"/>
        <function-ref name="isOutput" scoped="" ref="0xb6975758"/>
        <function-ref name="get" scoped="" ref="0xb6975838"/>
        <function-ref name="makeOutput" scoped="" ref="0xb6975918"/>
        <function-ref name="set" scoped="" ref="0xb69759f8"/>
        <function-ref name="clr" scoped="" ref="0xb6975ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb694d568" loc="86:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb694d568"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb694d750"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb694d830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb694de20" loc="89:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb694de20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb694c050"/>
        <function-ref name="configure" scoped="" ref="0xb694c130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb694ee00" loc="85:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb694ee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb694d010"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb694d0f0"/>
        <function-ref name="request" scoped="" ref="0xb694d1d0"/>
        <function-ref name="granted" scoped="" ref="0xb694d2b0"/>
        <function-ref name="isOwner" scoped="" ref="0xb694d390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb694d970" loc="87:../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb694d970"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb694db48"/>
        <function-ref name="userId" scoped="" ref="0xb694dc28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5f32948" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5f32948"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5f32b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0xb5f32c80" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0xb5f32c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb5f32e58"/>
        <function-ref name="isEmpty" scoped="" ref="0xb5f2f010"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb5f2f0f0"/>
        <function-ref name="dequeue" scoped="" ref="0xb5f2f1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0xb5f2e490" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0xb5f2e490"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0xb5f2e678"/>
        <function-ref name="immediateRequested" scoped="" ref="0xb5f2e758"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0xb5f2ed58" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0xb5f2ed58"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0xb5f2d010"/>
        <function-ref name="configure" scoped="" ref="0xb5f2d0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0xb5f2d250" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb5f2d250"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0xb5f2d428"/>
        <function-ref name="isEmpty" scoped="" ref="0xb5f2d508"/>
        <function-ref name="isEnqueued" scoped="" ref="0xb5f2d5e8"/>
        <function-ref name="dequeue" scoped="" ref="0xb5f2d6c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0xb5f2fd38" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0xb5f2fd38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0xb5f2ff20"/>
        <function-ref name="immediateRequest" scoped="" ref="0xb5f2e018"/>
        <function-ref name="request" scoped="" ref="0xb5f2e0f8"/>
        <function-ref name="granted" scoped="" ref="0xb5f2e1d8"/>
        <function-ref name="isOwner" scoped="" ref="0xb5f2e2b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0xb5f2e898" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0xb5f2e898"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0xb5f2ea70"/>
        <function-ref name="userId" scoped="" ref="0xb5f2eb50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0xb5f2d848" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0xb5f2d848"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb5f2da20"/>
        <function-ref name="runTask" scoped="" ref="0xb5f2db00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0xb693e7f8" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb693e7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0xb693e9d0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb693eab0"/>
        <function-ref name="getControlA" scoped="" ref="0xb693eb90"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb693ec70"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb693ed50"/>
        <function-ref name="setControlB" scoped="" ref="0xb693ee30"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb693ef10"/>
        <function-ref name="getControlB" scoped="" ref="0xb6943010"/>
        <function-ref name="setControlC" scoped="" ref="0xb69430f0"/>
        <function-ref name="setControlA" scoped="" ref="0xb69431d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0xb6943508" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0xb6943508"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0xb693c010"/>
        <function-ref name="test" scoped="" ref="0xb6942a90"/>
        <function-ref name="get" scoped="" ref="0xb6943b50"/>
        <function-ref name="captured" scoped="" ref="0xb6942088"/>
        <function-ref name="reset" scoped="" ref="0xb6942328"/>
        <function-ref name="isOn" scoped="" ref="0xb6942d08"/>
        <function-ref name="set" scoped="" ref="0xb6943dc8"/>
        <function-ref name="start" scoped="" ref="0xb69425a0"/>
        <function-ref name="stop" scoped="" ref="0xb6942818"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0xb693c720" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0xb693c720"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb693bc90"/>
        <function-ref name="fired" scoped="" ref="0xb693b2b0"/>
        <function-ref name="get" scoped="" ref="0xb693cd68"/>
        <function-ref name="reset" scoped="" ref="0xb693b528"/>
        <function-ref name="isOn" scoped="" ref="0xb693bf08"/>
        <function-ref name="set" scoped="" ref="0xb693b010"/>
        <function-ref name="start" scoped="" ref="0xb693b7a0"/>
        <function-ref name="stop" scoped="" ref="0xb693ba18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb694aec0" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb694aec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb6945918"/>
        <function-ref name="test" scoped="" ref="0xb6945428"/>
        <function-ref name="get" scoped="" ref="0xb6947520"/>
        <function-ref name="setScale" scoped="" ref="0xb6945b90"/>
        <function-ref name="getScale" scoped="" ref="0xb6945e30"/>
        <function-ref name="reset" scoped="" ref="0xb6947cb0"/>
        <function-ref name="overflow" scoped="" ref="0xb6947a38"/>
        <function-ref name="isOn" scoped="" ref="0xb69456a0"/>
        <function-ref name="set" scoped="" ref="0xb6947798"/>
        <function-ref name="start" scoped="" ref="0xb6947f28"/>
        <function-ref name="stop" scoped="" ref="0xb69451b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0xb6935e98" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb6935e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0xb69340c0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb69341a0"/>
        <function-ref name="getControlA" scoped="" ref="0xb6934280"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb6934360"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb6934440"/>
        <function-ref name="setControlB" scoped="" ref="0xb6934520"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb6934600"/>
        <function-ref name="getControlB" scoped="" ref="0xb69346e0"/>
        <function-ref name="setControlC" scoped="" ref="0xb69347c0"/>
        <function-ref name="setControlA" scoped="" ref="0xb69348a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0xb6931aa0" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0xb6931aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb692f048"/>
        <function-ref name="fired" scoped="" ref="0xb6930638"/>
        <function-ref name="get" scoped="" ref="0xb6930120"/>
        <function-ref name="reset" scoped="" ref="0xb69308b0"/>
        <function-ref name="isOn" scoped="" ref="0xb692f2c0"/>
        <function-ref name="set" scoped="" ref="0xb6930398"/>
        <function-ref name="start" scoped="" ref="0xb6930b28"/>
        <function-ref name="stop" scoped="" ref="0xb6930da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0xb6934bd8" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0xb6934bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0xb6931660"/>
        <function-ref name="test" scoped="" ref="0xb6931170"/>
        <function-ref name="get" scoped="" ref="0xb6933238"/>
        <function-ref name="captured" scoped="" ref="0xb6933750"/>
        <function-ref name="reset" scoped="" ref="0xb69339f0"/>
        <function-ref name="isOn" scoped="" ref="0xb69313e8"/>
        <function-ref name="set" scoped="" ref="0xb69334b0"/>
        <function-ref name="start" scoped="" ref="0xb6933c68"/>
        <function-ref name="stop" scoped="" ref="0xb6933ee0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0xb692f6d8" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0xb692f6d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb692ec90"/>
        <function-ref name="fired" scoped="" ref="0xb692e2b0"/>
        <function-ref name="get" scoped="" ref="0xb692fd20"/>
        <function-ref name="reset" scoped="" ref="0xb692e528"/>
        <function-ref name="isOn" scoped="" ref="0xb692ef08"/>
        <function-ref name="set" scoped="" ref="0xb692e010"/>
        <function-ref name="start" scoped="" ref="0xb692e7a0"/>
        <function-ref name="stop" scoped="" ref="0xb692ea18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0xb692c340" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0xb692c340"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb692b898"/>
        <function-ref name="fired" scoped="" ref="0xb692cea0"/>
        <function-ref name="get" scoped="" ref="0xb692c988"/>
        <function-ref name="reset" scoped="" ref="0xb692b130"/>
        <function-ref name="isOn" scoped="" ref="0xb692bb10"/>
        <function-ref name="set" scoped="" ref="0xb692cc00"/>
        <function-ref name="start" scoped="" ref="0xb692b3a8"/>
        <function-ref name="stop" scoped="" ref="0xb692b620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb693abb8" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb693abb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb6935620"/>
        <function-ref name="test" scoped="" ref="0xb6935130"/>
        <function-ref name="get" scoped="" ref="0xb6937210"/>
        <function-ref name="setScale" scoped="" ref="0xb6935898"/>
        <function-ref name="getScale" scoped="" ref="0xb6935b38"/>
        <function-ref name="reset" scoped="" ref="0xb69379a0"/>
        <function-ref name="overflow" scoped="" ref="0xb6937728"/>
        <function-ref name="isOn" scoped="" ref="0xb69353a8"/>
        <function-ref name="set" scoped="" ref="0xb6937488"/>
        <function-ref name="start" scoped="" ref="0xb6937c18"/>
        <function-ref name="stop" scoped="" ref="0xb6937e90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0xb68e7670" loc="30:../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="HplRF230C.AlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb68e7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TOne" ref="0xb72e5db0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb68bab30"/>
        <function-ref name="fired" scoped="" ref="0xb68ba300"/>
        <function-ref name="startAt" scoped="" ref="0xb68ba7f0"/>
        <function-ref name="isRunning" scoped="" ref="0xb68ba578"/>
        <function-ref name="getAlarm" scoped="" ref="0xb68bada8"/>
        <function-ref name="start" scoped="" ref="0xb68e7dc0"/>
        <function-ref name="stop" scoped="" ref="0xb68ba088"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb68e12b0" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb68e12b0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0xb73765d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0xb73765d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb68e1488"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb68e1698" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb68e1698"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb68d81a0"/>
        <function-ref name="test" scoped="" ref="0xb68e0c90"/>
        <function-ref name="get" scoped="" ref="0xb68e1ce0"/>
        <function-ref name="setScale" scoped="" ref="0xb68d8418"/>
        <function-ref name="getScale" scoped="" ref="0xb68d86b8"/>
        <function-ref name="reset" scoped="" ref="0xb68e0528"/>
        <function-ref name="overflow" scoped="" ref="0xb68e02b0"/>
        <function-ref name="isOn" scoped="" ref="0xb68e0f08"/>
        <function-ref name="set" scoped="" ref="0xb68e0010"/>
        <function-ref name="start" scoped="" ref="0xb68e07a0"/>
        <function-ref name="stop" scoped="" ref="0xb68e0a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0xb5f17ac0" loc="55:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0xb5f17ac0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0xb73763d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0xb73763d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TOne" ref="0xb72e5db0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb5f15010"/>
        <function-ref name="fired" scoped="" ref="0xb5f16740"/>
        <function-ref name="startAt" scoped="" ref="0xb5f16c30"/>
        <function-ref name="isRunning" scoped="" ref="0xb5f169b8"/>
        <function-ref name="getAlarm" scoped="" ref="0xb5f15288"/>
        <function-ref name="start" scoped="" ref="0xb5f16228"/>
        <function-ref name="stop" scoped="" ref="0xb5f164c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0xb5f127e8" loc="58:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0xb5f127e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb5f11d58"/>
        <function-ref name="fired" scoped="" ref="0xb5f11378"/>
        <function-ref name="get" scoped="" ref="0xb5f12e30"/>
        <function-ref name="reset" scoped="" ref="0xb5f115f0"/>
        <function-ref name="isOn" scoped="" ref="0xb5f10010"/>
        <function-ref name="set" scoped="" ref="0xb5f110d8"/>
        <function-ref name="start" scoped="" ref="0xb5f11868"/>
        <function-ref name="stop" scoped="" ref="0xb5f11ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0xb5f15548" loc="57:../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0xb5f15548"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb5f12010"/>
        <function-ref name="test" scoped="" ref="0xb5f14ab8"/>
        <function-ref name="get" scoped="" ref="0xb5f15b90"/>
        <function-ref name="setScale" scoped="" ref="0xb5f12288"/>
        <function-ref name="getScale" scoped="" ref="0xb5f12528"/>
        <function-ref name="reset" scoped="" ref="0xb5f14350"/>
        <function-ref name="overflow" scoped="" ref="0xb5f140d8"/>
        <function-ref name="isOn" scoped="" ref="0xb5f14d30"/>
        <function-ref name="set" scoped="" ref="0xb5f15e08"/>
        <function-ref name="start" scoped="" ref="0xb5f145c8"/>
        <function-ref name="stop" scoped="" ref="0xb5f14840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0xb68b6010" loc="39:../../tos/platforms/iris/LocalTimeMicroC.nc">
      <component-ref qname="LocalTimeMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0xb68b6010"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb68b6658"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb68b2128" loc="24:../../tos/platforms/mica/CounterOne16C.nc">
      <component-ref qname="CounterOne16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb68b2128"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TOne" ref="0xb72e5db0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb68b2878"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb68b2d68"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb68b2af0"/>
        <function-ref name="overflow" scoped="" ref="0xb68b1010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb68b0890" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb68b0890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TOne" ref="0xb72e5db0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb68af010"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb68af500"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb68af288"/>
        <function-ref name="overflow" scoped="" ref="0xb68af778"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb68afa58" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb68afa58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb68a3500"/>
        <function-ref name="test" scoped="" ref="0xb68a3010"/>
        <function-ref name="get" scoped="" ref="0xb68a40b8"/>
        <function-ref name="setScale" scoped="" ref="0xb68a3778"/>
        <function-ref name="getScale" scoped="" ref="0xb68a3a18"/>
        <function-ref name="reset" scoped="" ref="0xb68a4848"/>
        <function-ref name="overflow" scoped="" ref="0xb68a45d0"/>
        <function-ref name="isOn" scoped="" ref="0xb68a3288"/>
        <function-ref name="set" scoped="" ref="0xb68a4330"/>
        <function-ref name="start" scoped="" ref="0xb68a4ac0"/>
        <function-ref name="stop" scoped="" ref="0xb68a4d38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0xb6891b40" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0xb6891b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6890308"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb68907f8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb6890580"/>
        <function-ref name="overflow" scoped="" ref="0xb6890a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb68b3908" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb68b3908"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6891068"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb6891558"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb68912e0"/>
        <function-ref name="overflow" scoped="" ref="0xb68917d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0xb688f988" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0xb688f988"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb688d010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0xb688d360" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb688d360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb688dab0"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb688c010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb688dd28"/>
        <function-ref name="overflow" scoped="" ref="0xb688c288"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb679ed68" loc="142:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb679ed68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb679c010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RootControl" ref="0xb679b078" loc="145:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0xb679b078"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0xb679b250"/>
        <function-ref name="setRoot" scoped="" ref="0xb679b330"/>
        <function-ref name="unsetRoot" scoped="" ref="0xb679b410"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb67aa0c0" loc="126:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb67aa0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb67aa298"/>
        <function-ref name="getPayload" scoped="" ref="0xb67aa378"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb67aa458"/>
        <function-ref name="cancel" scoped="" ref="0xb67aa538"/>
        <function-ref name="sendDone" scoped="" ref="0xb67aa618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionDebug" ref="0xb6799708" loc="156:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0xb6799708"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0xb67998e0"/>
        <function-ref name="logEventMsg" scoped="" ref="0xb67999c0"/>
        <function-ref name="logEventSimple" scoped="" ref="0xb6799aa0"/>
        <function-ref name="logEventRoute" scoped="" ref="0xb6799b80"/>
        <function-ref name="logEventDbg" scoped="" ref="0xb6799c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionPacket" ref="0xb67ac4d0" loc="116:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionPacket" scoped="" ref="0xb67ac4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb67ac6a8"/>
        <function-ref name="setOrigin" scoped="" ref="0xb67ac788"/>
        <function-ref name="setType" scoped="" ref="0xb67ac868"/>
        <function-ref name="getOrigin" scoped="" ref="0xb67ac948"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb67aca28"/>
        <function-ref name="getType" scoped="" ref="0xb67acb08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LinkEstimator" ref="0xb67a6010" loc="129:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkEstimator" scoped="" ref="0xb67a6010"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkEstimator"/>
      </instance>
      <interface-functions>
        <function-ref name="txAck" scoped="" ref="0xb67a61e8"/>
        <function-ref name="pinNeighbor" scoped="" ref="0xb67a62c8"/>
        <function-ref name="txNoAck" scoped="" ref="0xb67a63a8"/>
        <function-ref name="insertNeighbor" scoped="" ref="0xb67a6488"/>
        <function-ref name="evicted" scoped="" ref="0xb67a6568"/>
        <function-ref name="clearDLQ" scoped="" ref="0xb67a6648"/>
        <function-ref name="unpinNeighbor" scoped="" ref="0xb67a6728"/>
        <function-ref name="getLinkQuality" scoped="" ref="0xb67a6808"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SentCache" ref="0xb679e010" loc="140:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SentCache" scoped="" ref="0xb679e010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Cache"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
              <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="insert" scoped="" ref="0xb679e638"/>
        <function-ref name="flush" scoped="" ref="0xb679eb38"/>
        <function-ref name="lookup" scoped="" ref="0xb679e8b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Intercept" ref="0xb67ada70" loc="114:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Intercept" scoped="" ref="0xb67ada70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0xb67adc58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb67add98" loc="115:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb67add98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb67ac010"/>
        <function-ref name="payloadLength" scoped="" ref="0xb67ac0f0"/>
        <function-ref name="getPayload" scoped="" ref="0xb67ac1d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb67ac2b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb67ac390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0xb67ad6b0" loc="113:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0xb67ad6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb67ad898"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0xb6799310" loc="149:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0xb6799310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0xb67994e8"/>
        <function-ref name="rand32" scoped="" ref="0xb67995c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb67aeb78" loc="111:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb67aeb78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb67aed60"/>
        <function-ref name="getPayload" scoped="" ref="0xb67aee40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb67aef20"/>
        <function-ref name="cancel" scoped="" ref="0xb67ad018"/>
        <function-ref name="sendDone" scoped="" ref="0xb67ad0f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RetxmitTimer" ref="0xb67aace0" loc="128:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RetxmitTimer" scoped="" ref="0xb67aace0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb67a78a8"/>
        <function-ref name="fired" scoped="" ref="0xb67a9b18"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb67a7268"/>
        <function-ref name="isOneShot" scoped="" ref="0xb67a7010"/>
        <function-ref name="getdt" scoped="" ref="0xb67a7d58"/>
        <function-ref name="gett0" scoped="" ref="0xb67a7b00"/>
        <function-ref name="isRunning" scoped="" ref="0xb67a9d70"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb67a93c0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb67a7588"/>
        <function-ref name="startOneShot" scoped="" ref="0xb67a9640"/>
        <function-ref name="stop" scoped="" ref="0xb67a98c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0xb6799dc0" loc="162:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0xb6799dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6798010"/>
        <function-ref name="stopDone" scoped="" ref="0xb67980f0"/>
        <function-ref name="start" scoped="" ref="0xb67981d0"/>
        <function-ref name="stop" scoped="" ref="0xb67982b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0xb6798430" loc="234:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0xb6798430"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6798608"/>
        <function-ref name="runTask" scoped="" ref="0xb67986e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendQueue" ref="0xb67a56a0" loc="137:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendQueue" scoped="" ref="0xb67a56a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb685a3a0"/>
              <typename><typedef-ref name="fe_queue_entry_t" ref="0xb685a628"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0xb67a4640"/>
        <function-ref name="enqueue" scoped="" ref="0xb67a4d20"/>
        <function-ref name="element" scoped="" ref="0xb67a2088"/>
        <function-ref name="full" scoped="" ref="0xb67a5f20"/>
        <function-ref name="maxSize" scoped="" ref="0xb67a43e8"/>
        <function-ref name="dequeue" scoped="" ref="0xb67a49b0"/>
        <function-ref name="empty" scoped="" ref="0xb67a5cc8"/>
        <function-ref name="size" scoped="" ref="0xb67a4190"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CtpInfo" ref="0xb679c488" loc="144:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpInfo" scoped="" ref="0xb679c488"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getNeighborLinkQuality" scoped="" ref="0xb679c660"/>
        <function-ref name="recomputeRoutes" scoped="" ref="0xb679c740"/>
        <function-ref name="numNeighbors" scoped="" ref="0xb679c820"/>
        <function-ref name="triggerRouteUpdate" scoped="" ref="0xb679c900"/>
        <function-ref name="getEtx" scoped="" ref="0xb679c9e0"/>
        <function-ref name="triggerImmediateRouteUpdate" scoped="" ref="0xb679cac0"/>
        <function-ref name="setNeighborCongested" scoped="" ref="0xb679cba0"/>
        <function-ref name="getNeighborAddr" scoped="" ref="0xb679cc80"/>
        <function-ref name="getParent" scoped="" ref="0xb679cd60"/>
        <function-ref name="getNeighborRouteQuality" scoped="" ref="0xb679ce40"/>
        <function-ref name="isNeighborCongested" scoped="" ref="0xb679cf20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb67a6f20" loc="131:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb67a6f20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb67a5110"/>
        <function-ref name="payloadLength" scoped="" ref="0xb67a51f0"/>
        <function-ref name="getPayload" scoped="" ref="0xb67a52d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb67a53b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb67a5490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb67ae3d0" loc="109:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb67ae3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb67ae5a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb67ad2d0" loc="112:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb67ad2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb67ad4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpCongestion" ref="0xb67abc50" loc="118:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpCongestion" scoped="" ref="0xb67abc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpCongestion"/>
      </instance>
      <interface-functions>
        <function-ref name="isCongested" scoped="" ref="0xb67abe28"/>
        <function-ref name="setClientCongested" scoped="" ref="0xb67abf08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UnicastNameFreeRouting" ref="0xb67a6948" loc="130:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0xb67a6948"/></type-interface>
      <instance>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
      </instance>
      <interface-functions>
        <function-ref name="hasRoute" scoped="" ref="0xb67a6b20"/>
        <function-ref name="routeFound" scoped="" ref="0xb67a6c00"/>
        <function-ref name="nextHop" scoped="" ref="0xb67a6ce0"/>
        <function-ref name="noRoute" scoped="" ref="0xb67a6dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb679a690" loc="148:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb679a690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb679a868"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb679a948"/>
        <function-ref name="led1On" scoped="" ref="0xb679aa28"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb679ab08"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb679abe8"/>
        <function-ref name="get" scoped="" ref="0xb679acc8"/>
        <function-ref name="led1Off" scoped="" ref="0xb679ada8"/>
        <function-ref name="led2On" scoped="" ref="0xb67991d0"/>
        <function-ref name="set" scoped="" ref="0xb6799010"/>
        <function-ref name="led2Off" scoped="" ref="0xb679ae88"/>
        <function-ref name="led0On" scoped="" ref="0xb67990f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0xb67aa758" loc="127:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb67aa758"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb67aa930"/>
        <function-ref name="noAck" scoped="" ref="0xb67aaa10"/>
        <function-ref name="wasAcked" scoped="" ref="0xb67aaaf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpPacket" ref="0xb67acc48" loc="117:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpPacket" scoped="" ref="0xb67acc48"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb67ace20"/>
        <function-ref name="option" scoped="" ref="0xb67acf00"/>
        <function-ref name="setEtx" scoped="" ref="0xb67ab010"/>
        <function-ref name="setOrigin" scoped="" ref="0xb67ab0f0"/>
        <function-ref name="clearOption" scoped="" ref="0xb67ab1d0"/>
        <function-ref name="getEtx" scoped="" ref="0xb67ab2b0"/>
        <function-ref name="getOrigin" scoped="" ref="0xb67ab390"/>
        <function-ref name="setType" scoped="" ref="0xb67ab470"/>
        <function-ref name="setOption" scoped="" ref="0xb67ab550"/>
        <function-ref name="matchPacket" scoped="" ref="0xb67ab630"/>
        <function-ref name="getThl" scoped="" ref="0xb67ab710"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb67ab7f0"/>
        <function-ref name="matchInstance" scoped="" ref="0xb67ab8d0"/>
        <function-ref name="getType" scoped="" ref="0xb67aba30"/>
        <function-ref name="setThl" scoped="" ref="0xb67abb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="QEntryPool" ref="0xb67a2488" loc="138:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="QEntryPool" scoped="" ref="0xb67a2488"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb685a3a0"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0xb685a628"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb67a15f8"/>
        <function-ref name="maxSize" scoped="" ref="0xb67a1010"/>
        <function-ref name="empty" scoped="" ref="0xb67a2ab0"/>
        <function-ref name="put" scoped="" ref="0xb67a1268"/>
        <function-ref name="size" scoped="" ref="0xb67a2d08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb679ba10" loc="147:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb679ba10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb679bbe8"/>
        <function-ref name="source" scoped="" ref="0xb679bcc8"/>
        <function-ref name="address" scoped="" ref="0xb679bda8"/>
        <function-ref name="destination" scoped="" ref="0xb679be88"/>
        <function-ref name="setSource" scoped="" ref="0xb679a010"/>
        <function-ref name="setDestination" scoped="" ref="0xb679a0f0"/>
        <function-ref name="type" scoped="" ref="0xb679a1d0"/>
        <function-ref name="setType" scoped="" ref="0xb679a2b0"/>
        <function-ref name="isForMe" scoped="" ref="0xb679a390"/>
        <function-ref name="setGroup" scoped="" ref="0xb679a470"/>
        <function-ref name="localGroup" scoped="" ref="0xb679a550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb67ae6e8" loc="110:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb67ae6e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb67ae8c0"/>
        <function-ref name="stop" scoped="" ref="0xb67ae9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSnoop" ref="0xb679c170" loc="143:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSnoop" scoped="" ref="0xb679c170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb679c348"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MessagePool" ref="0xb67a1a30" loc="139:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MessagePool" scoped="" ref="0xb67a1a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
            <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb679fb00"/>
        <function-ref name="maxSize" scoped="" ref="0xb679f518"/>
        <function-ref name="empty" scoped="" ref="0xb679f068"/>
        <function-ref name="put" scoped="" ref="0xb679f770"/>
        <function-ref name="size" scoped="" ref="0xb679f2c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionId" ref="0xb679b5e8" loc="146:../../tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionId" scoped="" ref="0xb679b5e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionId"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fetch" scoped="" ref="0xb679b8d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb6792b18" loc="42:../../tos/system/PoolC.nc">
      <component-ref qname="CtpP.MessagePoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb6792b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
            <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6791c78"/>
        <function-ref name="maxSize" scoped="" ref="0xb6791690"/>
        <function-ref name="empty" scoped="" ref="0xb67911e0"/>
        <function-ref name="put" scoped="" ref="0xb67918e8"/>
        <function-ref name="size" scoped="" ref="0xb6791438"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb5e911e0" loc="56:../../tos/system/PoolP.nc">
      <component-ref qname="CtpP.MessagePoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb5e911e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
            <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb5e902b8"/>
        <function-ref name="maxSize" scoped="" ref="0xb5e91cb8"/>
        <function-ref name="empty" scoped="" ref="0xb5e91808"/>
        <function-ref name="put" scoped="" ref="0xb5e91f10"/>
        <function-ref name="size" scoped="" ref="0xb5e91a60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5e93d88" loc="55:../../tos/system/PoolP.nc">
      <component-ref qname="CtpP.MessagePoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5e93d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5e91010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb677b010" loc="42:../../tos/system/PoolC.nc">
      <component-ref qname="CtpP.QEntryPoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb677b010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb685a3a0"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0xb685a628"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb677a0e8"/>
        <function-ref name="maxSize" scoped="" ref="0xb677bae8"/>
        <function-ref name="empty" scoped="" ref="0xb677b638"/>
        <function-ref name="put" scoped="" ref="0xb677bd40"/>
        <function-ref name="size" scoped="" ref="0xb677b890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb5e888f8" loc="56:../../tos/system/PoolP.nc">
      <component-ref qname="CtpP.QEntryPoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb5e888f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb685a3a0"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0xb685a628"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb5e869d0"/>
        <function-ref name="maxSize" scoped="" ref="0xb5e863e8"/>
        <function-ref name="empty" scoped="" ref="0xb5e88f20"/>
        <function-ref name="put" scoped="" ref="0xb5e86640"/>
        <function-ref name="size" scoped="" ref="0xb5e86190"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5e88550" loc="55:../../tos/system/PoolP.nc">
      <component-ref qname="CtpP.QEntryPoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5e88550"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5e88728"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0xb67770a0" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="CtpP.SendQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb67770a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:4" alignment="I:1"><struct-ref ref="0xb685a3a0"/>
              <typename><typedef-ref name="fe_queue_entry_t" ref="0xb685a628"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0xb6767048"/>
        <function-ref name="enqueue" scoped="" ref="0xb6767728"/>
        <function-ref name="element" scoped="" ref="0xb6767a78"/>
        <function-ref name="full" scoped="" ref="0xb6777920"/>
        <function-ref name="maxSize" scoped="" ref="0xb6777dd0"/>
        <function-ref name="dequeue" scoped="" ref="0xb67673b8"/>
        <function-ref name="empty" scoped="" ref="0xb67776c8"/>
        <function-ref name="size" scoped="" ref="0xb6777b78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Cache" ref="0xb6764dc0" loc="39:../../tos/lib/net/ctp/LruCtpMsgCacheC.nc">
      <component-ref qname="CtpP.SentCacheP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Cache" scoped="" ref="0xb6764dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Cache"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
              <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="insert" scoped="" ref="0xb674a408"/>
        <function-ref name="flush" scoped="" ref="0xb674a908"/>
        <function-ref name="lookup" scoped="" ref="0xb674a688"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Cache" ref="0xb5e78a98" loc="46:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
      <component-ref qname="CtpP.SentCacheP.CacheP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Cache" scoped="" ref="0xb5e78a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Cache"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
              <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="insert" scoped="" ref="0xb5e770d8"/>
        <function-ref name="flush" scoped="" ref="0xb5e775d8"/>
        <function-ref name="lookup" scoped="" ref="0xb5e77358"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5e786d0" loc="45:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
      <component-ref qname="CtpP.SentCacheP.CacheP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5e786d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5e788a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CtpPacket" ref="0xb5e77818" loc="49:../../tos/lib/net/ctp/LruCtpMsgCacheP.nc">
      <component-ref qname="CtpP.SentCacheP.CacheP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpPacket" scoped="" ref="0xb5e77818"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0xb5e779f0"/>
        <function-ref name="option" scoped="" ref="0xb5e77ad0"/>
        <function-ref name="setEtx" scoped="" ref="0xb5e77bb0"/>
        <function-ref name="setOrigin" scoped="" ref="0xb5e77c90"/>
        <function-ref name="clearOption" scoped="" ref="0xb5e77d70"/>
        <function-ref name="getEtx" scoped="" ref="0xb5e77e50"/>
        <function-ref name="getOrigin" scoped="" ref="0xb5e76010"/>
        <function-ref name="setType" scoped="" ref="0xb5e760f0"/>
        <function-ref name="setOption" scoped="" ref="0xb5e761d0"/>
        <function-ref name="matchPacket" scoped="" ref="0xb5e762b0"/>
        <function-ref name="getThl" scoped="" ref="0xb5e76390"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0xb5e76470"/>
        <function-ref name="matchInstance" scoped="" ref="0xb5e76550"/>
        <function-ref name="getType" scoped="" ref="0xb5e766b0"/>
        <function-ref name="setThl" scoped="" ref="0xb5e76790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb6749838" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="CtpP.RoutingBeaconTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb6749838"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6747368"/>
        <function-ref name="fired" scoped="" ref="0xb67485e8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb6748cf0"/>
        <function-ref name="isOneShot" scoped="" ref="0xb6748a98"/>
        <function-ref name="getdt" scoped="" ref="0xb6747818"/>
        <function-ref name="gett0" scoped="" ref="0xb67475c0"/>
        <function-ref name="isRunning" scoped="" ref="0xb6748840"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb6749e60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb6747048"/>
        <function-ref name="startOneShot" scoped="" ref="0xb6748110"/>
        <function-ref name="stop" scoped="" ref="0xb6748390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb6745670" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="CtpP.RouteUpdateTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb6745670"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb6743170"/>
        <function-ref name="fired" scoped="" ref="0xb6744408"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb6744b10"/>
        <function-ref name="isOneShot" scoped="" ref="0xb67448b8"/>
        <function-ref name="getdt" scoped="" ref="0xb6743620"/>
        <function-ref name="gett0" scoped="" ref="0xb67433c8"/>
        <function-ref name="isRunning" scoped="" ref="0xb6744660"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb6745c98"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb6744e30"/>
        <function-ref name="startOneShot" scoped="" ref="0xb6745f18"/>
        <function-ref name="stop" scoped="" ref="0xb67441b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb6735300" loc="57:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb6735300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb67354d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkEstimator" ref="0xb673bb10" loc="47:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkEstimator" scoped="" ref="0xb673bb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkEstimator"/>
      </instance>
      <interface-functions>
        <function-ref name="txAck" scoped="" ref="0xb673bce8"/>
        <function-ref name="pinNeighbor" scoped="" ref="0xb673bdc8"/>
        <function-ref name="txNoAck" scoped="" ref="0xb673bea8"/>
        <function-ref name="insertNeighbor" scoped="" ref="0xb673a010"/>
        <function-ref name="evicted" scoped="" ref="0xb673a0f0"/>
        <function-ref name="clearDLQ" scoped="" ref="0xb673a1d0"/>
        <function-ref name="unpinNeighbor" scoped="" ref="0xb673a2b0"/>
        <function-ref name="getLinkQuality" scoped="" ref="0xb673a390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb673a858" loc="49:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb673a858"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb673aa30"/>
        <function-ref name="payloadLength" scoped="" ref="0xb673ab10"/>
        <function-ref name="getPayload" scoped="" ref="0xb673abf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb673acd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb673adb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0xb6736698" loc="54:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb6736698"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6736870"/>
        <function-ref name="getPayload" scoped="" ref="0xb6736950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6736a30"/>
        <function-ref name="cancel" scoped="" ref="0xb6736b10"/>
        <function-ref name="sendDone" scoped="" ref="0xb6736bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb673b090" loc="45:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb673b090"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb673b268"/>
        <function-ref name="getPayload" scoped="" ref="0xb673b348"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb673b428"/>
        <function-ref name="cancel" scoped="" ref="0xb673b508"/>
        <function-ref name="sendDone" scoped="" ref="0xb673b5e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0xb6735a28" loc="59:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0xb6735a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0xb6735c80"/>
        <function-ref name="rand32" scoped="" ref="0xb6735d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0xb6737ad0" loc="56:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0xb6737ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6737ca8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6737d88"/>
        <function-ref name="getPayload" scoped="" ref="0xb6737e68"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6735010"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb67350f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb673a500" loc="48:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb673a500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb673a6d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubAMPacket" ref="0xb6736e18" loc="55:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubAMPacket" scoped="" ref="0xb6736e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6737010"/>
        <function-ref name="source" scoped="" ref="0xb67370f0"/>
        <function-ref name="address" scoped="" ref="0xb67371d0"/>
        <function-ref name="destination" scoped="" ref="0xb67372b0"/>
        <function-ref name="setSource" scoped="" ref="0xb6737390"/>
        <function-ref name="setDestination" scoped="" ref="0xb6737470"/>
        <function-ref name="type" scoped="" ref="0xb6737550"/>
        <function-ref name="setType" scoped="" ref="0xb6737630"/>
        <function-ref name="isForMe" scoped="" ref="0xb6737710"/>
        <function-ref name="setGroup" scoped="" ref="0xb67377f0"/>
        <function-ref name="localGroup" scoped="" ref="0xb67378d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb673b770" loc="46:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb673b770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb673b948"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareBit" ref="0xb6736300" loc="50:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareBit" scoped="" ref="0xb6736300"/></type-interface>
      <instance>
        <interfacedef-ref qname="CompareBit"/>
      </instance>
      <interface-functions>
        <function-ref name="shouldInsert" scoped="" ref="0xb67364d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb673cbd0" loc="44:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb673cbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb673cda8"/>
        <function-ref name="stop" scoped="" ref="0xb673ce88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LinkPacketMetadata" ref="0xb67356d0" loc="58:../../tos/lib/net/4bitle/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0xb67356d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0xb67358a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb66cdbb8" loc="49:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb66cdbb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb66cdd90"/>
        <function-ref name="getPayload" scoped="" ref="0xb66cde70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb66cc010"/>
        <function-ref name="cancel" scoped="" ref="0xb66cc0f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb66cc1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb66cc310" loc="50:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb66cc310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb66cc4e8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb66cc5c8"/>
        <function-ref name="getPayload" scoped="" ref="0xb66cc6a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb66cc788"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb66cc868"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb66cc9a8" loc="51:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb66cc9a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb66ccb80"/>
        <function-ref name="source" scoped="" ref="0xb66ccc60"/>
        <function-ref name="address" scoped="" ref="0xb66ccd40"/>
        <function-ref name="destination" scoped="" ref="0xb66cce20"/>
        <function-ref name="setSource" scoped="" ref="0xb66ccf00"/>
        <function-ref name="setDestination" scoped="" ref="0xb6682010"/>
        <function-ref name="type" scoped="" ref="0xb66820f0"/>
        <function-ref name="setType" scoped="" ref="0xb66821d0"/>
        <function-ref name="isForMe" scoped="" ref="0xb66822b0"/>
        <function-ref name="setGroup" scoped="" ref="0xb6682390"/>
        <function-ref name="localGroup" scoped="" ref="0xb6682470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0xb66825d0" loc="52:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0xb66825d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb66827a8"/>
        <function-ref name="noAck" scoped="" ref="0xb6682888"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6682968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb5e629e8" loc="49:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb5e629e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5e62bc0"/>
        <function-ref name="getPayload" scoped="" ref="0xb5e62ca0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5e62d80"/>
        <function-ref name="cancel" scoped="" ref="0xb5e62e60"/>
        <function-ref name="sendDone" scoped="" ref="0xb5e5f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb5e5f150" loc="50:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb5e5f150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5e5f328"/>
        <function-ref name="payloadLength" scoped="" ref="0xb5e5f408"/>
        <function-ref name="getPayload" scoped="" ref="0xb5e5f4e8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5e5f5c8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb5e5f6a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb5e5f7e8" loc="51:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb5e5f7e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb5e5f9c0"/>
        <function-ref name="source" scoped="" ref="0xb5e5faa0"/>
        <function-ref name="address" scoped="" ref="0xb5e5fb80"/>
        <function-ref name="destination" scoped="" ref="0xb5e5fc60"/>
        <function-ref name="setSource" scoped="" ref="0xb5e5fd40"/>
        <function-ref name="setDestination" scoped="" ref="0xb5e5fe20"/>
        <function-ref name="type" scoped="" ref="0xb5e5ff00"/>
        <function-ref name="setType" scoped="" ref="0xb5e5e010"/>
        <function-ref name="isForMe" scoped="" ref="0xb5e5e0f0"/>
        <function-ref name="setGroup" scoped="" ref="0xb5e5e1d0"/>
        <function-ref name="localGroup" scoped="" ref="0xb5e5e2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0xb5e5e410" loc="52:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0xb5e5e410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb5e5e5e8"/>
        <function-ref name="noAck" scoped="" ref="0xb5e5e6c8"/>
        <function-ref name="wasAcked" scoped="" ref="0xb5e5e7a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb5e58060" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb5e58060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5e58238"/>
        <function-ref name="getPayload" scoped="" ref="0xb5e58318"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5e583f8"/>
        <function-ref name="cancel" scoped="" ref="0xb5e584d8"/>
        <function-ref name="sendDone" scoped="" ref="0xb5e585b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0xb5e58728" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb5e58728"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5e58900"/>
        <function-ref name="getPayload" scoped="" ref="0xb5e589e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5e58ac0"/>
        <function-ref name="cancel" scoped="" ref="0xb5e58ba0"/>
        <function-ref name="sendDone" scoped="" ref="0xb5e58c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb5e58dc0" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb5e58dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb5e57010"/>
        <function-ref name="source" scoped="" ref="0xb5e570f0"/>
        <function-ref name="address" scoped="" ref="0xb5e571d0"/>
        <function-ref name="destination" scoped="" ref="0xb5e572b0"/>
        <function-ref name="setSource" scoped="" ref="0xb5e57390"/>
        <function-ref name="setDestination" scoped="" ref="0xb5e57470"/>
        <function-ref name="type" scoped="" ref="0xb5e57550"/>
        <function-ref name="setType" scoped="" ref="0xb5e57630"/>
        <function-ref name="isForMe" scoped="" ref="0xb5e57710"/>
        <function-ref name="setGroup" scoped="" ref="0xb5e577f0"/>
        <function-ref name="localGroup" scoped="" ref="0xb5e578d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb66b8da0" loc="43:../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb66b8da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb66b5010"/>
        <function-ref name="getPayload" scoped="" ref="0xb66b50f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb66b51d0"/>
        <function-ref name="cancel" scoped="" ref="0xb66b52b0"/>
        <function-ref name="sendDone" scoped="" ref="0xb66b5390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0xb668c3d8" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb668c3d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb668c5c0"/>
        <function-ref name="getPayload" scoped="" ref="0xb668c6a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb668c780"/>
        <function-ref name="cancel" scoped="" ref="0xb668c860"/>
        <function-ref name="sendDone" scoped="" ref="0xb668c940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb66b3be0" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb66b3be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb66b3dc8"/>
        <function-ref name="getPayload" scoped="" ref="0xb66b3ea8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb668c010"/>
        <function-ref name="cancel" scoped="" ref="0xb668c0f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb668c1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0xb668b690" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb668b690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb668b868"/>
        <function-ref name="payloadLength" scoped="" ref="0xb668b948"/>
        <function-ref name="getPayload" scoped="" ref="0xb668ba28"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb668bb08"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb668bbe8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0xb668bd68" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0xb668bd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb668a010"/>
        <function-ref name="runTask" scoped="" ref="0xb668a0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0xb668a270" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0xb668a270"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb668a448"/>
        <function-ref name="runTask" scoped="" ref="0xb668a528"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb668ca80" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb668ca80"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb668cc58"/>
        <function-ref name="source" scoped="" ref="0xb668cd38"/>
        <function-ref name="address" scoped="" ref="0xb668ce18"/>
        <function-ref name="destination" scoped="" ref="0xb668cef8"/>
        <function-ref name="setSource" scoped="" ref="0xb668b010"/>
        <function-ref name="setDestination" scoped="" ref="0xb668b0f0"/>
        <function-ref name="type" scoped="" ref="0xb668b1d0"/>
        <function-ref name="setType" scoped="" ref="0xb668b2b0"/>
        <function-ref name="isForMe" scoped="" ref="0xb668b390"/>
        <function-ref name="setGroup" scoped="" ref="0xb668b470"/>
        <function-ref name="localGroup" scoped="" ref="0xb668b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb667c348" loc="46:../../tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb667c348"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb667c520"/>
        <function-ref name="payloadLength" scoped="" ref="0xb667c600"/>
        <function-ref name="getPayload" scoped="" ref="0xb667c6e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb667c7c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb667c8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb667c030" loc="45:../../tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb667c030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb667c208"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb667c9e0" loc="47:../../tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb667c9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb667cbb8"/>
        <function-ref name="source" scoped="" ref="0xb667cc98"/>
        <function-ref name="address" scoped="" ref="0xb667cd78"/>
        <function-ref name="destination" scoped="" ref="0xb667ce58"/>
        <function-ref name="setSource" scoped="" ref="0xb667b010"/>
        <function-ref name="setDestination" scoped="" ref="0xb667b0f0"/>
        <function-ref name="type" scoped="" ref="0xb667b1d0"/>
        <function-ref name="setType" scoped="" ref="0xb667b2b0"/>
        <function-ref name="isForMe" scoped="" ref="0xb667b390"/>
        <function-ref name="setGroup" scoped="" ref="0xb667b470"/>
        <function-ref name="localGroup" scoped="" ref="0xb667b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6679d40" loc="47:../../tos/system/AMSnooperC.nc">
      <component-ref qname="CtpP.AMSnooperC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6679d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6679f18"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6678010"/>
        <function-ref name="getPayload" scoped="" ref="0xb66780f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb66781d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb66782b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6679a28" loc="46:../../tos/system/AMSnooperC.nc">
      <component-ref qname="CtpP.AMSnooperC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6679a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6679c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb66783f0" loc="48:../../tos/system/AMSnooperC.nc">
      <component-ref qname="CtpP.AMSnooperC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb66783f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb66785c8"/>
        <function-ref name="source" scoped="" ref="0xb66786a8"/>
        <function-ref name="address" scoped="" ref="0xb6678788"/>
        <function-ref name="destination" scoped="" ref="0xb6678868"/>
        <function-ref name="setSource" scoped="" ref="0xb6678948"/>
        <function-ref name="setDestination" scoped="" ref="0xb6678a28"/>
        <function-ref name="type" scoped="" ref="0xb6678b08"/>
        <function-ref name="setType" scoped="" ref="0xb6678be8"/>
        <function-ref name="isForMe" scoped="" ref="0xb6678cc8"/>
        <function-ref name="setGroup" scoped="" ref="0xb6678da8"/>
        <function-ref name="localGroup" scoped="" ref="0xb6678e88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RootControl" ref="0xb65e3608" loc="110:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0xb65e3608"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0xb65e37e0"/>
        <function-ref name="setRoot" scoped="" ref="0xb65e38c0"/>
        <function-ref name="unsetRoot" scoped="" ref="0xb65e39a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateRouteTask" ref="0xb65d89c0" loc="269:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateRouteTask" scoped="" ref="0xb65d89c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb65d8b98"/>
        <function-ref name="runTask" scoped="" ref="0xb65d8c78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionDebug" ref="0xb65d96f8" loc="125:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0xb65d96f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0xb65d98d0"/>
        <function-ref name="logEventMsg" scoped="" ref="0xb65d99b0"/>
        <function-ref name="logEventSimple" scoped="" ref="0xb65d9a90"/>
        <function-ref name="logEventRoute" scoped="" ref="0xb65d9b70"/>
        <function-ref name="logEventDbg" scoped="" ref="0xb65d9c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LinkEstimator" ref="0xb65e0220" loc="119:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkEstimator" scoped="" ref="0xb65e0220"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkEstimator"/>
      </instance>
      <interface-functions>
        <function-ref name="txAck" scoped="" ref="0xb65e03f8"/>
        <function-ref name="pinNeighbor" scoped="" ref="0xb65e04d8"/>
        <function-ref name="txNoAck" scoped="" ref="0xb65e05b8"/>
        <function-ref name="insertNeighbor" scoped="" ref="0xb65e0698"/>
        <function-ref name="evicted" scoped="" ref="0xb65e0778"/>
        <function-ref name="clearDLQ" scoped="" ref="0xb65e0858"/>
        <function-ref name="unpinNeighbor" scoped="" ref="0xb65e0938"/>
        <function-ref name="getLinkQuality" scoped="" ref="0xb65e0a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpRoutingPacket" ref="0xb65e2b68" loc="113:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpRoutingPacket" scoped="" ref="0xb65e2b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpRoutingPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clearOptions" scoped="" ref="0xb65e2d40"/>
        <function-ref name="setEtx" scoped="" ref="0xb65e2e20"/>
        <function-ref name="clearOption" scoped="" ref="0xb65e2f00"/>
        <function-ref name="getEtx" scoped="" ref="0xb65e1010"/>
        <function-ref name="setOption" scoped="" ref="0xb65e10f0"/>
        <function-ref name="setParent" scoped="" ref="0xb65e11d0"/>
        <function-ref name="getParent" scoped="" ref="0xb65e12b0"/>
        <function-ref name="getOption" scoped="" ref="0xb65e1390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0xb65df790" loc="121:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0xb65df790"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb65df968"/>
        <function-ref name="stopDone" scoped="" ref="0xb65dfa48"/>
        <function-ref name="start" scoped="" ref="0xb65dfb28"/>
        <function-ref name="stop" scoped="" ref="0xb65dfc08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0xb65d9300" loc="124:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0xb65d9300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0xb65d94d8"/>
        <function-ref name="rand32" scoped="" ref="0xb65d95b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpInfo" ref="0xb65e3ae0" loc="111:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpInfo" scoped="" ref="0xb65e3ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getNeighborLinkQuality" scoped="" ref="0xb65e3cb8"/>
        <function-ref name="recomputeRoutes" scoped="" ref="0xb65e3d98"/>
        <function-ref name="numNeighbors" scoped="" ref="0xb65e3e78"/>
        <function-ref name="triggerRouteUpdate" scoped="" ref="0xb65e2010"/>
        <function-ref name="getEtx" scoped="" ref="0xb65e20f0"/>
        <function-ref name="triggerImmediateRouteUpdate" scoped="" ref="0xb65e21d0"/>
        <function-ref name="setNeighborCongested" scoped="" ref="0xb65e22b0"/>
        <function-ref name="getNeighborAddr" scoped="" ref="0xb65e2390"/>
        <function-ref name="getParent" scoped="" ref="0xb65e2470"/>
        <function-ref name="getNeighborRouteQuality" scoped="" ref="0xb65e2550"/>
        <function-ref name="isNeighborCongested" scoped="" ref="0xb65e2630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendBeaconTask" ref="0xb65d8588" loc="388:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendBeaconTask" scoped="" ref="0xb65d8588"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb65d8760"/>
        <function-ref name="runTask" scoped="" ref="0xb65d8840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb65e14d0" loc="114:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb65e14d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb65e16a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BeaconSend" ref="0xb65e1838" loc="117:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BeaconSend" scoped="" ref="0xb65e1838"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb65e1a10"/>
        <function-ref name="getPayload" scoped="" ref="0xb65e1af0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65e1bd0"/>
        <function-ref name="cancel" scoped="" ref="0xb65e1cb0"/>
        <function-ref name="sendDone" scoped="" ref="0xb65e1d90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BeaconTimer" ref="0xb65dfdf8" loc="122:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BeaconTimer" scoped="" ref="0xb65dfdf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb65dd900"/>
        <function-ref name="fired" scoped="" ref="0xb65deba0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb65dd2c0"/>
        <function-ref name="isOneShot" scoped="" ref="0xb65dd068"/>
        <function-ref name="getdt" scoped="" ref="0xb65dddb0"/>
        <function-ref name="gett0" scoped="" ref="0xb65ddb58"/>
        <function-ref name="isRunning" scoped="" ref="0xb65dedf8"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb65de448"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb65dd5e0"/>
        <function-ref name="startOneShot" scoped="" ref="0xb65de6c8"/>
        <function-ref name="stop" scoped="" ref="0xb65de948"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RouteTimer" ref="0xb65db0c0" loc="123:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RouteTimer" scoped="" ref="0xb65db0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb65dac20"/>
        <function-ref name="fired" scoped="" ref="0xb65dbec0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb65da5e0"/>
        <function-ref name="isOneShot" scoped="" ref="0xb65da388"/>
        <function-ref name="getdt" scoped="" ref="0xb65d90f0"/>
        <function-ref name="gett0" scoped="" ref="0xb65dae78"/>
        <function-ref name="isRunning" scoped="" ref="0xb65da130"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb65db768"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb65da900"/>
        <function-ref name="startOneShot" scoped="" ref="0xb65db9e8"/>
        <function-ref name="stop" scoped="" ref="0xb65dbc68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CtpCongestion" ref="0xb65d9d90" loc="126:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpCongestion" scoped="" ref="0xb65d9d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpCongestion"/>
      </instance>
      <interface-functions>
        <function-ref name="isCongested" scoped="" ref="0xb65d8010"/>
        <function-ref name="setClientCongested" scoped="" ref="0xb65d80f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareBit" ref="0xb65d8230" loc="128:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareBit" scoped="" ref="0xb65d8230"/></type-interface>
      <instance>
        <interfacedef-ref qname="CompareBit"/>
      </instance>
      <interface-functions>
        <function-ref name="shouldInsert" scoped="" ref="0xb65d8408"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BeaconReceive" ref="0xb65e1ef0" loc="118:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BeaconReceive" scoped="" ref="0xb65e1ef0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb65e00e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb65e0b58" loc="120:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb65e0b58"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb65e0d30"/>
        <function-ref name="source" scoped="" ref="0xb65e0e10"/>
        <function-ref name="address" scoped="" ref="0xb65e0ef0"/>
        <function-ref name="destination" scoped="" ref="0xb65df010"/>
        <function-ref name="setSource" scoped="" ref="0xb65df0f0"/>
        <function-ref name="setDestination" scoped="" ref="0xb65df1d0"/>
        <function-ref name="type" scoped="" ref="0xb65df2b0"/>
        <function-ref name="setType" scoped="" ref="0xb65df390"/>
        <function-ref name="isForMe" scoped="" ref="0xb65df470"/>
        <function-ref name="setGroup" scoped="" ref="0xb65df550"/>
        <function-ref name="localGroup" scoped="" ref="0xb65df630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb65e2770" loc="112:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb65e2770"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb65e2948"/>
        <function-ref name="stop" scoped="" ref="0xb65e2a28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Routing" ref="0xb65e3050" loc="109:../../tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Routing" scoped="" ref="0xb65e3050"/></type-interface>
      <instance>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
      </instance>
      <interface-functions>
        <function-ref name="hasRoute" scoped="" ref="0xb65e3228"/>
        <function-ref name="routeFound" scoped="" ref="0xb65e3308"/>
        <function-ref name="nextHop" scoped="" ref="0xb65e33e8"/>
        <function-ref name="noRoute" scoped="" ref="0xb65e34c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb65d2d90" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="CtpP.RetxmitTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb65d2d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730d340"/>
            <typename><typedef-ref name="TMilli" ref="0xb730d508"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0xb65d08a8"/>
        <function-ref name="fired" scoped="" ref="0xb65d1b38"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0xb65d0268"/>
        <function-ref name="isOneShot" scoped="" ref="0xb65d0010"/>
        <function-ref name="getdt" scoped="" ref="0xb65d0d58"/>
        <function-ref name="gett0" scoped="" ref="0xb65d0b00"/>
        <function-ref name="isRunning" scoped="" ref="0xb65d1d90"/>
        <function-ref name="startPeriodic" scoped="" ref="0xb65d13e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0xb65d0588"/>
        <function-ref name="startOneShot" scoped="" ref="0xb65d1660"/>
        <function-ref name="stop" scoped="" ref="0xb65d18e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb65cc1f8" loc="49:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.SendControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb65cc1f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb65cc3d0"/>
        <function-ref name="getPayload" scoped="" ref="0xb65cc4b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65cc590"/>
        <function-ref name="cancel" scoped="" ref="0xb65cc670"/>
        <function-ref name="sendDone" scoped="" ref="0xb65cc750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb65cc890" loc="50:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.SendControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb65cc890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb65cca68"/>
        <function-ref name="payloadLength" scoped="" ref="0xb65ccb48"/>
        <function-ref name="getPayload" scoped="" ref="0xb65ccc28"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65ccd08"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb65ccde8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb65ccf28" loc="51:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.SendControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb65ccf28"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb65cb110"/>
        <function-ref name="source" scoped="" ref="0xb65cb1f0"/>
        <function-ref name="address" scoped="" ref="0xb65cb2d0"/>
        <function-ref name="destination" scoped="" ref="0xb65cb3b0"/>
        <function-ref name="setSource" scoped="" ref="0xb65cb490"/>
        <function-ref name="setDestination" scoped="" ref="0xb65cb570"/>
        <function-ref name="type" scoped="" ref="0xb65cb650"/>
        <function-ref name="setType" scoped="" ref="0xb65cb730"/>
        <function-ref name="isForMe" scoped="" ref="0xb65cb810"/>
        <function-ref name="setGroup" scoped="" ref="0xb65cb8f0"/>
        <function-ref name="localGroup" scoped="" ref="0xb65cb9d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0xb65cbb30" loc="52:../../tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.SendControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0xb65cbb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb65cbd08"/>
        <function-ref name="noAck" scoped="" ref="0xb65cbde8"/>
        <function-ref name="wasAcked" scoped="" ref="0xb65cbec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb5dedcf0" loc="49:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.SendControl.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb5dedcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5dedec8"/>
        <function-ref name="getPayload" scoped="" ref="0xb5de9010"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5de90f0"/>
        <function-ref name="cancel" scoped="" ref="0xb5de91d0"/>
        <function-ref name="sendDone" scoped="" ref="0xb5de92b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb5de93f0" loc="50:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.SendControl.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb5de93f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5de95c8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb5de96a8"/>
        <function-ref name="getPayload" scoped="" ref="0xb5de9788"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5de9868"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb5de9948"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb5de9a88" loc="51:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.SendControl.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb5de9a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb5de9c60"/>
        <function-ref name="source" scoped="" ref="0xb5de9d40"/>
        <function-ref name="address" scoped="" ref="0xb5de9e20"/>
        <function-ref name="destination" scoped="" ref="0xb5de9f00"/>
        <function-ref name="setSource" scoped="" ref="0xb5de8010"/>
        <function-ref name="setDestination" scoped="" ref="0xb5de80f0"/>
        <function-ref name="type" scoped="" ref="0xb5de81d0"/>
        <function-ref name="setType" scoped="" ref="0xb5de82b0"/>
        <function-ref name="isForMe" scoped="" ref="0xb5de8390"/>
        <function-ref name="setGroup" scoped="" ref="0xb5de8470"/>
        <function-ref name="localGroup" scoped="" ref="0xb5de8550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0xb5de86b0" loc="52:../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.SendControl.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0xb5de86b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb5de8888"/>
        <function-ref name="noAck" scoped="" ref="0xb5de8968"/>
        <function-ref name="wasAcked" scoped="" ref="0xb5de8a48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb5de33d0" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.SendControl.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb5de33d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5de35a8"/>
        <function-ref name="getPayload" scoped="" ref="0xb5de3688"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5de3768"/>
        <function-ref name="cancel" scoped="" ref="0xb5de3848"/>
        <function-ref name="sendDone" scoped="" ref="0xb5de3928"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0xb5de3a98" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.SendControl.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb5de3a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5de3c70"/>
        <function-ref name="getPayload" scoped="" ref="0xb5de3d50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5de3e30"/>
        <function-ref name="cancel" scoped="" ref="0xb5de3f10"/>
        <function-ref name="sendDone" scoped="" ref="0xb5de2010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb5de2150" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.SendControl.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb5de2150"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb5de2328"/>
        <function-ref name="source" scoped="" ref="0xb5de2408"/>
        <function-ref name="address" scoped="" ref="0xb5de24e8"/>
        <function-ref name="destination" scoped="" ref="0xb5de25c8"/>
        <function-ref name="setSource" scoped="" ref="0xb5de26a8"/>
        <function-ref name="setDestination" scoped="" ref="0xb5de2788"/>
        <function-ref name="type" scoped="" ref="0xb5de2868"/>
        <function-ref name="setType" scoped="" ref="0xb5de2948"/>
        <function-ref name="isForMe" scoped="" ref="0xb5de2a28"/>
        <function-ref name="setGroup" scoped="" ref="0xb5de2b08"/>
        <function-ref name="localGroup" scoped="" ref="0xb5de2be8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb65c8510" loc="46:../../tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.ReceiveControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb65c8510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb65c86e8"/>
        <function-ref name="payloadLength" scoped="" ref="0xb65c87c8"/>
        <function-ref name="getPayload" scoped="" ref="0xb65c88a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65c8988"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb65c8a68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb65c81f8" loc="45:../../tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.ReceiveControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb65c81f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb65c83d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb65c8ba8" loc="47:../../tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.ReceiveControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb65c8ba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb65c8d80"/>
        <function-ref name="source" scoped="" ref="0xb65c8e60"/>
        <function-ref name="address" scoped="" ref="0xb65c7010"/>
        <function-ref name="destination" scoped="" ref="0xb65c70f0"/>
        <function-ref name="setSource" scoped="" ref="0xb65c71d0"/>
        <function-ref name="setDestination" scoped="" ref="0xb65c72b0"/>
        <function-ref name="type" scoped="" ref="0xb65c7390"/>
        <function-ref name="setType" scoped="" ref="0xb65c7470"/>
        <function-ref name="isForMe" scoped="" ref="0xb65c7550"/>
        <function-ref name="setGroup" scoped="" ref="0xb65c7630"/>
        <function-ref name="localGroup" scoped="" ref="0xb65c7710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb65b4d40" loc="46:../../tos/lib/net/ctp/CollectionSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.CollectionSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb65b4d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb65b4f18"/>
        <function-ref name="payloadLength" scoped="" ref="0xb65b3010"/>
        <function-ref name="getPayload" scoped="" ref="0xb65b30f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65b31d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb65b32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb65b46a8" loc="45:../../tos/lib/net/ctp/CollectionSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.CollectionSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb65b46a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb65b4880"/>
        <function-ref name="getPayload" scoped="" ref="0xb65b4960"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65b4a40"/>
        <function-ref name="cancel" scoped="" ref="0xb65b4b20"/>
        <function-ref name="sendDone" scoped="" ref="0xb65b4c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb5dd4d48" loc="38:../../tos/lib/net/ctp/CollectionSenderP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb5dd4d48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb5dd4f20"/>
        <function-ref name="payloadLength" scoped="" ref="0xb5dd3018"/>
        <function-ref name="getPayload" scoped="" ref="0xb5dd30f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5dd31d8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb5dd32b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb5dd46b0" loc="37:../../tos/lib/net/ctp/CollectionSenderP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb5dd46b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5dd4888"/>
        <function-ref name="getPayload" scoped="" ref="0xb5dd4968"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5dd4a48"/>
        <function-ref name="cancel" scoped="" ref="0xb5dd4b28"/>
        <function-ref name="sendDone" scoped="" ref="0xb5dd4c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionId" ref="0xb5dd2e10" loc="46:../../tos/lib/net/CollectionIdP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.CollectionSenderC.CollectionSenderP.CollectionIdP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionId" scoped="" ref="0xb5dd2e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionId"/>
      </instance>
      <interface-functions>
        <function-ref name="fetch" scoped="" ref="0xb5dd0010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb65b3e68" loc="46:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb65b3e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb65a6050"/>
        <function-ref name="stopDone" scoped="" ref="0xb65a6130"/>
        <function-ref name="start" scoped="" ref="0xb65a6210"/>
        <function-ref name="stop" scoped="" ref="0xb65a62f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb65a6750" loc="47:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb65a6750"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb65a6928"/>
        <function-ref name="getPayload" scoped="" ref="0xb65a6a08"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65a6ae8"/>
        <function-ref name="cancel" scoped="" ref="0xb65a6bc8"/>
        <function-ref name="sendDone" scoped="" ref="0xb65a6ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb65a5478" loc="49:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb65a5478"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb65a5650"/>
        <function-ref name="payloadLength" scoped="" ref="0xb65a5730"/>
        <function-ref name="getPayload" scoped="" ref="0xb65a5810"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb65a58f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb65a59d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb65a5120" loc="48:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb65a5120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb65a52f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb65a2d88" loc="53:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb65a2d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb65a0010"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb65a00f0"/>
        <function-ref name="led1On" scoped="" ref="0xb65a01d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb65a02b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb65a0390"/>
        <function-ref name="get" scoped="" ref="0xb65a0470"/>
        <function-ref name="led1Off" scoped="" ref="0xb65a0550"/>
        <function-ref name="led2Off" scoped="" ref="0xb65a08d0"/>
        <function-ref name="set" scoped="" ref="0xb65a0630"/>
        <function-ref name="led0On" scoped="" ref="0xb65a0710"/>
        <function-ref name="led2On" scoped="" ref="0xb65a07f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0xb65a2850" loc="51:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb65a2850"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb65a2a28"/>
        <function-ref name="noAck" scoped="" ref="0xb65a2b08"/>
        <function-ref name="wasAcked" scoped="" ref="0xb65a2be8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb65a5b68" loc="50:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb65a5b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb65a5d40"/>
        <function-ref name="source" scoped="" ref="0xb65a5e20"/>
        <function-ref name="address" scoped="" ref="0xb65a5f00"/>
        <function-ref name="destination" scoped="" ref="0xb65a2010"/>
        <function-ref name="setSource" scoped="" ref="0xb65a20f0"/>
        <function-ref name="setDestination" scoped="" ref="0xb65a21d0"/>
        <function-ref name="type" scoped="" ref="0xb65a22b0"/>
        <function-ref name="setType" scoped="" ref="0xb65a2390"/>
        <function-ref name="isForMe" scoped="" ref="0xb65a2470"/>
        <function-ref name="setGroup" scoped="" ref="0xb65a2550"/>
        <function-ref name="localGroup" scoped="" ref="0xb65a2630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0xb656d360" loc="54:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0xb656d360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb656d538"/>
        <function-ref name="getPayload" scoped="" ref="0xb656d618"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb656d6f8"/>
        <function-ref name="cancel" scoped="" ref="0xb656d7d8"/>
        <function-ref name="sendDone" scoped="" ref="0xb656d8b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0xb656da18" loc="55:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0xb656da18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb656dbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb659f108" loc="47:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb659f108"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb659f2f0"/>
        <function-ref name="getPayload" scoped="" ref="0xb659f3d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb659f4b0"/>
        <function-ref name="cancel" scoped="" ref="0xb659f590"/>
        <function-ref name="sendDone" scoped="" ref="0xb659f670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb659e770" loc="50:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb659e770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb659e948"/>
        <function-ref name="payloadLength" scoped="" ref="0xb659ea28"/>
        <function-ref name="getPayload" scoped="" ref="0xb659eb08"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb659ebe8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb659ecc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb659f848" loc="48:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb659f848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb659fa30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0xb659ee08" loc="51:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0xb659ee08"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb656d010"/>
        <function-ref name="noAck" scoped="" ref="0xb656d0f0"/>
        <function-ref name="wasAcked" scoped="" ref="0xb656d1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb659fb70" loc="49:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb659fb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb659fd48"/>
        <function-ref name="source" scoped="" ref="0xb659fe28"/>
        <function-ref name="address" scoped="" ref="0xb659ff08"/>
        <function-ref name="destination" scoped="" ref="0xb659e010"/>
        <function-ref name="setSource" scoped="" ref="0xb659e0f0"/>
        <function-ref name="setDestination" scoped="" ref="0xb659e1d0"/>
        <function-ref name="type" scoped="" ref="0xb659e2b0"/>
        <function-ref name="setType" scoped="" ref="0xb659e390"/>
        <function-ref name="isForMe" scoped="" ref="0xb659e470"/>
        <function-ref name="setGroup" scoped="" ref="0xb659e550"/>
        <function-ref name="localGroup" scoped="" ref="0xb659e630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb65691d0" loc="50:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb65691d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb65693a8"/>
        <function-ref name="stopDone" scoped="" ref="0xb6569488"/>
        <function-ref name="start" scoped="" ref="0xb6569568"/>
        <function-ref name="stop" scoped="" ref="0xb6569648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6568100" loc="52:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6568100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0xb7180cd8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb65682d8"/>
        <function-ref name="getPayload" scoped="" ref="0xb65683b8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6568498"/>
        <function-ref name="cancel" scoped="" ref="0xb6568578"/>
        <function-ref name="sendDone" scoped="" ref="0xb6568658"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb656cdf0" loc="49:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb656cdf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb6569010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb6569a90" loc="51:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb6569a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0xb7180cd8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb6569c68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb6563ca8" loc="56:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb6563ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb6563e80"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb6567010"/>
        <function-ref name="led1On" scoped="" ref="0xb65670f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb65671d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb65672b0"/>
        <function-ref name="get" scoped="" ref="0xb6567390"/>
        <function-ref name="led1Off" scoped="" ref="0xb6567470"/>
        <function-ref name="led2Off" scoped="" ref="0xb65677f0"/>
        <function-ref name="set" scoped="" ref="0xb6567550"/>
        <function-ref name="led0On" scoped="" ref="0xb6567630"/>
        <function-ref name="led2On" scoped="" ref="0xb6567710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0xb65637a0" loc="55:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0xb65637a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0xb7180cd8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0xb6563978"/>
        <function-ref name="offset" scoped="" ref="0xb6563a58"/>
        <function-ref name="dataLinkLength" scoped="" ref="0xb6563b38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0xb6552280" loc="66:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0xb6552280"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0xb6552458"/>
        <function-ref name="stopDone" scoped="" ref="0xb6552538"/>
        <function-ref name="start" scoped="" ref="0xb6552618"/>
        <function-ref name="stop" scoped="" ref="0xb65526f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0xb65171e0" loc="332:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0xb65171e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb65173b8"/>
        <function-ref name="runTask" scoped="" ref="0xb6517498"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0xb654a260" loc="74:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0xb654a260"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb654a438"/>
        <function-ref name="stop" scoped="" ref="0xb654a518"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0xb6537518" loc="191:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0xb6537518"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb65376f0"/>
        <function-ref name="runTask" scoped="" ref="0xb65377d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb6553ec0" loc="65:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb6553ec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb65520c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0xb6544220" loc="75:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0xb6544220"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0xb65443f8"/>
        <function-ref name="flush" scoped="" ref="0xb65444d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0xb651a970" loc="322:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0xb651a970"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb651ab48"/>
        <function-ref name="runTask" scoped="" ref="0xb651ac28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0xb6547c10" loc="72:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0xb6547c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0xb6547de8"/>
        <function-ref name="resetSend" scoped="" ref="0xb6547ec8"/>
        <function-ref name="dataReceived" scoped="" ref="0xb654c010"/>
        <function-ref name="resetReceive" scoped="" ref="0xb654c0f0"/>
        <function-ref name="putData" scoped="" ref="0xb654c1d0"/>
        <function-ref name="putDone" scoped="" ref="0xb654c2b0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0xb654c390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb654c500" loc="73:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb654c500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb654c6d8"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb654c7b8"/>
        <function-ref name="led1On" scoped="" ref="0xb654c898"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb654c978"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb654ca58"/>
        <function-ref name="get" scoped="" ref="0xb654cb38"/>
        <function-ref name="led1Off" scoped="" ref="0xb654cc18"/>
        <function-ref name="led2Off" scoped="" ref="0xb654a010"/>
        <function-ref name="set" scoped="" ref="0xb654ccf8"/>
        <function-ref name="led0On" scoped="" ref="0xb654cdd8"/>
        <function-ref name="led2On" scoped="" ref="0xb654ceb8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0xb6516e08" loc="341:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0xb6516e08"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6515010"/>
        <function-ref name="runTask" scoped="" ref="0xb65150f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0xb654d960" loc="67:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0xb654d960"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0xb654db38"/>
        <function-ref name="nextByte" scoped="" ref="0xb654dc18"/>
        <function-ref name="startSend" scoped="" ref="0xb654dcf8"/>
        <function-ref name="sendCompleted" scoped="" ref="0xb654ddd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0xb654ba80" loc="68:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0xb654ba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0xb654bc58"/>
        <function-ref name="byteReceived" scoped="" ref="0xb654bd38"/>
        <function-ref name="endPacket" scoped="" ref="0xb654be18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0xb64a2030" loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0xb64a2030"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb64a2208"/>
        <function-ref name="runTask" scoped="" ref="0xb64a22e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb64ddc60" loc="51:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb64ddc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0xb7180cd8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb64dde48"/>
        <function-ref name="getPayload" scoped="" ref="0xb64ddf28"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb64a4018"/>
        <function-ref name="cancel" scoped="" ref="0xb64a40f8"/>
        <function-ref name="sendDone" scoped="" ref="0xb64a41d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0xb64a2468" loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0xb64a2468"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb64a2640"/>
        <function-ref name="runTask" scoped="" ref="0xb64a2720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0xb64dd8a0" loc="50:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0xb64dd8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0xb7180cd8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0xb64dda88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0xb64a4400" loc="54:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0xb64a4400"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0xb7180cd8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0xb64a45e8"/>
        <function-ref name="offset" scoped="" ref="0xb64a46c8"/>
        <function-ref name="dataLinkLength" scoped="" ref="0xb64a47a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb64a33f0" loc="57:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb64a33f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb64a35c8"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb64a36a8"/>
        <function-ref name="led1On" scoped="" ref="0xb64a3788"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb64a3868"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb64a3948"/>
        <function-ref name="get" scoped="" ref="0xb64a3a28"/>
        <function-ref name="led1Off" scoped="" ref="0xb64a3b08"/>
        <function-ref name="led2On" scoped="" ref="0xb64a3e88"/>
        <function-ref name="set" scoped="" ref="0xb64a3cc8"/>
        <function-ref name="led2Off" scoped="" ref="0xb64a3be8"/>
        <function-ref name="led0On" scoped="" ref="0xb64a3da8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0xb64a4dc0" loc="56:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0xb64a4dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0xb64a3010"/>
        <function-ref name="nextByte" scoped="" ref="0xb64a30f0"/>
        <function-ref name="startSend" scoped="" ref="0xb64a31d0"/>
        <function-ref name="sendCompleted" scoped="" ref="0xb64a32b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0xb64a48e8" loc="55:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0xb64a48e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0xb64a4ac0"/>
        <function-ref name="byteReceived" scoped="" ref="0xb64a4ba0"/>
        <function-ref name="endPacket" scoped="" ref="0xb64a4c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0xb6497b80" loc="50:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0xb6497b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6497d58"/>
        <function-ref name="receivedByte" scoped="" ref="0xb6497e38"/>
        <function-ref name="receive" scoped="" ref="0xb6497f18"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0xb649d010"/>
        <function-ref name="receiveDone" scoped="" ref="0xb649d0f0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0xb649d1d0"/>
        <function-ref name="sendDone" scoped="" ref="0xb649d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0xb64a1858" loc="48:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0xb64a1858"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0xb64a1a30"/>
        <function-ref name="resetSend" scoped="" ref="0xb64a1b10"/>
        <function-ref name="dataReceived" scoped="" ref="0xb64a1bf0"/>
        <function-ref name="resetReceive" scoped="" ref="0xb64a1cd0"/>
        <function-ref name="putData" scoped="" ref="0xb64a1db0"/>
        <function-ref name="putDone" scoped="" ref="0xb64a1e90"/>
        <function-ref name="delimiterReceived" scoped="" ref="0xb649e010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb649d420" loc="51:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0xb649d420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0xb649d5f8"/>
        <function-ref name="led0Toggle" scoped="" ref="0xb649d6d8"/>
        <function-ref name="led1On" scoped="" ref="0xb649d7b8"/>
        <function-ref name="led1Toggle" scoped="" ref="0xb649d898"/>
        <function-ref name="led2Toggle" scoped="" ref="0xb649d978"/>
        <function-ref name="get" scoped="" ref="0xb649da58"/>
        <function-ref name="led1Off" scoped="" ref="0xb649db38"/>
        <function-ref name="led2Off" scoped="" ref="0xb649deb8"/>
        <function-ref name="set" scoped="" ref="0xb649dc18"/>
        <function-ref name="led0On" scoped="" ref="0xb649dcf8"/>
        <function-ref name="led2On" scoped="" ref="0xb649ddd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0xb64846e8" loc="42:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0xb64846e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb64848c0"/>
        <function-ref name="receive" scoped="" ref="0xb64849a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0xb64a0860" loc="41:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0xb64a0860"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb64a0a38"/>
        <function-ref name="receivedByte" scoped="" ref="0xb64a0b18"/>
        <function-ref name="receive" scoped="" ref="0xb64a0bf8"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0xb64a0cd8"/>
        <function-ref name="receiveDone" scoped="" ref="0xb64a0db8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0xb64a0e98"/>
        <function-ref name="sendDone" scoped="" ref="0xb6487010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb64a03e0" loc="40:../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb64a03e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb64a05b8"/>
        <function-ref name="stop" scoped="" ref="0xb64a0698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0xb64835d8" loc="41:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0xb64835d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb64837b0"/>
        <function-ref name="receive" scoped="" ref="0xb6483890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0xb6483a58" loc="42:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0xb6483a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6483c30"/>
        <function-ref name="receivedByte" scoped="" ref="0xb6483d10"/>
        <function-ref name="receive" scoped="" ref="0xb6483df0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0xb6483ed0"/>
        <function-ref name="receiveDone" scoped="" ref="0xb6482010"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0xb64820f0"/>
        <function-ref name="sendDone" scoped="" ref="0xb64821d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0xb6482530" loc="43:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb6482530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6482c80"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb64801a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb6482ef8"/>
        <function-ref name="overflow" scoped="" ref="0xb6480418"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb6483168" loc="40:../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb6483168"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6483340"/>
        <function-ref name="stop" scoped="" ref="0xb6483420"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0xb647fe28" loc="50:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0xb647fe28"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb647e050"/>
        <function-ref name="receive" scoped="" ref="0xb647e130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0xb647eb28" loc="53:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0xb647eb28"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb647ed00"/>
        <function-ref name="stop" scoped="" ref="0xb647ede0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb647f6d8" loc="48:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb647f6d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb647f8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0xb647e290" loc="51:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0xb647e290"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb647e468"/>
        <function-ref name="receivedByte" scoped="" ref="0xb647e548"/>
        <function-ref name="receive" scoped="" ref="0xb647e628"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0xb647e708"/>
        <function-ref name="receiveDone" scoped="" ref="0xb647e7e8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0xb647e8c8"/>
        <function-ref name="sendDone" scoped="" ref="0xb647e9a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0xb64570a0" loc="56:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb64570a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb64577f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb6457ce0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb6457a68"/>
        <function-ref name="overflow" scoped="" ref="0xb6455010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0xb6458448" loc="55:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0xb6458448"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0xb6458620"/>
        <function-ref name="enableRxIntr" scoped="" ref="0xb6458700"/>
        <function-ref name="rxDone" scoped="" ref="0xb64587e0"/>
        <function-ref name="txDone" scoped="" ref="0xb64588c0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0xb64589a0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0xb6458a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0xb6458b60"/>
        <function-ref name="isRxEmpty" scoped="" ref="0xb6458c40"/>
        <function-ref name="tx" scoped="" ref="0xb6458d20"/>
        <function-ref name="rx" scoped="" ref="0xb6458e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb647fa10" loc="49:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0xb647fa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb647fbe8"/>
        <function-ref name="stop" scoped="" ref="0xb647fcc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0xb6458010" loc="54:../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0xb6458010"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb64581e8"/>
        <function-ref name="stop" scoped="" ref="0xb64582c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0xb6444508" loc="49:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0xb6444508"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0xb64446e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0xb64447c0"/>
        <function-ref name="rxDone" scoped="" ref="0xb64448a0"/>
        <function-ref name="txDone" scoped="" ref="0xb6444980"/>
        <function-ref name="enableTxIntr" scoped="" ref="0xb6444a60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0xb6444b40"/>
        <function-ref name="disableRxIntr" scoped="" ref="0xb6444c20"/>
        <function-ref name="isRxEmpty" scoped="" ref="0xb6444d00"/>
        <function-ref name="tx" scoped="" ref="0xb6444de0"/>
        <function-ref name="rx" scoped="" ref="0xb6444ec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0xb6442b80" loc="53:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0xb6442b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0xb6442d58"/>
        <function-ref name="enableRxIntr" scoped="" ref="0xb6442e38"/>
        <function-ref name="rxDone" scoped="" ref="0xb6442f18"/>
        <function-ref name="txDone" scoped="" ref="0xb6441010"/>
        <function-ref name="enableTxIntr" scoped="" ref="0xb64410f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0xb64411d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0xb64412b0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0xb6441390"/>
        <function-ref name="tx" scoped="" ref="0xb6441470"/>
        <function-ref name="rx" scoped="" ref="0xb6441550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0xb6444010" loc="48:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0xb6444010"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb64441e8"/>
        <function-ref name="stop" scoped="" ref="0xb64442c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0xb6442178" loc="51:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0xb6442178"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6442350"/>
        <function-ref name="stop" scoped="" ref="0xb6442430"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0xb6442688" loc="52:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0xb6442688"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6442860"/>
        <function-ref name="stop" scoped="" ref="0xb6442940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0xb6445a80" loc="47:../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0xb6445a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb6445c58"/>
        <function-ref name="stop" scoped="" ref="0xb6445d38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0xb6441d70" loc="114:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0xb6441d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb643e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0xb643ecd0" loc="117:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0xb643ecd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0xb643eea8"/>
        <function-ref name="enableRxIntr" scoped="" ref="0xb643d010"/>
        <function-ref name="rxDone" scoped="" ref="0xb643d0f0"/>
        <function-ref name="txDone" scoped="" ref="0xb643d1d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0xb643d2b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0xb643d390"/>
        <function-ref name="disableRxIntr" scoped="" ref="0xb643d470"/>
        <function-ref name="isRxEmpty" scoped="" ref="0xb643d550"/>
        <function-ref name="tx" scoped="" ref="0xb643d630"/>
        <function-ref name="rx" scoped="" ref="0xb643d710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0xb643d920" loc="119:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0xb643d920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb643daf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0xb643c880" loc="122:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0xb643c880"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0xb643ca58"/>
        <function-ref name="enableRxIntr" scoped="" ref="0xb643cb38"/>
        <function-ref name="rxDone" scoped="" ref="0xb643cc18"/>
        <function-ref name="txDone" scoped="" ref="0xb643ccf8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0xb643cdd8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0xb643ceb8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0xb643b010"/>
        <function-ref name="isRxEmpty" scoped="" ref="0xb643b0f0"/>
        <function-ref name="tx" scoped="" ref="0xb643b1d0"/>
        <function-ref name="rx" scoped="" ref="0xb643b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0xb643e7b8" loc="116:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0xb643e7b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb643e990"/>
        <function-ref name="stop" scoped="" ref="0xb643ea70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0xb643dd70" loc="120:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0xb643dd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb643c010"/>
        <function-ref name="stop" scoped="" ref="0xb643c0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0xb643c368" loc="121:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0xb643c368"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb643c540"/>
        <function-ref name="stop" scoped="" ref="0xb643c620"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0xb643b4a8" loc="124:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0xb643b4a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0xb643b680"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0xb643b760"/>
        <function-ref name="calibrateMicro" scoped="" ref="0xb643b840"/>
        <function-ref name="actualMicro" scoped="" ref="0xb643b920"/>
        <function-ref name="adcPrescaler" scoped="" ref="0xb643ba00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0xb643bbe8" loc="125:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0xb643bbe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0xb643bdc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0xb643e288" loc="115:../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0xb643e288"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0xb643e460"/>
        <function-ref name="stop" scoped="" ref="0xb643e540"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb6485868" loc="24:../../tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb6485868"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6405010"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb6405500"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb6405288"/>
        <function-ref name="overflow" scoped="" ref="0xb6405778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb64023c0" loc="24:../../tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb64023c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TThree" ref="0xb72e3010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6402b10"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb6401010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb6402d88"/>
        <function-ref name="overflow" scoped="" ref="0xb6401288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0xb63fa010" loc="80:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb63fa010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0xb63fa1e8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb63fa2c8"/>
        <function-ref name="getControlA" scoped="" ref="0xb63fa3a8"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb63fa488"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb63fa568"/>
        <function-ref name="setControlB" scoped="" ref="0xb63fa648"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb63fa728"/>
        <function-ref name="getControlB" scoped="" ref="0xb63fa808"/>
        <function-ref name="setControlC" scoped="" ref="0xb63fa8e8"/>
        <function-ref name="setControlA" scoped="" ref="0xb63fa9c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0xb63fad00" loc="81:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0xb63fad00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0xb63f87b0"/>
        <function-ref name="test" scoped="" ref="0xb63f82c0"/>
        <function-ref name="get" scoped="" ref="0xb63f9370"/>
        <function-ref name="captured" scoped="" ref="0xb63f9888"/>
        <function-ref name="reset" scoped="" ref="0xb63f9b28"/>
        <function-ref name="isOn" scoped="" ref="0xb63f8538"/>
        <function-ref name="set" scoped="" ref="0xb63f95e8"/>
        <function-ref name="start" scoped="" ref="0xb63f9da0"/>
        <function-ref name="stop" scoped="" ref="0xb63f8048"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0xb63f8ec0" loc="82:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0xb63f8ec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb63f5428"/>
        <function-ref name="fired" scoped="" ref="0xb63f6a38"/>
        <function-ref name="get" scoped="" ref="0xb63f6520"/>
        <function-ref name="reset" scoped="" ref="0xb63f6cb0"/>
        <function-ref name="isOn" scoped="" ref="0xb63f56a0"/>
        <function-ref name="set" scoped="" ref="0xb63f6798"/>
        <function-ref name="start" scoped="" ref="0xb63f6f28"/>
        <function-ref name="stop" scoped="" ref="0xb63f51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb6401d10" loc="79:../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb6401d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb63fb778"/>
        <function-ref name="test" scoped="" ref="0xb63fb288"/>
        <function-ref name="get" scoped="" ref="0xb63fd370"/>
        <function-ref name="setScale" scoped="" ref="0xb63fb9f0"/>
        <function-ref name="getScale" scoped="" ref="0xb63fbc90"/>
        <function-ref name="reset" scoped="" ref="0xb63fdb00"/>
        <function-ref name="overflow" scoped="" ref="0xb63fd888"/>
        <function-ref name="isOn" scoped="" ref="0xb63fb500"/>
        <function-ref name="set" scoped="" ref="0xb63fd5e8"/>
        <function-ref name="start" scoped="" ref="0xb63fdd78"/>
        <function-ref name="stop" scoped="" ref="0xb63fb010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0xb63ef648" loc="80:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0xb63ef648"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0xb63ef820"/>
        <function-ref name="getInterruptMask" scoped="" ref="0xb63ef900"/>
        <function-ref name="getControlA" scoped="" ref="0xb63ef9e0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0xb63efac0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0xb63efba0"/>
        <function-ref name="setControlB" scoped="" ref="0xb63efc80"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0xb63efd60"/>
        <function-ref name="getControlB" scoped="" ref="0xb63efe40"/>
        <function-ref name="setControlC" scoped="" ref="0xb63eff20"/>
        <function-ref name="setControlA" scoped="" ref="0xb63ee018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0xb63eb268" loc="82:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0xb63eb268"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb63ea7d0"/>
        <function-ref name="fired" scoped="" ref="0xb63ebdc8"/>
        <function-ref name="get" scoped="" ref="0xb63eb8b0"/>
        <function-ref name="reset" scoped="" ref="0xb63ea068"/>
        <function-ref name="isOn" scoped="" ref="0xb63eaa48"/>
        <function-ref name="set" scoped="" ref="0xb63ebb28"/>
        <function-ref name="start" scoped="" ref="0xb63ea2e0"/>
        <function-ref name="stop" scoped="" ref="0xb63ea558"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0xb63ee350" loc="81:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0xb63ee350"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0xb63ecdc8"/>
        <function-ref name="test" scoped="" ref="0xb63ec8d8"/>
        <function-ref name="get" scoped="" ref="0xb63ee998"/>
        <function-ref name="captured" scoped="" ref="0xb63eeeb0"/>
        <function-ref name="reset" scoped="" ref="0xb63ec170"/>
        <function-ref name="isOn" scoped="" ref="0xb63ecb50"/>
        <function-ref name="set" scoped="" ref="0xb63eec10"/>
        <function-ref name="start" scoped="" ref="0xb63ec3e8"/>
        <function-ref name="stop" scoped="" ref="0xb63ec660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0xb63eae60" loc="83:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0xb63eae60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb63e73e8"/>
        <function-ref name="fired" scoped="" ref="0xb63e99f0"/>
        <function-ref name="get" scoped="" ref="0xb63e94d8"/>
        <function-ref name="reset" scoped="" ref="0xb63e9c68"/>
        <function-ref name="isOn" scoped="" ref="0xb63e7660"/>
        <function-ref name="set" scoped="" ref="0xb63e9750"/>
        <function-ref name="start" scoped="" ref="0xb63e9ee0"/>
        <function-ref name="stop" scoped="" ref="0xb63e7170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0xb63e7a78" loc="84:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0xb63e7a78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0xb63e5010"/>
        <function-ref name="fired" scoped="" ref="0xb63e65f0"/>
        <function-ref name="get" scoped="" ref="0xb63e60d8"/>
        <function-ref name="reset" scoped="" ref="0xb63e6868"/>
        <function-ref name="isOn" scoped="" ref="0xb63e5288"/>
        <function-ref name="set" scoped="" ref="0xb63e6350"/>
        <function-ref name="start" scoped="" ref="0xb63e6ae0"/>
        <function-ref name="stop" scoped="" ref="0xb63e6d58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb63f2348" loc="79:../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb63f2348"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb63f0da8"/>
        <function-ref name="test" scoped="" ref="0xb63f08b8"/>
        <function-ref name="get" scoped="" ref="0xb63f2990"/>
        <function-ref name="setScale" scoped="" ref="0xb63ef048"/>
        <function-ref name="getScale" scoped="" ref="0xb63ef2e8"/>
        <function-ref name="reset" scoped="" ref="0xb63f0150"/>
        <function-ref name="overflow" scoped="" ref="0xb63f2ea8"/>
        <function-ref name="isOn" scoped="" ref="0xb63f0b30"/>
        <function-ref name="set" scoped="" ref="0xb63f2c08"/>
        <function-ref name="start" scoped="" ref="0xb63f03c8"/>
        <function-ref name="stop" scoped="" ref="0xb63f0640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb63a2670" loc="46:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb63a2670"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0xb73765d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0xb73765d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb63a2848"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb63a2a58" loc="47:../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb63a2a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb63a0500"/>
        <function-ref name="test" scoped="" ref="0xb63a0010"/>
        <function-ref name="get" scoped="" ref="0xb63a10b8"/>
        <function-ref name="setScale" scoped="" ref="0xb63a0778"/>
        <function-ref name="getScale" scoped="" ref="0xb63a0a18"/>
        <function-ref name="reset" scoped="" ref="0xb63a1848"/>
        <function-ref name="overflow" scoped="" ref="0xb63a15d0"/>
        <function-ref name="isOn" scoped="" ref="0xb63a0288"/>
        <function-ref name="set" scoped="" ref="0xb63a1330"/>
        <function-ref name="start" scoped="" ref="0xb63a1ac0"/>
        <function-ref name="stop" scoped="" ref="0xb63a1d38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb63a4ca8" loc="45:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb63a4ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TThree" ref="0xb72e3010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb63a3410"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb63a3900"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb63a3688"/>
        <function-ref name="overflow" scoped="" ref="0xb63a3b78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb63a3e58" loc="46:../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0xb63a3e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0xb639b8d8"/>
        <function-ref name="test" scoped="" ref="0xb639b3e8"/>
        <function-ref name="get" scoped="" ref="0xb639d4d8"/>
        <function-ref name="setScale" scoped="" ref="0xb639bb50"/>
        <function-ref name="getScale" scoped="" ref="0xb639bdf0"/>
        <function-ref name="reset" scoped="" ref="0xb639dc68"/>
        <function-ref name="overflow" scoped="" ref="0xb639d9f0"/>
        <function-ref name="isOn" scoped="" ref="0xb639b660"/>
        <function-ref name="set" scoped="" ref="0xb639d750"/>
        <function-ref name="start" scoped="" ref="0xb639dee0"/>
        <function-ref name="stop" scoped="" ref="0xb639b170"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0xb6399ec8" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0xb6399ec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TThree" ref="0xb72e3010"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6397680"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb6397b70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb63978f8"/>
        <function-ref name="overflow" scoped="" ref="0xb6397de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0xb6403c80" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0xb6403c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0xb730ddc0"/>
            <typename><typedef-ref name="TMicro" ref="0xb730b010"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb63993f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0xb63998e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0xb6399668"/>
        <function-ref name="overflow" scoped="" ref="0xb6399b58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0xb6394808" loc="47:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0xb6394808"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0xb63949e0"/>
        <function-ref name="offset" scoped="" ref="0xb6394ac0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0xb6394ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb638a760" loc="49:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb638a760"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb638a938"/>
        <function-ref name="getPayload" scoped="" ref="0xb638aa18"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb638aaf8"/>
        <function-ref name="cancel" scoped="" ref="0xb638abd8"/>
        <function-ref name="sendDone" scoped="" ref="0xb638acb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb638adf8" loc="50:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb638adf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb637a010"/>
        <function-ref name="payloadLength" scoped="" ref="0xb637a0f0"/>
        <function-ref name="getPayload" scoped="" ref="0xb637a1d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb637a2b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb637a390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb637a4d0" loc="51:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb637a4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb637a6a8"/>
        <function-ref name="source" scoped="" ref="0xb637a788"/>
        <function-ref name="address" scoped="" ref="0xb637a868"/>
        <function-ref name="destination" scoped="" ref="0xb637a948"/>
        <function-ref name="setSource" scoped="" ref="0xb637aa28"/>
        <function-ref name="setDestination" scoped="" ref="0xb637ab08"/>
        <function-ref name="type" scoped="" ref="0xb637abe8"/>
        <function-ref name="setType" scoped="" ref="0xb637acc8"/>
        <function-ref name="isForMe" scoped="" ref="0xb637ada8"/>
        <function-ref name="setGroup" scoped="" ref="0xb637ae88"/>
        <function-ref name="localGroup" scoped="" ref="0xb6379010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0xb6379170" loc="52:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0xb6379170"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb6379348"/>
        <function-ref name="noAck" scoped="" ref="0xb6379428"/>
        <function-ref name="wasAcked" scoped="" ref="0xb6379508"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb5d739f8" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb5d739f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5d73bd0"/>
        <function-ref name="getPayload" scoped="" ref="0xb5d73cb0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5d73d90"/>
        <function-ref name="cancel" scoped="" ref="0xb5d73e70"/>
        <function-ref name="sendDone" scoped="" ref="0xb5d70010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0xb5d70180" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb5d70180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5d70358"/>
        <function-ref name="getPayload" scoped="" ref="0xb5d70438"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5d70518"/>
        <function-ref name="cancel" scoped="" ref="0xb5d705f8"/>
        <function-ref name="sendDone" scoped="" ref="0xb5d706d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb5d70818" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb5d70818"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb5d709f0"/>
        <function-ref name="source" scoped="" ref="0xb5d70ad0"/>
        <function-ref name="address" scoped="" ref="0xb5d70bb0"/>
        <function-ref name="destination" scoped="" ref="0xb5d70c90"/>
        <function-ref name="setSource" scoped="" ref="0xb5d70d70"/>
        <function-ref name="setDestination" scoped="" ref="0xb5d70e50"/>
        <function-ref name="type" scoped="" ref="0xb5d6f010"/>
        <function-ref name="setType" scoped="" ref="0xb5d6f0f0"/>
        <function-ref name="isForMe" scoped="" ref="0xb5d6f1d0"/>
        <function-ref name="setGroup" scoped="" ref="0xb5d6f2b0"/>
        <function-ref name="localGroup" scoped="" ref="0xb5d6f390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb63846d8" loc="44:../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb63846d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb63848b0"/>
        <function-ref name="getPayload" scoped="" ref="0xb6384990"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6384a70"/>
        <function-ref name="cancel" scoped="" ref="0xb6384b50"/>
        <function-ref name="sendDone" scoped="" ref="0xb6384c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0xb6380598" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb6380598"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6380780"/>
        <function-ref name="getPayload" scoped="" ref="0xb6380860"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6380940"/>
        <function-ref name="cancel" scoped="" ref="0xb6380a20"/>
        <function-ref name="sendDone" scoped="" ref="0xb6380b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0xb6381db8" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb6381db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6380010"/>
        <function-ref name="getPayload" scoped="" ref="0xb63800f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb63801d0"/>
        <function-ref name="cancel" scoped="" ref="0xb63802b0"/>
        <function-ref name="sendDone" scoped="" ref="0xb6380390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0xb637f850" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb637f850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb637fa28"/>
        <function-ref name="payloadLength" scoped="" ref="0xb637fb08"/>
        <function-ref name="getPayload" scoped="" ref="0xb637fbe8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb637fcc8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb637fda8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0xb637ff28" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0xb637ff28"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb637e110"/>
        <function-ref name="runTask" scoped="" ref="0xb637e1f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0xb637e370" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0xb637e370"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb637e548"/>
        <function-ref name="runTask" scoped="" ref="0xb637e628"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb6380c40" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb6380c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb6380e18"/>
        <function-ref name="source" scoped="" ref="0xb6380ef8"/>
        <function-ref name="address" scoped="" ref="0xb637f010"/>
        <function-ref name="destination" scoped="" ref="0xb637f0f0"/>
        <function-ref name="setSource" scoped="" ref="0xb637f1d0"/>
        <function-ref name="setDestination" scoped="" ref="0xb637f2b0"/>
        <function-ref name="type" scoped="" ref="0xb637f390"/>
        <function-ref name="setType" scoped="" ref="0xb637f470"/>
        <function-ref name="isForMe" scoped="" ref="0xb637f550"/>
        <function-ref name="setGroup" scoped="" ref="0xb637f630"/>
        <function-ref name="localGroup" scoped="" ref="0xb637f710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb6376540" loc="42:../../tos/system/PoolC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.UARTMessagePoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb6376540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
            <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb6374630"/>
        <function-ref name="maxSize" scoped="" ref="0xb6374048"/>
        <function-ref name="empty" scoped="" ref="0xb6376b68"/>
        <function-ref name="put" scoped="" ref="0xb63742a0"/>
        <function-ref name="size" scoped="" ref="0xb6376dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb5d4af00" loc="56:../../tos/system/PoolP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.UARTMessagePoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb5d4af00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
            <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb5d47010"/>
        <function-ref name="maxSize" scoped="" ref="0xb5d48a08"/>
        <function-ref name="empty" scoped="" ref="0xb5d48558"/>
        <function-ref name="put" scoped="" ref="0xb5d48c60"/>
        <function-ref name="size" scoped="" ref="0xb5d487b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5d4ab58" loc="55:../../tos/system/PoolP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.UARTMessagePoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5d4ab58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5d4ad30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0xb63738a8" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.UARTQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb63738a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
              <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0xb6372858"/>
        <function-ref name="enqueue" scoped="" ref="0xb6370010"/>
        <function-ref name="element" scoped="" ref="0xb6370360"/>
        <function-ref name="full" scoped="" ref="0xb6372150"/>
        <function-ref name="maxSize" scoped="" ref="0xb6372600"/>
        <function-ref name="dequeue" scoped="" ref="0xb6372bc8"/>
        <function-ref name="empty" scoped="" ref="0xb6373ed0"/>
        <function-ref name="size" scoped="" ref="0xb63723a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb636fbf8" loc="42:../../tos/system/PoolC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugMessagePool"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb636fbf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
            <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb636ecf0"/>
        <function-ref name="maxSize" scoped="" ref="0xb636e708"/>
        <function-ref name="empty" scoped="" ref="0xb636e258"/>
        <function-ref name="put" scoped="" ref="0xb636e960"/>
        <function-ref name="size" scoped="" ref="0xb636e4b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0xb5d39220" loc="56:../../tos/system/PoolP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugMessagePool.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0xb5d39220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
            <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb5d373a0"/>
        <function-ref name="maxSize" scoped="" ref="0xb5d39cf8"/>
        <function-ref name="empty" scoped="" ref="0xb5d39848"/>
        <function-ref name="put" scoped="" ref="0xb5d37010"/>
        <function-ref name="size" scoped="" ref="0xb5d39aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0xb5d3ae60" loc="55:../../tos/system/PoolP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugMessagePool.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0xb5d3ae60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb5d39050"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0xb636cf10" loc="43:../../tos/system/QueueC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSendQueue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0xb636cf10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
              <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0xb636beb8"/>
        <function-ref name="enqueue" scoped="" ref="0xb636a5b8"/>
        <function-ref name="element" scoped="" ref="0xb636a908"/>
        <function-ref name="full" scoped="" ref="0xb636b7b0"/>
        <function-ref name="maxSize" scoped="" ref="0xb636bc60"/>
        <function-ref name="dequeue" scoped="" ref="0xb636a248"/>
        <function-ref name="empty" scoped="" ref="0xb636b558"/>
        <function-ref name="size" scoped="" ref="0xb636ba08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb63699e0" loc="49:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb63699e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb6369bb8"/>
        <function-ref name="getPayload" scoped="" ref="0xb6369c98"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb6369d78"/>
        <function-ref name="cancel" scoped="" ref="0xb6369e58"/>
        <function-ref name="sendDone" scoped="" ref="0xb6368010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0xb6368150" loc="50:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0xb6368150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0xb6368328"/>
        <function-ref name="payloadLength" scoped="" ref="0xb6368408"/>
        <function-ref name="getPayload" scoped="" ref="0xb63684e8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb63685c8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0xb63686a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0xb63687e8" loc="51:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb63687e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb63689c0"/>
        <function-ref name="source" scoped="" ref="0xb6368aa0"/>
        <function-ref name="address" scoped="" ref="0xb6368b80"/>
        <function-ref name="destination" scoped="" ref="0xb6368c60"/>
        <function-ref name="setSource" scoped="" ref="0xb6368d40"/>
        <function-ref name="setDestination" scoped="" ref="0xb6368e20"/>
        <function-ref name="type" scoped="" ref="0xb6368f00"/>
        <function-ref name="setType" scoped="" ref="0xb6366010"/>
        <function-ref name="isForMe" scoped="" ref="0xb63660f0"/>
        <function-ref name="setGroup" scoped="" ref="0xb63661d0"/>
        <function-ref name="localGroup" scoped="" ref="0xb63662b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0xb6366410" loc="52:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0xb6366410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0xb63665e8"/>
        <function-ref name="noAck" scoped="" ref="0xb63666c8"/>
        <function-ref name="wasAcked" scoped="" ref="0xb63667a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0xb5d27228" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0xb5d27228"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5d27400"/>
        <function-ref name="getPayload" scoped="" ref="0xb5d274e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5d275c0"/>
        <function-ref name="cancel" scoped="" ref="0xb5d276a0"/>
        <function-ref name="sendDone" scoped="" ref="0xb5d27780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0xb5d278f0" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0xb5d278f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb5d27ac8"/>
        <function-ref name="getPayload" scoped="" ref="0xb5d27ba8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb5d27c88"/>
        <function-ref name="cancel" scoped="" ref="0xb5d27d68"/>
        <function-ref name="sendDone" scoped="" ref="0xb5d27e48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0xb5d26010" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MultihopOscilloscopeAppC.DebugSerialSender.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0xb5d26010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0xb5d261e8"/>
        <function-ref name="source" scoped="" ref="0xb5d262c8"/>
        <function-ref name="address" scoped="" ref="0xb5d263a8"/>
        <function-ref name="destination" scoped="" ref="0xb5d26488"/>
        <function-ref name="setSource" scoped="" ref="0xb5d26568"/>
        <function-ref name="setDestination" scoped="" ref="0xb5d26648"/>
        <function-ref name="type" scoped="" ref="0xb5d26728"/>
        <function-ref name="setType" scoped="" ref="0xb5d26808"/>
        <function-ref name="isForMe" scoped="" ref="0xb5d268e8"/>
        <function-ref name="setGroup" scoped="" ref="0xb5d269c8"/>
        <function-ref name="localGroup" scoped="" ref="0xb5d26aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionDebug" ref="0xb6365650" loc="4:../../tos/lib/net/UARTDebugSenderP.nc">
      <component-ref qname="UARTDebugSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0xb6365650"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0xb6365828"/>
        <function-ref name="logEventMsg" scoped="" ref="0xb6365908"/>
        <function-ref name="logEventSimple" scoped="" ref="0xb63659e8"/>
        <function-ref name="logEventRoute" scoped="" ref="0xb6365ac8"/>
        <function-ref name="logEventDbg" scoped="" ref="0xb6365ba8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0xb6365d58" loc="7:../../tos/lib/net/UARTDebugSenderP.nc">
      <component-ref qname="UARTDebugSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0xb6365d58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0xb6362010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UARTSend" ref="0xb635e7c0" loc="10:../../tos/lib/net/UARTDebugSenderP.nc">
      <component-ref qname="UARTDebugSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UARTSend" scoped="" ref="0xb635e7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0xb635e998"/>
        <function-ref name="getPayload" scoped="" ref="0xb635ea78"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0xb635eb58"/>
        <function-ref name="cancel" scoped="" ref="0xb635ec38"/>
        <function-ref name="sendDone" scoped="" ref="0xb635ed18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendQueue" ref="0xb6361928" loc="9:../../tos/lib/net/UARTDebugSenderP.nc">
      <component-ref qname="UARTDebugSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendQueue" scoped="" ref="0xb6361928"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
              <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0xb6360970"/>
        <function-ref name="enqueue" scoped="" ref="0xb635e068"/>
        <function-ref name="element" scoped="" ref="0xb635e3b8"/>
        <function-ref name="full" scoped="" ref="0xb6360268"/>
        <function-ref name="maxSize" scoped="" ref="0xb6360718"/>
        <function-ref name="dequeue" scoped="" ref="0xb6360ce0"/>
        <function-ref name="empty" scoped="" ref="0xb6360010"/>
        <function-ref name="size" scoped="" ref="0xb63604c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0xb6359640" loc="36:../../tos/lib/net/UARTDebugSenderP.nc">
      <component-ref qname="UARTDebugSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0xb6359640"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0xb6359818"/>
        <function-ref name="runTask" scoped="" ref="0xb63598f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MessagePool" ref="0xb6362300" loc="8:../../tos/lib/net/UARTDebugSenderP.nc">
      <component-ref qname="UARTDebugSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MessagePool" scoped="" ref="0xb6362300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
            <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0xb63613d8"/>
        <function-ref name="maxSize" scoped="" ref="0xb6362dd8"/>
        <function-ref name="empty" scoped="" ref="0xb6362928"/>
        <function-ref name="put" scoped="" ref="0xb6361048"/>
        <function-ref name="size" scoped="" ref="0xb6362b80"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../tos/interfaces/Init.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0xb72bbd70" loc="62:../../tos/interfaces/Init.nc">
        <documentation loc="53:../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0xb72bb210" loc="60:../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0xb72b2010" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0xb72b3e48" loc="60:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0xb72b5630" loc="31:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0xb72b5c68" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb72b5b10" loc="39:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0xb72b3348" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb72b31f0" loc="46:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0xb72b38a0" loc="53:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0xb72a7ce8" loc="44:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0xb72a60f8" loc="45:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0xb72a7558" loc="42:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0xb72a68c8" loc="47:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb72a7918" loc="43:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0xb72a64d0" loc="46:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb72addf8" loc="40:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0xb72a71a8" loc="41:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0xb74ba9b0" loc="57:../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0xb735a2e8" loc="72:../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0xb74badf0" loc="65:../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0xb73551a8" loc="67:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0xb73556c0" loc="75:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:../../tos/interfaces/McuSleep.nc">
      <documentation loc="63:../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0xb72e0b80" loc="76:../../tos/interfaces/McuSleep.nc">
        <documentation loc="75:../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0xb72cee30" loc="62:../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0xb7326470"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0xb72ce158" loc="52:../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RootControl" loc="40:../../tos/lib/net/RootControl.nc">
      <documentation loc="35:../../tos/lib/net/RootControl.nc">
        <short> Controls whether the current node is a root of the tree&#10;  </short>
        <long> Controls whether the current node is a root of the tree&#10;  @author Rodrigo Fonseca&#10;  @date   $Date: 2006-12-12 18:23:29 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isRoot" ref="0xb7162038" loc="43:../../tos/lib/net/RootControl.nc">
        <interfacedef-ref qname="RootControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRoot" ref="0xb716f860" loc="41:../../tos/lib/net/RootControl.nc">
        <interfacedef-ref qname="RootControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="unsetRoot" ref="0xb716fc58" loc="42:../../tos/lib/net/RootControl.nc">
        <interfacedef-ref qname="RootControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CollectionPacket" loc="42:../../tos/lib/net/CollectionPacket.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0xb7164910" loc="50:../../tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71645b8" loc="50:../../tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="seqno" ref="0xb71647b0" loc="50:../../tos/lib/net/CollectionPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOrigin" ref="0xb7167d28" loc="44:../../tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71679c0" loc="44:../../tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb7167bc8" loc="44:../../tos/lib/net/CollectionPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0xb7166ac0" loc="47:../../tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7166738" loc="47:../../tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="id" ref="0xb7166960" loc="47:../../tos/lib/net/CollectionPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getOrigin" ref="0xb71675c0" loc="43:../../tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7167468" loc="43:../../tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0xb7164168" loc="49:../../tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7164010" loc="49:../../tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getType" ref="0xb7166350" loc="46:../../tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71661f8" loc="46:../../tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0xb71b6088" loc="113:../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0xb71b9f18" loc="113:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0xb71b6dd0" loc="138:../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0xb71b6c78" loc="138:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb71b9830" loc="104:../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb71b6598" loc="130:../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0xb7170198" loc="78:../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
              <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71b5be8" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0xb71b5dc8" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb7170010" loc="78:../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../tos/interfaces/Send.nc">
      <function command="" provided="0" name="send" ref="0xb71769c0" loc="75:../../tos/interfaces/Send.nc">
        <documentation loc="57:../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7176680" loc="75:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb7176860" loc="75:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0xb7172558" loc="125:../../tos/interfaces/Send.nc">
        <documentation loc="115:../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71721f8" loc="125:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb71723d8" loc="125:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb7175c88" loc="112:../../tos/interfaces/Send.nc">
        <documentation loc="102:../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb7174650" loc="89:../../tos/interfaces/Send.nc">
        <documentation loc="77:../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb71744f8" loc="89:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb7175368" loc="100:../../tos/interfaces/Send.nc">
        <documentation loc="91:../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7175010" loc="100:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0xb7175208" loc="100:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Pool" loc="50:../../tos/interfaces/Pool.nc">
      <documentation loc="33:../../tos/interfaces/Pool.nc">
        <short>&#10;  An allocation pool of a specific type memory objects.</short>
        <long>&#10;  An allocation pool of a specific type memory objects.&#10;  The Pool allows components to allocate (&#60;code>get&#60;/code>)&#10;  and deallocate (&#60;code>put&#60;/code>) elements. The pool&#10;  does not require that deallocations be items which were&#10;  originally allocated. E.g., a program can create two&#10;  pools of the same type and pass items between them.&#10;  This allows, for example, a component to allocate a pool&#10;  of message buffers and freely buffer swap them on&#10;  Receive.receive events.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0xb715a280" loc="50:../../tos/interfaces/Pool.nc">
          <interfacedef-ref qname="Pool"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb715a280"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0xb7159f10" loc="97:../../tos/interfaces/Pool.nc">
        <documentation loc="91:../../tos/interfaces/Pool.nc">
          <short>&#10; Allocate an element from the pool.</short>
          <long>&#10; Allocate an element from the pool.&#10;&#10; @return 't* ONE_NOK' A pointer if the pool is not empty, NULL if&#10; the pool is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb715a280"/></type-var>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0xb71591a8" loc="80:../../tos/interfaces/Pool.nc">
        <documentation loc="74:../../tos/interfaces/Pool.nc">
          <short>&#10; Returns the maximum number of elements in the pool&#10; (the size of a full pool).</short>
          <long>&#10; Returns the maximum number of elements in the pool&#10; (the size of a full pool).&#10;&#10; @return Maximum size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0xb715a720" loc="61:../../tos/interfaces/Pool.nc">
        <documentation loc="52:../../tos/interfaces/Pool.nc">
          <short>&#10; Returns whether there any elements remaining in the pool.</short>
          <long>&#10; Returns whether there any elements remaining in the pool.&#10; If empty returns TRUE, then &#60;code>get&#60;/code> will return&#10; NULL. If empty returns FALSE, then &#60;code>get&#60;/code> will&#10; return a pointer to an object.&#10;&#10; @return Whether the pool is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="put" ref="0xb71597b0" loc="89:../../tos/interfaces/Pool.nc">
        <documentation loc="82:../../tos/interfaces/Pool.nc">
          <short>&#10; Deallocate an object, putting it back into the pool.</short>
          <long>&#10; Deallocate an object, putting it back into the pool.&#10;&#10; @param 't* ONE newVal'&#10; @return SUCCESS if the entry was put in successfully, FAIL&#10; if the pool is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb715a280"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0xb7159658" loc="89:../../tos/interfaces/Pool.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb715a280"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0xb715ac30" loc="72:../../tos/interfaces/Pool.nc">
        <documentation loc="63:../../tos/interfaces/Pool.nc">
          <short>&#10; Returns how many elements are in the pool.</short>
          <long>&#10; Returns how many elements are in the pool. If size&#10; returns 0, empty() will return TRUE. If size returns&#10; a non-zero value, empty() will return FALSE. The&#10; return value of size is always &#38;lte; the return&#10; value of maxSize().&#10;&#10; @return How many elements are in the pool.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../tos/interfaces/Read.nc">
      <documentation loc="33:../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0xb714fb90" loc="49:../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb714fb90"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0xb714c070" loc="55:../../tos/interfaces/Read.nc">
        <documentation loc="50:../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0xb714c820" loc="63:../../tos/interfaces/Read.nc">
        <documentation loc="57:../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb714fb90"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0xb714c4f0" loc="63:../../tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0xb714c6c0" loc="63:../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb714fb90"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb716d358" loc="80:../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0xb71b3d18" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0xb716d010" loc="80:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb716d1f0" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0xb716a010" loc="135:../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7169bd0" loc="135:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb7169db0" loc="135:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb7169670" loc="123:../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb716c010" loc="96:../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb716dea0" loc="96:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb716cd00" loc="110:../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb716c9a8" loc="110:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0xb716cba0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0xb71b45c0" loc="95:../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb71b4a88" loc="105:../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0xb71498d8" loc="61:../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0xb7149d20" loc="67:../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0xb71471c8" loc="72:../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0xb7147a38" loc="83:../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0xb7146740" loc="100:../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb7146be8" loc="117:../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0xb71475f0" loc="77:../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb7145338" loc="134:../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0xb71451e0" loc="134:../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0xb71494b0" loc="56:../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0xb7147eb8" loc="89:../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0xb71462f8" loc="94:../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0xb71629e0" loc="43:../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71629e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0xb715f010" loc="80:../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71629e0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0xb715fec8" loc="97:../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71629e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0xb715fd70" loc="97:../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71629e0"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0xb74b5840"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:1"><attribute-ref name="one" ref="0xb74b5840"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0xb715e7f8" loc="108:../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71629e0"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb715e6a0" loc="108:../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0xb71612d0" loc="57:../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0xb7161bc8" loc="72:../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0xb715f6b8" loc="88:../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb71629e0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0xb7162e80" loc="50:../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0xb7161710" loc="65:../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb7155010" loc="53:../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb7155010"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0xb7151790" loc="136:../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0xb71545a0" loc="83:../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0xb71526f8" loc="114:../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0xb71523b0" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0xb7152598" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0xb7154ef0" loc="98:../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0xb7150138" loc="151:../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0xb7151bd8" loc="144:../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0xb7154a30" loc="92:../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0xb7155668" loc="64:../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0xb7155510" loc="64:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0xb7151170" loc="129:../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0xb7152d98" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0xb7151010" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0xb7155d00" loc="73:../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0xb7155ba8" loc="73:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb71541f0" loc="78:../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb70f25c8" loc="53:../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb70f25c8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0xb70f2aa8" loc="61:../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb70e7c78" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb70e7c78"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0xb70e7de0" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70e7de0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0xb70e32f0" loc="64:../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70e7de0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0xb70e3d18" loc="76:../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0xb70e3818" loc="71:../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0xb70e2138" loc="82:../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb70f0dd8" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb70f0dd8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0xb70ea010" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70ea010"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0xb70e8310" loc="109:../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70ea010"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0xb70e9010" loc="78:../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0xb70e9cb0" loc="103:../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70ea010"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70ea010"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0xb70e9960" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70ea010"/></type-var>
          </variable>
          <variable name="dt" ref="0xb70e9b50" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70ea010"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0xb70e9458" loc="88:../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0xb70e87a0" loc="116:../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70ea010"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb70ea640" loc="66:../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70ea010"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0xb70ea4e8" loc="66:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70ea010"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb70eab20" loc="73:../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0xb70c74c8" loc="89:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0xb70c8a70" loc="85:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0xb70cb698" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0xb70c7058" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0xb70c8ed8" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0xb70c8600" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0xb70c84a8" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0xb70c7a90" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0xb70c7938" loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0xb70cbae8" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0xb70c8088" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0xb70cbf08" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="51:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
      <documentation loc="45:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="compareBBusy" ref="0xb70bd1f0" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; @return TRUE if OCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer2Asynchronous" ref="0xb70bfee0" loc="68:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="65:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 2 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlABusy" ref="0xb70be330" loc="74:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="70:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; @return TRUE if TCCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBBusy" ref="0xb70be810" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; @return TRUE if TCCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0xb70bd6b0" loc="98:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="94:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; @return TRUE if TCNT2 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareABusy" ref="0xb70becf0" loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; @return TRUE if OCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0xb70bf408" loc="57:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="53:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer2 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb72fd9e0"/>
            <typename><typedef-ref name="Atm128_ASSR_t" ref="0xb72fdc08"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0xb70bfa00" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="59:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer2 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb72fd9e0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0xb72fdc08"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0xb70bf8a8" loc="63:../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb72fd9e0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0xb72fdc08"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0xb70caae8" loc="41:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70caae8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0xb70c3a30" loc="74:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0xb70c49d8" loc="58:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb70c4010" loc="48:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70caae8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0xb70c4de0" loc="62:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0xb70c3e90" loc="80:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb70c4598" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70caae8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0xb70c4440" loc="54:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb70caae8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb70c3210" loc="65:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb70c3608" loc="68:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0xb70d3750" loc="55:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb70d3750"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0xb70ceef8" loc="98:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0xb70ce668" loc="87:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb70d3c40" loc="61:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb70d3750"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0xb70cd4a8" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0xb70cd350" loc="104:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0xb70cd938" loc="110:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0xb70d0a30" loc="75:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0xb70d0610" loc="70:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0xb70cead0" loc="93:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb70d01e0" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb70d3750"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0xb70d0088" loc="67:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb70d3750"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb70d0e38" loc="78:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb70ce240" loc="81:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0xb6feb210" loc="32:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0xb6ff0cf0" loc="25:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0xb6feb700" loc="39:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:../../tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0xb6fee258" loc="120:../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0xb6fef920" loc="97:../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0xb6fef320" loc="88:../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0xb6fefdd0" loc="102:../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0xb6fee950" loc="128:../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="MicaBusAdc" loc="16:../../tos/platforms/mica/MicaBusAdc.nc">
      <documentation loc="11:../../tos/platforms/mica/MicaBusAdc.nc">
        <short>&#10; A simplistic beginning to providing a standard interface to the mica-family&#10; 51-pin bus.</short>
        <long>&#10; A simplistic beginning to providing a standard interface to the mica-family&#10; 51-pin bus. Just provides the PW0-PW7 digital I/O pins.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getChannel" ref="0xb6fe2070" loc="20:../../tos/platforms/mica/MicaBusAdc.nc">
        <documentation loc="17:../../tos/platforms/mica/MicaBusAdc.nc">
          <short>&#10; Return the A/D channel number to use for one of the ADCn pins.</short>
        </documentation>
        <interfacedef-ref qname="MicaBusAdc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0xb6fce720" loc="68:../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0xb6fce2c0" loc="61:../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0xb6fd1e70" loc="54:../../tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0xb6fd1908" loc="53:../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Interrupt" loc="41:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
      <documentation loc="34:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <short>&#10; Interface to an Atmega128 external interrupt pin&#10;&#10; </short>
        <long>&#10; Interface to an Atmega128 external interrupt pin&#10;&#10; @author Joe Polastre&#10; @author Martin Turon&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0xb6fba010" loc="56:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="53:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Clears the ATmega128 Interrupt Pending Flag for a particular port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0xb6fb9010" loc="75:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="72:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0xb6fbdbc0" loc="51:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="48:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Disables ATmega128 hardware interrupt on a particular port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0xb6fbaa70" loc="70:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="65:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Sets whether the edge should be high to low or low to high.</short>
          <long> &#10; Sets whether the edge should be high to low or low to high.&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0xb6fba918" loc="70:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0xb6fbd7b8" loc="46:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="43:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Enables ATmega128 hardware interrupt on a particular port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0xb6fba460" loc="63:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="58:../../tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Gets the current value of the input voltage of a port&#10;&#10; </short>
          <long> &#10; Gets the current value of the input voltage of a port&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128InterruptSig" loc="43:../../tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
      <documentation loc="35:../../tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
        <short>&#10; Interface to an Atmega128 external interrupt pin that exposes just the&#10; interrupt vector routine for easy linking to generic components (see&#10; HplAtm128Interrupt for the full interface).</short>
        <long>&#10; Interface to an Atmega128 external interrupt pin that exposes just the&#10; interrupt vector routine for easy linking to generic components (see&#10; HplAtm128Interrupt for the full interface).&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @see HplAtm128Interrupt&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0xb6fb38f0" loc="48:../../tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
        <documentation loc="45:../../tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
          <short>&#10; Signalled when an interrupt occurs on a pin&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0xb6f5e038" loc="53:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0xb6f5e610" loc="61:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0xb6f58980" loc="65:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0xb6f584c0" loc="59:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0xb6f60cd0" loc="56:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0xb6f5b6e8" loc="73:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0xb6f607a0" loc="46:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0xb6f5b210" loc="65:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0xb6f5bcc0" loc="81:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0xb6f5fee0" loc="90:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0xb6f593f8" loc="98:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0xb6f51398" loc="79:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0xb6f5dcb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0xb6f51240" loc="79:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0xb6f5dcb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0xb6f52010" loc="53:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0xb6f526d0" loc="62:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0xb6f5dcb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0xb6f52578" loc="62:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0xb6f5dcb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0xb6f52c80" loc="70:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0xb6f5dcb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:../../tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:../../tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0xb6f145b8" loc="62:../../tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:../../tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:../../tos/interfaces/ReadNow.nc">
      <documentation loc="33:../../tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0xb6ee0d08" loc="52:../../tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb6ee0d08"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0xb6edc1f0" loc="58:../../tos/interfaces/ReadNow.nc">
        <documentation loc="53:../../tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0xb6edc9c0" loc="66:../../tos/interfaces/ReadNow.nc">
        <documentation loc="60:../../tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb6ee0d08"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0xb6edc690" loc="66:../../tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0xb6edc860" loc="66:../../tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb6ee0d08"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="77:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="42:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0xb6ed1070" loc="100:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="79:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0xb6ed2860" loc="100:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0xb6ed2a88" loc="100:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0xb6ed2cb0" loc="101:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0xb6ed2ed0" loc="101:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0xb6ed03f0" loc="119:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="103:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6ed1990" loc="119:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0xb6ed1b80" loc="119:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0xb6ed1d88" loc="119:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0xb6ed0010" loc="120:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0xb6ed0278" loc="120:../../tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="52:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="42:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0xb6ed7e60" loc="70:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="54:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0xb6ed7680" loc="70:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0xb6ed78a8" loc="70:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0xb6ed7ad0" loc="71:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0xb6ed7cf0" loc="71:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb6ed3010" loc="91:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="83:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0xb6ed49a8" loc="81:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="73:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6ed4658" loc="81:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0xb6ed4848" loc="81:../../tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="48:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="36:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0xb6ec41a8" loc="114:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="111:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0xb6ecc890" loc="53:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="49:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb7313258"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0xb73134e0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0xb6ec36b8" loc="140:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="135:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0xb6ec3560" loc="140:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0xb6ec4668" loc="122:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="118:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0xb6ec7360" loc="82:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0xb6eccea8" loc="58:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="54:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb7313258"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0xb73134e0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0xb6eccd50" loc="58:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb7313258"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0xb73134e0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0xb6ec7bb0" loc="91:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="88:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0xb6ec3010" loc="133:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="128:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb6ec3b60" loc="150:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="142:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0xb6ec7760" loc="86:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0xb6ec5468" loc="99:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="96:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0xb6ec5038" loc="95:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0xb6ec58a0" loc="106:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="101:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0xb6ec4ad8" loc="127:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="123:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0xb6ec8a18" loc="69:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="65:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb730f588"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0xb730f930"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0xb6ec88c0" loc="69:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb730f588"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0xb730f930"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0xb6ec5d68" loc="110:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="107:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0xb6ec83e8" loc="64:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="60:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb730f588"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0xb730f930"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0xb6ec8ec8" loc="75:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="71:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0xb6ec22c8" loc="156:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="152:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6ec2170" loc="156:../../tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0xb6ecd9d8" loc="95:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb6ecdec0" loc="105:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb6e6a820" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb6e6a820"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0xb6e6a988" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6e6a988"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0xb6e67010" loc="66:../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6e6a988"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0xb6e6ae48" loc="66:../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6e6a988"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CollectionDebug" loc="59:../../tos/lib/net/CollectionDebug.nc">
      <documentation loc="35:../../tos/lib/net/CollectionDebug.nc">
        <short> &#10;  The CollectionDebug is an interface for sending debugging events to&#10;  a logging infrastructure.</short>
        <long> &#10;  The CollectionDebug is an interface for sending debugging events to&#10;  a logging infrastructure. An implementer can choose to send the event&#10;  information to different destinations. Primary examples can include:&#10;  &#60;ul>&#10;    &#60;li> logging to the UART, in case of a testbed of network-connected&#10;         nodes;&#10;    &#60;li> logging to flash, if the logs are to be retrieved later&#10;    &#60;li> logging to the standard output, in the case of TOSSIM.&#10;  &#60;/ul>&#10;  &#10;  The interface does not specify in what format the log is to be produced,&#10;  or if other information, like timestamps, should be added, and this is&#10;  up to the implementer.&#10; &#10;  Some commands are generic, like Event, EventSimple, and EventDbg, while others&#10;  are for more specific events related to collection, like EventRoute and EventMsg.&#10;&#10; @author Rodrigo Fonseca&#10; @author Kyle Jamieson&#10; @date   $Date: 2010-06-29 22:07:47 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="logEvent" ref="0xb6e22800" loc="61:../../tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0xb6e226a8" loc="61:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="logEventMsg" ref="0xb6e1f7b0" loc="73:../../tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0xb6e1f030" loc="73:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0xb6e1f220" loc="73:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
          <variable name="origin" ref="0xb6e1f438" loc="73:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
          <variable name="node" ref="0xb6e1f640" loc="73:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="logEventSimple" ref="0xb6e20010" loc="64:../../tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0xb6e22c60" loc="64:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
          <variable name="arg" ref="0xb6e22e50" loc="64:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="logEventRoute" ref="0xb6e1e3e8" loc="79:../../tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0xb6e1fc08" loc="79:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
          <variable name="parent" ref="0xb6e1fe20" loc="79:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
          <variable name="hopcount" ref="0xb6e1e068" loc="79:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
          <variable name="metric" ref="0xb6e1e278" loc="79:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="logEventDbg" ref="0xb6e20bc0" loc="67:../../tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0xb6e20450" loc="67:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
          <variable name="arg1" ref="0xb6e20650" loc="67:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
          <variable name="arg2" ref="0xb6e20850" loc="67:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
          <variable name="arg3" ref="0xb6e20a50" loc="67:../../tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Intercept" loc="15:../../tos/interfaces/Intercept.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="forward" ref="0xb6e41d78" loc="31:../../tos/interfaces/Intercept.nc">
        <documentation loc="16:../../tos/interfaces/Intercept.nc">
          <short>&#10; Signals that a message has been received, which is supposed to be&#10; forwarded to another destination.</short>
          <long>&#10; Signals that a message has been received, which is supposed to be&#10; forwarded to another destination. &#10;&#10; @param 'message_t* ONE msg' The complete message received.&#10;&#10; @param 'void* COUNT(len) payload' The payload portion of the packet for this&#10; protocol layer.&#10;&#10; @param len The length of the payload buffer.&#10;&#10; @return TRUE indicates the packet should be forwarded, FALSE&#10; indicates that it should not be forwarded.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Intercept"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e41850" loc="31:../../tos/interfaces/Intercept.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0xb6e41a30" loc="31:../../tos/interfaces/Intercept.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6e41c10" loc="31:../../tos/interfaces/Intercept.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0xb6e406d8" loc="65:../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e40580" loc="65:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0xb6e3c168" loc="78:../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e3c010" loc="78:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0xb6e39208" loc="126:../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e3be88" loc="126:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6e39088" loc="126:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb6e3b8a0" loc="106:../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0xb6e3cdc8" loc="94:../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e3ca88" loc="94:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6e3cc68" loc="94:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CtpInfo" loc="44:../../tos/lib/net/ctp/CtpInfo.nc">
      <function command="" provided="0" name="getNeighborLinkQuality" ref="0xb6e29168" loc="96:../../tos/lib/net/ctp/CtpInfo.nc">
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb6e29010" loc="96:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="recomputeRoutes" ref="0xb6e2b838" loc="83:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="80:../../tos/lib/net/ctp/CtpInfo.nc">
          <short> &#10; Tell the routing engine it might want to recompute its routes.</short>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="numNeighbors" ref="0xb6e2aad0" loc="95:../../tos/lib/net/ctp/CtpInfo.nc">
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="triggerRouteUpdate" ref="0xb6e2cda8" loc="71:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="66:../../tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; This informs the routing engine that sending a beacon soon is&#10; advisable, e.g., in response to a pull bit.</short>
          <long>&#10; This informs the routing engine that sending a beacon soon is&#10; advisable, e.g., in response to a pull bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getEtx" ref="0xb6e2c7f0" loc="64:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="55:../../tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; Get the ETX for the current path to the root through the current&#10; parent.</short>
          <long>&#10; Get the ETX for the current path to the root through the current&#10; parent. Sets etx argument to ETX*10.  The pointer is allocated by&#10; the caller.  If the parent is invalid, return FAIL (no info).&#10; The caller MUST NOT use the value in parent if the return is not&#10; SUCCESS. Calling getEtx at the root will set the etx argument to&#10; 0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="etx" ref="0xb6e2c698" loc="64:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="triggerImmediateRouteUpdate" ref="0xb6e2b320" loc="78:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="73:../../tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; This informs the routing engine that sending a beacon as soon&#10; as possible is advisable, e.g., due to queue overflow or&#10; a detected loop.</short>
          <long>&#10; This informs the routing engine that sending a beacon as soon&#10; as possible is advisable, e.g., due to queue overflow or&#10; a detected loop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setNeighborCongested" ref="0xb6e2a060" loc="88:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="85:../../tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; Informs the routing engine that a neighbor is congested&#10;</short>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb6e2bcd0" loc="88:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
          <variable name="congested" ref="0xb6e2bed8" loc="88:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNeighborAddr" ref="0xb6e29d00" loc="98:../../tos/lib/net/ctp/CtpInfo.nc">
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb6e29ba8" loc="98:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getParent" ref="0xb6e2c168" loc="53:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="46:../../tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; Get the parent of the node in the tree.</short>
          <long>&#10; Get the parent of the node in the tree.  The pointer is allocated&#10; by the caller.  If the parent is invalid, return FAIL.  The&#10; caller MUST NOT use the value in parent if the return is not&#10; SUCCESS.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="parent" ref="0xb6e2c010" loc="53:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNeighborRouteQuality" ref="0xb6e29758" loc="97:../../tos/lib/net/ctp/CtpInfo.nc">
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb6e29600" loc="97:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isNeighborCongested" ref="0xb6e2a668" loc="93:../../tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="90:../../tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10;  Returns the currently known state about a neighbor's congestion state&#10;</short>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb6e2a510" loc="93:../../tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CtpCongestion" loc="1:../../tos/lib/net/ctp/CtpCongestion.nc">
      <function command="" provided="0" name="isCongested" ref="0xb6e26010" loc="7:../../tos/lib/net/ctp/CtpCongestion.nc">
        <interfacedef-ref qname="CtpCongestion"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClientCongested" ref="0xb6e265c0" loc="14:../../tos/lib/net/ctp/CtpCongestion.nc">
        <interfacedef-ref qname="CtpCongestion"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="congested" ref="0xb6e26468" loc="14:../../tos/lib/net/ctp/CtpCongestion.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UnicastNameFreeRouting" loc="41:../../tos/lib/net/UnicastNameFreeRouting.nc">
      <documentation loc="35:../../tos/lib/net/UnicastNameFreeRouting.nc">
        <short>&#10;  Provides a single next hop on a name-free protocol.</short>
        <long>&#10;  Provides a single next hop on a name-free protocol.&#10;&#10;  @author Philip Levis&#10;  @date   $Date: 2006-12-12 18:23:29 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="hasRoute" ref="0xb6e2dc90" loc="49:../../tos/lib/net/UnicastNameFreeRouting.nc">
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="routeFound" ref="0xb6e24070" loc="51:../../tos/lib/net/UnicastNameFreeRouting.nc">
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="nextHop" ref="0xb6e2d7a8" loc="48:../../tos/lib/net/UnicastNameFreeRouting.nc">
        <documentation loc="43:../../tos/lib/net/UnicastNameFreeRouting.nc">
          <short>&#10; Get the address of the best next hop set to the destination.</short>
          <long>&#10; Get the address of the best next hop set to the destination.&#10; If there is not best next hop, the address is the local address.&#10; @return : The next best hop, or the local address if there is no route.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="noRoute" ref="0xb6e24408" loc="52:../../tos/lib/net/UnicastNameFreeRouting.nc">
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CtpPacket" loc="44:../../tos/lib/net/ctp/CtpPacket.nc">
      <documentation loc="33:../../tos/lib/net/ctp/CtpPacket.nc">
        <short>&#10;  ADT for CTP data frames.</short>
        <long>&#10;  ADT for CTP data frames.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2007-11-28 04:42:52 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSequenceNumber" ref="0xb6e31af8" loc="64:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e317a0" loc="64:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="seqno" ref="0xb6e31998" loc="64:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="option" ref="0xb6e355e0" loc="52:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e46068"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e35260" loc="52:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="opt" ref="0xb6e35480" loc="52:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e46068"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEtx" ref="0xb6e33028" loc="58:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e34cc0" loc="58:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="etx" ref="0xb6e34eb0" loc="58:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOrigin" ref="0xb6e33d48" loc="61:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e339e0" loc="61:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6e33be8" loc="61:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOption" ref="0xb6e37e20" loc="49:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e46068"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e37a80" loc="49:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="option" ref="0xb6e37cc0" loc="49:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e46068"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getEtx" ref="0xb6e348e0" loc="57:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e34788" loc="57:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getOrigin" ref="0xb6e335e0" loc="60:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e33488" loc="60:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0xb6e307b0" loc="67:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e30478" loc="67:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="id" ref="0xb6e30650" loc="67:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOption" ref="0xb6e37660" loc="46:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e46068"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e372c0" loc="46:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="option" ref="0xb6e37500" loc="46:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e46068"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="matchPacket" ref="0xb6e2f7b8" loc="70:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m1" ref="0xb6e2f448" loc="70:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="m2" ref="0xb6e2f658" loc="70:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getThl" ref="0xb6e35b60" loc="54:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e35a08" loc="54:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0xb6e31350" loc="63:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e311f8" loc="63:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="matchInstance" ref="0xb6e2f010" loc="69:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m1" ref="0xb6e30c80" loc="69:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="m2" ref="0xb6e30e90" loc="69:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getType" ref="0xb6e30090" loc="66:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e31f28" loc="66:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setThl" ref="0xb6e34350" loc="55:../../tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e34010" loc="55:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="thl" ref="0xb6e341f0" loc="55:../../tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CollectionId" loc="45:../../tos/lib/net/CollectionId.nc">
      <documentation loc="35:../../tos/lib/net/CollectionId.nc">
        <short>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.</short>
        <long>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.&#10;&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2006-12-12 18:23:28 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="fetch" ref="0xb6e23300" loc="46:../../tos/lib/net/CollectionId.nc">
        <interfacedef-ref qname="CollectionId"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0xb7171c50"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkEstimator" loc="46:../../tos/lib/net/4bitle/LinkEstimator.nc">
      <documentation loc="35:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <short> Provides an additive quality measure for a neighbor.</short>
        <long> Provides an additive quality measure for a neighbor. The&#10; provided quality increases when the true link quality increases.&#10;  @author Rodrigo Fonseca&#10;  @author Omprakash Gnawali&#10;  @date   $Date: 2010-06-29 22:07:47 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="txAck" ref="0xb6e131e0" loc="62:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e13088" loc="62:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pinNeighbor" ref="0xb6e14630" loc="55:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e144d8" loc="55:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="txNoAck" ref="0xb6e13790" loc="66:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e13638" loc="66:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNeighbor" ref="0xb6e14058" loc="52:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e17ee0" loc="52:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0xb6e122f8" loc="72:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e121a0" loc="72:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearDLQ" ref="0xb6e13d50" loc="69:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e13bf8" loc="69:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="unpinNeighbor" ref="0xb6e14c20" loc="58:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e14ac8" loc="58:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLinkQuality" ref="0xb6e17a40" loc="49:../../tos/lib/net/4bitle/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0xb6e178e8" loc="49:../../tos/lib/net/4bitle/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0xb6e0bcb8" loc="59:../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0xb6e0b940" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0xb6e0bb58" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0xb6df7720" loc="65:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df7388" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0xb6df75c0" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0xb6df6200" loc="71:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df60a8" loc="71:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0xb6e06e98" loc="57:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0xb6e06818" loc="52:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0xb6e066c0" loc="52:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0xb6e08d58" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6e08c00" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0xb6dfb9c8" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dfb870" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0xb6dfa460" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dfa308" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0xb6df2240" loc="65:../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df20e8" loc="65:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0xb6df5660" loc="46:../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df52c8" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0xb6df5500" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0xb6df48c8" loc="59:../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df4770" loc="59:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0xb6df4250" loc="53:../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df5ea0" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0xb6df40f0" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0xb6df2b60" loc="71:../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df2a08" loc="71:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0xb6dff088" loc="177:../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0xb7187eb0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb6e00f08" loc="177:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0xb6e047e8" loc="88:../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb6e04690" loc="88:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0xb6e09720" loc="68:../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0xb6e09db8" loc="78:../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb6e09c60" loc="78:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0xb6e03170" loc="121:../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb6e05d70" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6e03010" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0xb6e053f0" loc="103:../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb6e05088" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6e05290" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0xb6e01a28" loc="147:../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb6e018d0" loc="147:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0xb6e00580" loc="162:../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb6e00250" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0xb6e00420" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb7187c58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0xb6e03d10" loc="136:../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb6e03bb8" loc="136:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0xb6dffd08" loc="187:../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb7187eb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb6dff9a8" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0xb6dffba8" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb7187eb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0xb6dfc5a0" loc="195:../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0xb7187eb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioChannel" loc="35:../../tos/lib/rfxlink/util/RadioChannel.nc">
      <function event="" provided="0" name="setChannelDone" ref="0xb6dee320" loc="48:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.</short>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0xb6dfee28" loc="42:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="37:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress),&#10; EALREADY if the selected channel is already set, SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0xb6dfecd0" loc="42:../../tos/lib/rfxlink/util/RadioChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0xb6dee7a8" loc="53:../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Returns the currently selected channel.</short>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0xb6df81c0" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb6df81c0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0xb6df8328" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6df8328"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0xb6dec518" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6df8328"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dec3c0" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0xb6deb010" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dece58" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0xb6df89b0" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6df8858" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb6debad0" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6df8328"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6deb760" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0xb6deb970" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb6df8328"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketField" loc="35:../../tos/lib/rfxlink/util/PacketField.nc">
      <parameters>
        <typedef name="value_type" ref="0xb6ddebf0" loc="35:../../tos/lib/rfxlink/util/PacketField.nc">
          <interfacedef-ref qname="PacketField"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0xb6ddebf0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="clear" ref="0xb6ddbee0" loc="51:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Clears the isSet flag.</short>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6ddbd88" loc="51:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb6ddb8c0" loc="46:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="42:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns the stored value of this field in the message.</short>
          <long>&#10; Returns the stored value of this field in the message. If the&#10; value is not set, then the returned value is undefined.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0xb6ddebf0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6ddb768" loc="46:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0xb6ddb2a0" loc="40:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="37:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns TRUE if the value is set for this message.</short>
          <long>&#10; Returns TRUE if the value is set for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6ddb148" loc="40:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb6dda698" loc="57:../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.</short>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0xb6ddebf0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dda320" loc="57:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0xb6dda538" loc="57:../../tos/lib/rfxlink/util/PacketField.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0xb6ddebf0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0xb6dd6bd8" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dd6a80" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Packet" loc="35:../../tos/interfaces/Ieee154Packet.nc">
      <function command="" provided="0" name="source" ref="0xb6dc0cc8" loc="41:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0xb718e638"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dc0b70" loc="41:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0xb6dc00f8" loc="37:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0xb718e638"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0xb6dc06f8" loc="39:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0xb718e638"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dc05a0" loc="39:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0xb6dbfc88" loc="45:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0xb718e638"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dbf8e8" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6dbfb28" loc="45:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0xb718e638"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0xb6dbf4e8" loc="43:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0xb718e638"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dbf148" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6dbf388" loc="43:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0xb718e638"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pan" ref="0xb6dbd7d0" loc="49:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0xb718e3a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dbd678" loc="49:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPan" ref="0xb6dbc010" loc="51:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0xb718e3a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dbdbb0" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0xb6dbdde0" loc="51:../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0xb718e3a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0xb6dbd220" loc="47:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dbd0c8" loc="47:../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0xb6dbc450" loc="53:../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0xb718e3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Send" loc="45:../../tos/interfaces/Ieee154Send.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb6dc8a88" loc="67:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="47:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0xb718e638"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0xb6dc8528" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0xb718e638"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0xb6dc8740" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6dc8920" loc="67:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0xb6dc3db0" loc="122:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="113:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dc3a50" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6dc3c30" loc="122:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb6dc34f0" loc="110:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="100:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb6dc5460" loc="83:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="69:../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dc5308" loc="83:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb6dc5e40" loc="97:../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="85:../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6dc5ae8" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0xb6dc5ce0" loc="97:../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Tasklet" loc="43:../../tos/lib/rfxlink/util/Tasklet.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/Tasklet.nc">
        <short>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled.</short>
        <long>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled. &#10; All state transitions should take place in the run event handler or&#10; in blocks protected by the suspend and resume commands.&#10;</long>
      </documentation>
      <function command="" provided="0" name="schedule" ref="0xb6dab1a8" loc="59:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Makes sure that the run event is called at least once more.</short>
          <long>&#10; Makes sure that the run event is called at least once more. If the &#10; run event is currently not executing, then it  is called immediately &#10; and this command returns only after the completion of the run event. &#10; If the run event is currently executed, then this method returns at &#10; once, and makes sure that the run event is called once more when &#10; it is finished. If this method is called from a task, then by the &#10; above rules, the run event will be called from a task as well.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="suspend" ref="0xb6dab778" loc="72:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="61:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section.</short>
          <long>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section. No long running&#10; computation should be called from the critical session, and&#10; in particular no user event should be fired. This call is only&#10; possible from task context, otherwise we cannot guarantee that&#10; the run event is not currently running. The suspend calls&#10; can be nested. It is very important that the same number of&#10; resume commands must be called in all control paths, e.g. be very&#10; careful with the return and break commands.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resume" ref="0xb6dabdb8" loc="79:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="74:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Leaves the critical section.</short>
          <long>&#10; Leaves the critical section. This call is conly possible from &#10; task context. If there were scheduled executions of the run&#10; event, then those will be called before this command returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="run" ref="0xb6db0d80" loc="48:../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; This method is executed atomically.</short>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DummyConfig" loc="35:../../tos/lib/rfxlink/layers/DummyConfig.nc">
      <function command="" provided="0" name="nothing" ref="0xb6d97860" loc="40:../../tos/lib/rfxlink/layers/DummyConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/DummyConfig.nc">
          <short>&#10; We need to put something here, but this is not going to get called&#10;</short>
        </documentation>
        <interfacedef-ref qname="DummyConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TrafficMonitorConfig" loc="35:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
      <function command="" provided="0" name="getBytes" ref="0xb6d96398" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the number of bytes in this message.</short>
          <long>&#10; Returns the number of bytes in this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d96240" loc="40:../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageConfig" loc="37:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
      <function command="" provided="0" name="group" ref="0xb6d8da18" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.group *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0xb7187eb0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d8d8c0" loc="52:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="checkFrame" ref="0xb6d8c7a0" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.</short>
          <long>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.&#10; Return SUCCESS if the frame is now properly set up, &#10; or FAIL of the send operation should be aborted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d8c648" loc="63:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0xb6d8eca8" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.source *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d8eb50" loc="46:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0xb6da2ef0" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.destination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6da2d98" loc="40:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0xb6d8d450" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setSource *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d8d0e8" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6d8d2f0" loc="49:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0xb6d8e6d8" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setDestination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d8e370" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6d8e578" loc="43:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0xb6d8c1c8" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setGroup *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb7187eb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d8de40" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0xb6d8c068" loc="55:../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb7187eb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlottedCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
      <function command="" provided="0" name="getInitialDelay" ref="0xb6d92390" loc="42:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getScheduleExponent" ref="0xb6d928d8" loc="49:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Must return a binary exponent so that the collision avoidance layer&#10; can assign slots in the range of [0, 1 &#60;&#60; exponent) of size collision&#10; window.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowLength" ref="0xb6d91e18" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="62:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the size of the collision window for this received message.</short>
          <long>&#10; Returns the size of the collision window for this received message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d91cc0" loc="65:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitTime" ref="0xb6d91010" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command must return the time when the message was transmitted.</short>
          <long>&#10; This command must return the time when the message was transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d92e30" loc="54:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowStart" ref="0xb6d91708" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="56:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d915b0" loc="60:../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioAlarm" loc="38:../../tos/lib/rfxlink/util/RadioAlarm.nc">
      <function event="" provided="0" name="fired" ref="0xb6d77210" loc="60:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="57:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; This event is fired when the specified timeout period expires.</short>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="wait" ref="0xb6d78990" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Waits till the specified timeout period expires.</short>
          <long>&#10; Waits till the specified timeout period expires. The alarm must be free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0xb718f048"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="timeout" ref="0xb6d78838" loc="50:../../tos/lib/rfxlink/util/RadioAlarm.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0xb718f048"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb6d78dd8" loc="55:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Cancels the running alarm.</short>
          <long>&#10; Cancels the running alarm. The alarm must be pending.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isFree" ref="0xb6d78300" loc="45:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="40:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns TRUE if the alarm is free and ready to be used.</short>
          <long>&#10; Returns TRUE if the alarm is free and ready to be used. Once the alarm&#10; is free, it cannot become nonfree in the same tasklet block. Note,&#10; if the alarm is currently set (even if for ourselves) then it is not free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0xb6d77688" loc="65:../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="62:../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns the current time as measured by the radio stack.</short>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0xb718f048"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioPacket" loc="35:../../tos/lib/rfxlink/util/RadioPacket.nc">
      <function command="" provided="0" name="clear" ref="0xb6d73780" loc="70:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="67:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Clears all metadata and sets all default values in the headers.</short>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d73628" loc="70:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0xb6d8bd50" loc="49:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="45:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the payload.</short>
          <long>&#10; Returns the length of the payload. The payload starts right&#10; after the header.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d8bbf8" loc="49:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb6d74a58" loc="59:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="56:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the maximum length that can be set for this message.</short>
          <long>&#10; Returns the maximum length that can be set for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0xb6d745c0" loc="54:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Sets the length of the payload.</short>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d74260" loc="54:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="length" ref="0xb6d74460" loc="54:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0xb6d8b658" loc="43:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="37:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; This command returns the length of the header.</short>
          <long>&#10; This command returns the length of the header. The header&#10; starts at the first byte of the message_t structure &#10; (some layers may add dummy bytes to allign the payload to&#10; the msg->data section).&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d8b500" loc="43:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0xb6d73168" loc="65:../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="61:../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the metadata section.</short>
          <long>&#10; Returns the length of the metadata section. The metadata section&#10; is at the very end of the message_t structure and grows downwards.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d73010" loc="65:../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RF230DriverConfig" loc="35:../../tos/chips/rf230/RF230DriverConfig.nc">
      <function command="" provided="0" name="maxPayloadLength" ref="0xb6da4be8" loc="46:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="42:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.</short>
          <long>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0xb6da46e8" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="37:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy header to align the payload properly.</short>
          <long>&#10; Returns the length of a dummy header to align the payload properly.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6da4590" loc="40:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0xb6da12e0" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="48:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6da1188" loc="52:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerPreloadLength" ref="0xb6da17c8" loc="59:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="54:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired.</short>
          <long>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired. If the length of the packet is less than this amount, &#10; then that event is fired earlier. The header length must be at least one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresRssiCca" ref="0xb6da1ef8" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="61:../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns TRUE if before sending this message we should make sure that&#10; the channel is clear via a very basic (and quick) RSSI check.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6da1da0" loc="65:../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaConfig" loc="35:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
      <function command="" provided="0" name="requiresSoftwareCCA" ref="0xb6da3658" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
          <short>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.</short>
        </documentation>
        <interfacedef-ref qname="CsmaConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6da3500" loc="41:../../tos/lib/rfxlink/layers/CsmaConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SoftwareAckConfig" loc="37:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
      <function command="" provided="0" name="reportChannelError" ref="0xb6d9b090" loc="86:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="82:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckPacket" ref="0xb6d9cbc8" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
          <long>&#10; Creates an acknowledgement packet for the given data packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6d9c850" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb6d9ca68" loc="80:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0xb6d9ecb0" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="51:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d9eb58" loc="55:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckPacket" ref="0xb6d9d310" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="57:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet is an acknowledgement packet.</short>
          <long>&#10; Returns TRUE if the received packet is an acknowledgement packet.&#10; The AckedSend layer will filter out all received acknowledgement&#10; packets and uses  only the matching one for the acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d9d1b8" loc="62:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckPacket" ref="0xb6d9dc48" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="64:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The acknowledgement packect was already verified &#10; to be a valid acknowledgement packet via the isAckPacket command.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6d9d8d0" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb6d9dae8" loc="69:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckTimeout" ref="0xb6da0e38" loc="43:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0xb6d9e658" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="45:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Sets the flag in the message indicating to the receiver whether&#10; the message should be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d9e330" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb6d9e4f8" loc="49:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0xb6d9c370" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet needs software acknowledgements&#10; to be sent back to the sender.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d9c218" loc="75:../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154PacketLayer" loc="45:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
      <documentation loc="38:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <short>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses.</short>
        <long>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses. It also &#10; supports 6LowPan interoperability mode, and acknowledgement frames.&#10; Note, that this interface does not support the CRC-16 value, which&#10; should be verified before the data can be trusted.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getDestPan" ref="0xb6d82e18" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="127:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; returns the destination PAN id, values &#60;= 255 are tinyos groups,&#10; valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d82cc0" loc="131:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDSN" ref="0xb6d82010" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="117:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d83e80" loc="120:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFCF" ref="0xb6d88010" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame control field.</short>
          <long>&#10; Sets the frame control field. This method should not be used, &#10; createDataFrame and createAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d89c48" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="fcf" ref="0xb6d89e38" loc="57:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckFrame" ref="0xb6d87420" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="71:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d872c8" loc="75:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcAddr" ref="0xb6d7e290" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="153:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d7fee8" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6d7e130" loc="156:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createDataFrame" ref="0xb6d88d18" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="65:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create a data frame supported by this interface.</short>
          <long>&#10; Sets the FCF to create a data frame supported by this interface.&#10; You may call setAckRequired and setFramePending commands after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d88bc0" loc="69:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDSN" ref="0xb6d82808" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="122:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d824c8" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dsn" ref="0xb6d826a8" loc="125:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckReply" ref="0xb6d86388" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="83:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
          <long>&#10; Creates an acknowledgement packet for the given data packet.&#10; This also sets the DSN value. The data message must be a &#10; data frame, the ack message will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6d86010" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb6d86228" loc="88:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSrcAddr" ref="0xb6d7fa70" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="148:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d7f918" loc="151:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isDataFrame" ref="0xb6d88678" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="59:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d88520" loc="63:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckRequired" ref="0xb6d84350" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="96:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the ACK required field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the ACK required field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d841f8" loc="99:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckReply" ref="0xb6d86c90" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="90:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The data message must be a data packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6d86918" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb6d86b30" loc="94:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localAddr" ref="0xb6d7c998" loc="178:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="175:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local address of the node (AM address)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0xb718e638"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0xb6d7e8b8" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="158:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d7e760" loc="162:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0xb6d7c4f8" loc="173:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="170:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local pan id (AM group)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0xb718e3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestAddr" ref="0xb6d7f448" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="143:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d7f0e8" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6d7f2e8" loc="146:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckFrame" ref="0xb6d87a50" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="77:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface.</short>
          <long>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface. You may call setFramePending after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d878f8" loc="81:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFramePending" ref="0xb6d839f8" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="112:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame pending field in the FCF.</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d836a8" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pending" ref="0xb6d83898" loc="115:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestPan" ref="0xb6d80618" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="133:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination PAN id, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d802c8" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pan" ref="0xb6d804b8" loc="136:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0xb6d7b010" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="180:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.</short>
          <long>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d7ce18" loc="185:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0xb6d84b58" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="101:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d84830" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb6d849f8" loc="105:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFCF" ref="0xb6d89790" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="47:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the frame control field.</short>
          <long>&#10; Returns the frame control field. This method should not be used, &#10; isDataFrame and isAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d89638" loc="51:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0xb6d7c010" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="164:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d7ee70" loc="168:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestAddr" ref="0xb6d80c48" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="138:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d80af0" loc="141:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFramePending" ref="0xb6d831c0" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="107:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the frame pending field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the frame pending field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d83068" loc="110:../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UniqueConfig" loc="37:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0xb6d98228" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="49:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Sets the sequence number of the packet.</short>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d99e88" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="number" ref="0xb6d980c8" loc="52:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportChannelError" ref="0xb6d98690" loc="58:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="54:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.</short>
          <long>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0xb6d99370" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="39:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sequence number of the packet.</short>
          <long>&#10; Returns the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d99218" loc="42:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSender" ref="0xb6d999b8" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="44:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sender of the packet.</short>
          <long>&#10; Returns the sender of the packet. &#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d99860" loc="47:../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RandomCollisionConfig" loc="35:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
      <function command="" provided="0" name="getCongestionBackoff" ref="0xb6d95800" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="42:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the amount of maximum backoff when there is congestion&#10; (the channel was busy for the first try)&#10;</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d956a8" loc="46:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInitialBackoff" ref="0xb6d95168" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="37:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the initial amount of maximum backoff for this message.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d95010" loc="40:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMinimumBackoff" ref="0xb6d95cf8" loc="51:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="48:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the minimum ticks before the message could be sent.</short>
          <long>&#10; Returns the minimum ticks before the message could be sent.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitBarrier" ref="0xb6d93470" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="53:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; The provided message was just received, and this command should return &#10; the time till no transmission should be initiated.</short>
          <long>&#10; The provided message was just received, and this command should return &#10; the time till no transmission should be initiated.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d93318" loc="57:../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareSend" loc="35:../../tos/lib/rfxlink/util/BareSend.nc">
      <function command="" provided="0" name="send" ref="0xb6d1b4c0" loc="46:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="37:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a task. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d1b368" loc="46:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb6d1a5c0" loc="64:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="56:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d1a468" loc="64:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb6d1be30" loc="54:../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d1bad8" loc="54:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0xb6d1bcd0" loc="54:../../tos/lib/rfxlink/util/BareSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareReceive" loc="35:../../tos/lib/rfxlink/util/BareReceive.nc">
      <function event="" provided="0" name="receive" ref="0xb6d18580" loc="42:../../tos/lib/rfxlink/util/BareReceive.nc">
        <documentation loc="37:../../tos/lib/rfxlink/util/BareReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
              <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6d18408" loc="42:../../tos/lib/rfxlink/util/BareReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0xb6d0c070" loc="50:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0xb6d0c8e0" loc="60:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0xb6d0c4e0" loc="55:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0xb7187eb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0xb6d0fb70" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb7187eb0"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0xb6d0f808" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb7187eb0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0xb6d0fa10" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioReceive" loc="37:../../tos/lib/rfxlink/util/RadioReceive.nc">
      <function event="" provided="0" name="receive" ref="0xb6bd9e10" loc="53:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
              <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6bd9c98" loc="53:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="header" ref="0xb6bd9620" loc="46:../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed.</short>
          <long>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed. Return FALSE if the message should be discarded.&#10; In particular, the message buffer layer returns FALSE if there is&#10; no space for a new message, so this message will not get acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6bd94c8" loc="46:../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="NeighborhoodFlag" loc="41:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <short>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example).</short>
      </documentation>
      <function command="" provided="0" name="clear" ref="0xb6bcbc20" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="53:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for the given index.</short>
          <long>&#10; Clears the flag for the given index. The flag is automatically&#10; cleared after the Neighborhood.evicted event is fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb6bcbac8" loc="57:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearAll" ref="0xb6bca0c8" loc="62:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for all indices&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb6bcb188" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="43:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Returns the value of the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb6bcb030" loc="46:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb6bcb6d0" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="48:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Sets the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb6bcb578" loc="51:../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Neighborhood" loc="42:../../tos/lib/rfxlink/util/Neighborhood.nc">
      <documentation loc="37:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <short>&#10; Every component maintains its own neighborhood data.</short>
        <long>&#10; Every component maintains its own neighborhood data. The Neighboorhood&#10; component maintains only the nodeids and ages of the neighbors, and&#10; evicts old entries from the table when necessary.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getAge" ref="0xb6bcfc08" loc="57:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="51:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the age of the given entry.</short>
          <long>&#10; Returns the age of the given entry. The age is incremented by one&#10; every time a new node is inserted into the neighborhood table that&#10; is not already at the very end. If the age would get too large to&#10; fit into a byte, then it is periodically reset to a smaller value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb6bcfab0" loc="57:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNode" ref="0xb6bce8f8" loc="71:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="64:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Adds a new node into the neighborhood table.</short>
          <long>&#10; Adds a new node into the neighborhood table. If this node was already&#10; in the table, then it is just brought to the front (its age is reset&#10; to zero). If the node was not in the table, then the oldest is evicted&#10; and its entry is replaced with this node. The index of the entry&#10; is returned in the range [0, NEIGHBORHOOD-1]. &#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0xb6bce7a0" loc="71:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNode" ref="0xb6bce318" loc="62:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="59:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the node address for the given entry.</short>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb6bce1c0" loc="62:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0xb6bcd010" loc="80:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="73:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; This event is fired when the oldest entry is replaced with a new&#10; node.</short>
          <long>&#10; This event is fired when the oldest entry is replaced with a new&#10; node. The same interface is used by many users, so all of them&#10; will receive this event and can clear the corresponding entry.&#10; After this event is fired, all flags for this entry are cleared&#10; (see the NeighborhoodFlag interface)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0xb6bcee58" loc="80:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIndex" ref="0xb6bcf588" loc="49:../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="44:../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the index of the neighbor in the table.</short>
          <long>&#10; Returns the index of the neighbor in the table. If the node was not &#10; found in the table, then the value NEIGHBORHOOD is  returned, &#10; otherwise an index in the range [0, NEIGHBORHOOD-1] is returned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0xb6bcf430" loc="49:../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioState" loc="37:../../tos/lib/rfxlink/util/RadioState.nc">
      <function command="" provided="0" name="turnOff" ref="0xb6b7cd38" loc="44:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time.</short>
          <long>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time. The radio cannot send or receive in this state &#10; and releases all access to shared resources (e.g. SPI bus). &#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0xb6b79740" loc="56:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Goes into receive state.</short>
          <long>&#10; Goes into receive state. The radio continuously receive messages &#10; and able to transmit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0xb6b79d88" loc="63:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="58:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress)&#10; SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0xb6b79c30" loc="63:../../tos/lib/rfxlink/util/RadioState.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="done" ref="0xb6b78210" loc="69:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="65:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.</short>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="standby" ref="0xb6b792c0" loc="50:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="46:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.</short>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0xb6b786c8" loc="74:../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="71:../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Returns the currently selected channel.</short>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioSend" loc="37:../../tos/lib/rfxlink/util/RadioSend.nc">
      <function command="" provided="0" name="send" ref="0xb6b7b710" loc="48:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a tasklet. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6b7b5b8" loc="48:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="ready" ref="0xb6b763e8" loc="63:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="58:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; This event is fired when the component is most likely able to accept &#10; a send request.</short>
          <long>&#10; This event is fired when the component is most likely able to accept &#10; a send request. If the send command has returned with a failure, then&#10; this event will be called at least once in the near future.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb6b7be88" loc="56:../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="50:../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0xb6b7bd30" loc="56:../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../tos/interfaces/Random.nc">
      <documentation loc="34:../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0xb6b359f8" loc="52:../../tos/interfaces/Random.nc">
        <documentation loc="48:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0xb6b35550" loc="46:../../tos/interfaces/Random.nc">
        <documentation loc="42:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0xb74b28a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0xb6b19098" loc="53:../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0xb6b19098"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0xb6b196e8" loc="64:../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0xb6b19098"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0xb6b19590" loc="64:../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0xb6b19098"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketFlag" loc="35:../../tos/lib/rfxlink/util/PacketFlag.nc">
      <function command="" provided="0" name="clear" ref="0xb6b03350" loc="55:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="52:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to FALSE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6b031f8" loc="55:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb6b05088" loc="40:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="37:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Returns if the flag is set for this message.</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6b08f00" loc="40:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setValue" ref="0xb6b05820" loc="45:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="42:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to the specified value.</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6b054e0" loc="45:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0xb6b056c0" loc="45:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb6b05da0" loc="50:../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="47:../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to TRUE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6b05c48" loc="50:../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioCCA" loc="37:../../tos/lib/rfxlink/util/RadioCCA.nc">
      <function event="" provided="0" name="done" ref="0xb6ae7010" loc="52:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="46:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Signals the completion of the clear channel assesment send command.</short>
          <long>&#10; Signals the completion of the clear channel assesment send command.&#10; SUCCESS means the channel is clear, EBUSY means the channel is not&#10; clear, and FAIL means that the clear channel assesment could not&#10; be finished or the operation was cancelled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0xb6aeae58" loc="52:../../tos/lib/rfxlink/util/RadioCCA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0xb6aea978" loc="44:../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="39:../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Starts the clear channel assesment procedure.</short>
          <long>&#10; Starts the clear channel assesment procedure. Returns EBUSY if the radio&#10; is currently servicing a clear channel assesment, and SUCCESS otherwise.&#10; The check will be performed only in the RX_READY state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0xb6a591a8" loc="54:../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0xb6a59b58" loc="66:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0xb6a59710" loc="61:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0xb6a595b8" loc="61:../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0xb6a5fc70" loc="53:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0xb6a5e718" loc="62:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6a5e5c0" loc="62:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0xb6a5c2b8" loc="74:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6a5c160" loc="74:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0xb6a5ec28" loc="68:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0xb6a5c898" loc="81:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6a5c740" loc="81:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="34:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0xb69ce038" loc="40:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb69ce038"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0xb69cbb20" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="84:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0xb69cb9c8" loc="88:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0xb69cb138" loc="76:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="72:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb69ce530" loc="47:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="43:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb69ce038"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0xb69cd090" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="56:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb69ce038"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0xb69cef28" loc="60:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb69ce038"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0xb69cd4d0" loc="64:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0xb69cb598" loc="82:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="78:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb69ceaa8" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="49:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb69ce038"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0xb69ce950" loc="53:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb69ce038"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb69cd8d8" loc="67:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="66:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb69cdcd0" loc="70:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="54:../../tos/interfaces/SpiPacket.nc">
      <documentation loc="35:../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both. It is a &#34;send&#34; command because reading&#10; from the SPI requires writing bytes. The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.8 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb69bdba8" loc="70:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="56:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0xb69bd638" loc="70:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0xb69bd850" loc="70:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb69bda40" loc="70:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb69bc298" loc="82:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="72:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0xb69bbac0" loc="82:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0xb69bbcd8" loc="82:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb69bbec8" loc="82:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0xb69bc128" loc="83:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0xb69be010" loc="45:../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0xb69d2e70" loc="45:../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Spi" loc="78:../../tos/chips/atm128/spi/Atm128Spi.nc">
      <function command="" provided="0" name="initSlave" ref="0xb69afb60" loc="86:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="85:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into slave mode.</short>
          <long> Initialize the ATmega128 SPI bus into slave mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPolarity" ref="0xb69a82b8" loc="126:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpiEnabled" ref="0xb69ab438" loc="117:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPhase" ref="0xb69a88a0" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sampleOnTrailing" ref="0xb69a8748" loc="128:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initMaster" ref="0xb69af710" loc="83:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="82:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into master mode.</short>
          <long> Initialize the ATmega128 SPI bus into master mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterBit" ref="0xb69aa3a0" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="isMaster" ref="0xb69aa248" loc="122:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0xb69ac658" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enabled" ref="0xb69ac500" loc="113:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0xb69ad478" loc="97:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="93:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Read the SPI data register &#10; </short>
          <long> &#10; Read the SPI data register &#10; @return last data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterDoubleSpeed" ref="0xb69a6a10" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0xb69a68b8" loc="141:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0xb69acab0" loc="114:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClock" ref="0xb69a7280" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="speed" ref="0xb69a7128" loc="131:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0xb69a7b08" loc="136:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPolarity" ref="0xb69aae30" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="highWhenIdle" ref="0xb69aacd8" loc="125:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterDoubleSpeed" ref="0xb69a6480" loc="140:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDataOrder" ref="0xb69ab9c8" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lsbFirst" ref="0xb69ab870" loc="119:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0xb69ada10" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="99:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Write the SPI data register &#10; </short>
          <long> &#10; Write the SPI data register &#10; @param data   next data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb69ad8b8" loc="103:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0xb69ab018" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="busOn" ref="0xb69acea8" loc="116:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterBitSet" ref="0xb69aa850" loc="123:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPhase" ref="0xb69a8cc8" loc="129:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClock" ref="0xb69a7690" loc="132:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0xb69a6010" loc="138:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOrderLsbFirst" ref="0xb69abe00" loc="120:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0xb69ad010" loc="89:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="88:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Disable and sleep the ATmega128 SPI bus.</short>
          <long> Disable and sleep the ATmega128 SPI bus. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0xb69ac010" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="105:../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short>&#10; Interrupt signalling SPI data cycle is complete.</short>
          <long>&#10; Interrupt signalling SPI data cycle is complete. &#10; @param data   data byte from data register&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb69ade80" loc="109:../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="76:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="67:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControlC" ref="0xb69410c8" loc="81:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0xb693f5d8" loc="87:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="86:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0xb6944838" loc="79:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="78:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0xb693e038" loc="91:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="90:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0xb693fb98" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0xb693fa40" loc="88:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0xb6941bb8" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0xb6941a60" loc="83:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0xb693e600" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0xb693e4a8" loc="92:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0xb6944c88" loc="80:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlC" ref="0xb693f168" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0xb693f010" loc="84:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0xb6941640" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0xb69414e8" loc="82:../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Cache" loc="44:../../tos/interfaces/Cache.nc">
      <documentation loc="34:../../tos/interfaces/Cache.nc">
        <short>&#10; A data item cache.</short>
        <long>&#10; A data item cache. The cache does not own the items it caches:&#10; there is no allocation/deallocation policy, or notification of&#10; eviction. Correspondingly, using references (pointers) as data&#10; items can be difficult.&#10; &#10; @author Rodrigo Fonseca&#10; @author Philip Levis &#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0xb683f9a8" loc="44:../../tos/interfaces/Cache.nc">
          <interfacedef-ref qname="Cache"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb683f9a8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="insert" ref="0xb683c010" loc="51:../../tos/interfaces/Cache.nc">
        <documentation loc="45:../../tos/interfaces/Cache.nc">
          <short>&#10; Inserts an item in the cache, evicting if necessary.</short>
          <long>&#10; Inserts an item in the cache, evicting if necessary.&#10; An atomic lookup after insert should return true.&#10;&#10; @param item - the data item to insert.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Cache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb683f9a8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="item" ref="0xb683fe10" loc="51:../../tos/interfaces/Cache.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb683f9a8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0xb683ca48" loc="65:../../tos/interfaces/Cache.nc">
        <documentation loc="61:../../tos/interfaces/Cache.nc">
          <short>&#10; Flush the cache of all entries.</short>
          <long>&#10; Flush the cache of all entries.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Cache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="lookup" ref="0xb683c5f8" loc="59:../../tos/interfaces/Cache.nc">
        <documentation loc="53:../../tos/interfaces/Cache.nc">
          <short>&#10; Return whether the data item is in the cache.</short>
          <long>&#10; Return whether the data item is in the cache.&#10;&#10; @param item - the data item to query&#10; @return Whether the item is in the cache.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Cache"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb683f9a8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="item" ref="0xb683c4a0" loc="59:../../tos/interfaces/Cache.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0xb683f9a8"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CompareBit" loc="47:../../tos/lib/net/ctp/CompareBit.nc">
      <documentation loc="35:../../tos/lib/net/ctp/CompareBit.nc">
        <short> Link estimator asks the routing engine if this entry&#10; should be inserted into the neighbor table if the&#10; white bit on a link is set but there is no room for the link&#10; on the link table.</short>
        <long> Link estimator asks the routing engine if this entry&#10; should be inserted into the neighbor table if the&#10; white bit on a link is set but there is no room for the link&#10; on the link table. The return value is the &#34;pin bit&#34; - if true&#10; insert into the neighbor table. In the reference implementation&#10; the router will return true if the path through the source&#10; will be better than a path through at least one current neighbor.&#10;@ author Omprakash Gnawali&#10;@ Created: September 16, 2006&#10;@date   $Date: 2010-06-29 22:07:49 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="shouldInsert" ref="0xb6736198" loc="51:../../tos/lib/net/ctp/CompareBit.nc">
        <interfacedef-ref qname="CompareBit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb67399a8" loc="51:../../tos/lib/net/ctp/CompareBit.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0xb6739e30" loc="51:../../tos/lib/net/ctp/CompareBit.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6736030" loc="51:../../tos/lib/net/ctp/CompareBit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CtpRoutingPacket" loc="43:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
      <documentation loc="33:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <short>&#10;  ADT for CTP routing frames.</short>
        <long>&#10;  ADT for CTP routing frames.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2009-09-21 02:19:42 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="clearOptions" ref="0xb6666e90" loc="51:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6666d38" loc="51:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEtx" ref="0xb6662060" loc="57:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6664cf0" loc="57:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="etx" ref="0xb6664ee0" loc="57:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOption" ref="0xb6666750" loc="48:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e46068"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb66663d0" loc="48:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="opt" ref="0xb66665f0" loc="48:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e46068"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getEtx" ref="0xb6664758" loc="56:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6664600" loc="56:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOption" ref="0xb6668de8" loc="47:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e46068"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6668a68" loc="47:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="opt" ref="0xb6668c88" loc="47:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e46068"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setParent" ref="0xb6664010" loc="54:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6665c08" loc="54:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb6665e10" loc="54:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getParent" ref="0xb6665650" loc="53:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0xb7186140"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb66654f8" loc="53:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getOption" ref="0xb66684b0" loc="46:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e46068"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6668130" loc="46:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="opt" ref="0xb6668350" loc="46:../../tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0xb6e46068"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0xb65631c8" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6565e10" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0xb6563068" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0xb6568f00" loc="15:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0xb6565800" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb6565488" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7177400"/>
                <typename><typedef-ref name="message_t" ref="0xb71761e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0xb65656a0" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0xb6544070" loc="54:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0xb654ac28" loc="49:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0xb65507d8" loc="56:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0xb6549460" loc="72:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0xb6547518" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb65473c0" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0xb6549988" loc="79:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0xb6550f08" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6550db0" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0xb6547a20" loc="100:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0xb6549ee8" loc="85:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0xb654f900" loc="71:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0xb654fec8" loc="81:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0xb654f2f0" loc="62:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0xb654f198" loc="62:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0xb654d628" loc="91:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0xb654d4d0" loc="91:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0xb65517a0" loc="62:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0xb654b010" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6551e30" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0xb654b6a8" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0xb654b550" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb649eae0" loc="48:../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0xb649e790" loc="48:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb649e980" loc="48:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0xb649be88" loc="79:../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0xb649bd30" loc="79:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0xb64986a8" loc="90:../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0xb6498358" loc="90:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6498548" loc="90:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0xb649b2f0" loc="65:../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0xb6497560" loc="99:../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0xb6497010" loc="99:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb6497200" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0xb64973f8" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0xb649b878" loc="72:../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb649a968" loc="57:../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0xb649a418" loc="57:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb649a608" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0xb74b2228"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0xb649a800" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="37:../../tos/interfaces/UartByte.nc">
      <documentation loc="32:../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb64878a8" loc="46:../../tos/interfaces/UartByte.nc">
        <documentation loc="39:../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0xb6487750" loc="46:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0xb6484170" loc="56:../../tos/interfaces/UartByte.nc">
        <documentation loc="48:../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0xb6487dd8" loc="56:../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0xb6484010" loc="56:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:../../tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:../../tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0xb6478850" loc="44:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0xb6478010" loc="42:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0xb6477e38" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6477ce0" loc="49:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0xb6477538" loc="47:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0xb647b710" loc="40:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0xb647bb50" loc="41:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0xb6478450" loc="43:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7358c68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0xb6478c50" loc="45:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb73776e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0xb6477188" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0xb6477030" loc="46:../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0xb6477908" loc="48:../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb74b3b88"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
